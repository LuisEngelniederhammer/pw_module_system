# -*- coding: cp1254 -*-
from header_common import *
from header_operations import *
from module_constants import *
from module_constants import *
from header_parties import *
from header_skills import *
from header_mission_templates import *
from header_items import *
from header_triggers import *
from header_terrain_types import *
from header_music import *


####################################################################################################################
# scripts is a list of script records.
# Each script record contns the following two fields:
# 1) Script id: The prefix "script_" will be inserted when referencing scripts.
# 2) Operation block: This must be a valid operation block. See header_operations.py for reference.
####################################################################################################################

scripts = [
  ("game_start", []),

  ("game_get_use_string",
   [(store_script_param, ":instance_id", 1),

    (try_begin),
      (multiplayer_is_server),
      (get_player_agent_no, ":my_agent_id"),
    (else_try),
      (multiplayer_get_my_player, ":my_player_id"),
      (player_get_agent_id, ":my_agent_id", ":my_player_id"),
    (try_end),

    (scene_prop_get_slot, ":item_id", ":instance_id", slot_scene_prop_item_id),
    (scene_prop_get_slot, ":use_string", ":instance_id", slot_scene_prop_use_string),
    (try_begin),
      (is_between, ":item_id", all_items_begin, all_items_end),
      (call_script, "script_scene_prop_get_gold_value", ":instance_id", ":item_id", 0),
      (assign, ":gold_value", reg0),
      (assign, ":gold_multiplier", reg1),

      (try_begin),
        (gt, ":use_string", 0),
        (str_store_item_name, s1, ":item_id"),
        (assign, reg1, ":gold_value"),
        (str_store_string, s0, ":use_string"),
      (else_try),
        (str_store_string, s0, "str_buy"),
      (try_end),

      (agent_get_look_position, pos3, ":my_agent_id"),
      (position_get_screen_projection, pos4, pos3),
      (show_item_details, ":item_id", pos4, ":gold_multiplier"),

    (else_try),
      (scene_prop_get_slot, ":troop_id", ":instance_id", slot_scene_prop_troop_id),
      (is_between, ":troop_id", playable_troops_begin, playable_troops_end),
      (str_store_troop_name_plural, s1, ":troop_id"),
      (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
      (assign, ":faction_id", reg0),
      (str_store_faction_name, s2, ":faction_id"),
      (try_begin),
        (gt, ":use_string", 0),
        (str_store_string, s0, ":use_string"),
      (else_try),
        (str_store_string, s0, "str_troop_train"),
      (try_end),
      (multiplayer_get_my_player, ":player_id"),
      (try_begin),
        (call_script, "script_cf_can_change_faction", ":player_id", ":faction_id"),
      (else_try),
        (str_store_string, s0, "str_troop_not_available"),
      (try_end),
      (try_begin),
        (scene_prop_get_slot, ":gold_cost", ":instance_id", slot_scene_prop_gold_value),
        (gt, ":gold_cost", 0),
        (assign, reg10, ":gold_cost"),
        (str_store_string, s0, "str_troop_cost"),
      (try_end),
      (store_attribute_level, reg10, ":troop_id", ca_strength),
      (store_attribute_level, reg11, ":troop_id", ca_agility),
      (str_store_string, s0, "str_troop_strength_agility"),
      (call_script, "script_store_troop_skills_description", ":troop_id"),
      (store_proficiency_level, reg10, ":troop_id", wpt_one_handed_weapon),
      (store_proficiency_level, reg11, ":troop_id", wpt_two_handed_weapon),
      (store_proficiency_level, reg12, ":troop_id", wpt_polearm),
      (store_proficiency_level, reg13, ":troop_id", wpt_archery),
      (store_proficiency_level, reg14, ":troop_id", wpt_crossbow),
      (store_proficiency_level, reg15, ":troop_id", wpt_throwing),
      (str_store_string, s0, "str_troop_weapon_proficiencies"),

    (else_try),
      (gt, ":use_string", 0),
      (scene_prop_get_slot, reg1, ":instance_id", slot_scene_prop_gold_value),
      (str_store_string, s0, ":use_string"),
    (else_try),
      (eq, ":use_string", -1),
      (str_clear, s0),
    (else_try),
      (str_store_string, s0, "str_use"),
    (try_end),
    ]),

  ("store_troop_skills_description", []),
  ("initialize_item_slots", []),

  ("game_quick_start",
   [
    (store_random_in_range, "$g_profile_troop_body_item", "itm_linen_tunic", "itm_tribal_warrior_outfit"),
    (store_random_in_range, "$g_profile_troop_foot_item", "itm_hunter_boots", "itm_leather_boots"),
    (call_script, "script_initialize_troop_equipment_slots"),
    (call_script, "script_initialize_item_slots"),
    (call_script, "script_initialize_banner_info"),
    ]),

  ("game_set_multiplayer_mission_end", []),
  ("game_enable_cheat_menu", []),
  ("game_get_console_command", []),
  ("game_event_party_encounter", []),
  ("game_event_simulate_battle", []),
  ("game_event_battle_end", []),
  ("game_get_item_buy_price_factor", []),
  ("game_get_item_sell_price_factor", []),
  ("game_event_buy_item", []),
  ("game_event_sell_item", []),
  ("game_get_troop_wage", []),
  ("game_get_total_wage", []),
  ("game_get_join_cost", []),
  ("game_get_upgrade_xp", []),
  ("game_get_upgrade_cost", []),
  ("game_get_prisoner_price", []),
  ("game_check_prisoner_can_be_sold", []),
  ("game_get_morale_of_troops_from_faction", []),
  ("game_event_detect_party", []),
  ("game_event_undetect_party", []),
  ("game_get_statistics_line", []),
  ("game_get_date_text", []),
  ("game_get_money_text", []),
  ("game_get_party_companion_limit", []),
  ("game_reset_player_party_name", []),
  ("game_get_troop_note", []),
  ("game_get_center_note", []),
  ("game_get_faction_note", []),
  ("game_get_quest_note", []),
  ("game_get_info_page_note", []),

  ("game_get_scene_name",
   [(store_script_param, ":scene_no", 1),
    (try_begin),
      (is_between, ":scene_no", scenes_begin, scenes_end),
      (store_sub, ":string_id", ":scene_no", scenes_begin),
      (val_add, ":string_id", scene_names_begin),
      (str_store_string, s0, ":string_id"),
    (try_end),
    ]),

  ("game_get_mission_template_name",
   [(store_script_param, ":mission_template_no", 1),
    (try_begin),
      (is_between, ":mission_template_no", game_type_mission_templates_begin, game_type_mission_templates_end),
      (store_add, ":string_id", ":mission_template_no", game_type_names_begin),
      (str_store_string, s0, ":string_id"),
    (try_end),
    ]),

  ("game_receive_url_response", []),
  ("game_get_cheat_mode", []),

  ("game_receive_network_message",
   [(store_script_param, ":sender_player_id", 1),
    (store_script_param, ":event_type", 2),

    (try_begin),
      (neg|multiplayer_is_server),
      (try_begin),
        (eq, ":event_type", server_event_preset_message),
        (store_script_param, ":string_id", 3),
        (store_script_param, ":flags", 4),
        (store_script_param, ":value_1", 5),
        (store_script_param, ":value_2", 6),
        (call_script, "script_preset_message", ":string_id", ":flags", ":value_1", ":value_2"),
      (else_try),
        (eq, ":event_type", server_event_agent_play_sound),
        (store_script_param, ":agent_id", 3),
        (store_div, ":sound_id", ":agent_id", net_sound_multiplier),
        (val_and, ":agent_id", net_sound_mask),
        (try_begin),
          (is_between, ":sound_id", 0, "snd_sounds_end"),
          (try_begin),
            (eq, ":agent_id", net_sound_mask),
            (play_sound, ":sound_id"),
          (else_try),
            (agent_is_active, ":agent_id"),
            (agent_play_sound, ":agent_id", ":sound_id"),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_scene_prop_play_sound),
        (store_script_param, ":instance_id", 3),
        (store_div, ":sound_id", ":instance_id", net_sound_multiplier),
        (val_and, ":instance_id", net_sound_mask),
        (try_begin),
          (is_between, ":sound_id", 0, "snd_sounds_end"),
          (prop_instance_is_valid, ":instance_id"),
          (prop_instance_get_position, pos1, ":instance_id"),
          (play_sound_at_position, ":sound_id", pos1),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_play_sound_at_position),
        (store_script_param, ":sound_id", 3),
        (store_script_param, ":packed_position", 4),
        (try_begin),
          (is_between, ":sound_id", 0, "snd_sounds_end"),
          (assign, ":pos_x", ":packed_position"),
          (val_and, ":pos_x", net_pack_3_mask_1),
          (assign, ":pos_y", ":packed_position"),
          (val_and, ":pos_y", net_pack_3_mask_2),
          (val_div, ":pos_y", net_pack_3_multiplier_2),
          (assign, ":pos_z", ":packed_position"),
          (val_and, ":pos_z", net_pack_3_mask_3),
          (val_div, ":pos_z", net_pack_3_multiplier_3),
          (val_sub, ":pos_z", net_pack_3_value_upper_bound / 2),
          (set_fixed_point_multiplier, 1),
          (position_set_x, pos1, ":pos_x"),
          (position_set_y, pos1, ":pos_y"),
          (position_set_z, pos1, ":pos_z"),
          (set_fixed_point_multiplier, 100),
          (play_sound_at_position, ":sound_id", pos1),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_agent_equip_armor),
        (store_script_param, ":agent_id", 3),
        (store_script_param, ":item_id", 4),
        (try_begin),
          (agent_is_active, ":agent_id"),
          (agent_is_alive, ":agent_id"),
          (is_between, ":item_id", all_items_begin, all_items_end),
          (agent_equip_item, ":agent_id", ":item_id"),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_player_set_slot),
        (store_script_param, ":player_id", 3),
        (store_script_param, ":slot_no", 4),
        (store_script_param, ":value", 5),
        (try_begin),
          (player_is_active, ":player_id"),
          (player_set_slot, ":player_id", ":slot_no", ":value"),
          (multiplayer_get_my_player, ":my_player_id"),
          (try_begin),
            (eq, ":player_id", ":my_player_id"),
            (eq, ":slot_no", slot_player_faction_id),
            (call_script, "script_preset_message", "str_joined_the_s1", preset_message_faction|preset_message_log, ":value", 0),
          (try_end),
        (try_end),
      (try_end),

    (else_try),
      (multiplayer_is_server),
    (try_end),
    ]),

  ("game_get_multiplayer_server_option_for_mission_template", []),
  ("game_multiplayer_server_option_for_mission_template_to_string", []),
  ("game_multiplayer_event_duel_offered", []),

  ("game_get_multiplayer_game_type_enum",
   [(assign, reg0, game_type_mission_templates_begin),
    (store_sub, reg1, game_type_mission_templates_begin, game_type_mission_templates_end),
    ]),

  ("game_multiplayer_get_game_type_mission_template",
   [(store_script_param, ":game_type", 1),
    (try_begin),
      (is_between, ":game_type", game_type_mission_templates_begin, game_type_mission_templates_end),
      (assign, reg0, ":game_type"),
    (else_try),
      (assign, reg0, -1),
    (try_end),
    ]),

  ("game_get_party_prisoner_limit", []),

  ("game_get_item_extra_text",
   [(store_script_param, ":item_id", 1),
    (store_script_param, ":extra_text_id", 2),
    #(store_script_param, ":item_modifier", 3),

    (try_begin),
      (eq, ":extra_text_id", 0),
      (item_get_slot, reg1, ":item_id", slot_item_difficulty),
      (try_begin),
        (gt, reg1, 0),
        (try_begin),
          (multiplayer_is_server),
          (get_player_agent_no, ":agent_id"),
          (agent_get_troop_id, ":troop_id", ":agent_id"),
        (else_try),
          (multiplayer_get_my_player, ":my_player"),
          (player_get_troop_id, ":troop_id", ":my_player"),
        (try_end),
        (item_get_type, ":item_type", ":item_id"),
        (try_begin),
          (eq, ":item_type", itp_type_bow),
          (set_result_string, "str_requires_power_draw_reg1"),
          (store_skill_level, ":troop_level", "skl_power_draw", ":troop_id"),
        (else_try),
          (eq, ":item_type", itp_type_thrown),
          (set_result_string, "str_requires_power_throw_reg1"),
          (store_skill_level, ":troop_level", "skl_power_throw", ":troop_id"),
        (else_try),
          (eq, ":item_type", itp_type_shield),
          (set_result_string, "str_requires_shield_reg1"),
          (assign, ":troop_level", 0),
        (else_try),
          (eq, ":item_type", itp_type_horse),
          (set_result_string, "str_requires_riding_reg1"),
          (store_skill_level, ":troop_level", "skl_riding", ":troop_id"),
        (else_try),
          (set_result_string, "str_requires_strength_reg1"),
          (store_attribute_level, ":troop_level", ":troop_id", ca_strength),
        (try_end),
        (try_begin),
          (ge, ":troop_level", reg1),
          (set_trigger_result, 0xFF33DD11),
        (else_try),
          (set_trigger_result, 0xFFFF4422),
        (try_end),
      (try_end),
    (try_end),
    ]),

  ("game_on_disembark", []),
  ("game_context_menu_get_buttons", []),
  ("game_event_context_menu_button_clicked", []),
  ("game_get_skill_modifier_for_troop", []),
  ("game_check_party_sees_party", []),
  ("game_get_party_speed_multiplier", []),

  ("add_troop_to_cur_tableau_for_profile",
   [(store_script_param, ":troop_no",1),
    (set_fixed_point_multiplier, 100),

    (cur_tableau_clear_override_items),
    (cur_tableau_set_camera_parameters, 1, 4, 6, 10, 10000),

    (init_position, pos5),
    (assign, ":cam_height", 105),
    (assign, ":camera_distance", 380),
    (assign, ":camera_yaw", -15),
    (assign, ":camera_pitch", -18),
    (assign, ":animation", "anim_stand_man"),

    (position_set_z, pos5, ":cam_height"),
    (position_rotate_x, pos5, -90),
    (position_rotate_z, pos5, 180),
    (position_rotate_y, pos5, ":camera_yaw"),
    (position_rotate_x, pos5, ":camera_pitch"),
    (position_move_z, pos5, ":camera_distance", 0),
    (position_move_x, pos5, 5, 0),

    (profile_get_banner_id, ":profile_banner"),
    (try_begin),
      (ge, ":profile_banner", 0),
      (init_position, pos2),
      (val_add, ":profile_banner", banner_meshes_begin),
      (position_set_x, pos2, -175),
      (position_set_y, pos2, -300),
      (position_set_z, pos2, 180),
      (position_rotate_x, pos2, 90),
      (position_rotate_y, pos2, -15),
      (cur_tableau_add_mesh, ":profile_banner", pos2, 0, 0),
    (try_end),

    (troop_clear_inventory, ":troop_no"),
    (troop_add_item, ":troop_no", "$g_profile_troop_body_item"),
    (troop_add_item, ":troop_no", "$g_profile_troop_foot_item"),
    (troop_equip_items, ":troop_no"),

    (init_position, pos2),
    (try_begin),
      (troop_is_hero, ":troop_no"),
      (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
    (else_try),
      (store_mul, ":random_seed", ":troop_no", 126233),
      (val_mod, ":random_seed", 1000),
      (val_add, ":random_seed", 1),
      (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
    (try_end),
    (cur_tableau_set_camera_position, pos5),

    (copy_position, pos8, pos5),
    (position_rotate_x, pos8, -90),
    (position_rotate_z, pos8, 30),
    (position_rotate_x, pos8, -60),
    (cur_tableau_add_sun_light, pos8, 175,150,125),
    ]),

  ("preset_message",
   [(store_script_param, "$g_preset_message_string_id", 1),
    (store_script_param, ":flags", 2),
    (store_script_param, "$g_preset_message_value_1", 3),
    (store_script_param, "$g_preset_message_value_2", 4),

    (assign, ":color", ":flags"),
    (val_and, ":color", preset_message_color_mask),
    (try_begin),
      (eq, ":color", preset_message_white),
      (assign, "$g_preset_message_color", 0xFFFFFFFF),
    (else_try),
      (eq, ":color", preset_message_red),
      (assign, "$g_preset_message_color", 0xFFFF4422),
    (else_try),
      (eq, ":color", preset_message_green),
      (assign, "$g_preset_message_color", 0xFF33DD11),
    (else_try),
      (eq, ":color", preset_message_blue),
      (assign, "$g_preset_message_color", 0xFFFF4422),
    (else_try),
      (eq, ":color", preset_message_yellow),
      (assign, "$g_preset_message_color", 0xFFFFEE11),
    (try_end),

    (assign, "$g_preset_message_type", ":flags"),
    (val_and, "$g_preset_message_type", preset_message_type_mask),
    (try_begin),
      (eq, "$g_preset_message_type", preset_message_read_object),
      (start_presentation, "prsnt_read_object"),
    (else_try),
      (assign, "$g_preset_message_params", ":flags"),
      (val_and, "$g_preset_message_params", preset_message_params_mask),

      # keep the same as in prsnt_preset_message_* - unfortunately scripts and presentations are not run in order
      (try_begin),
        (eq, "$g_preset_message_params", preset_message_item),
        (is_between, "$g_preset_message_value_1", 1, all_items_end),
        (str_store_item_name, s1, "$g_preset_message_value_1"),
      (else_try),
        (eq, "$g_preset_message_params", preset_message_agent),
        (agent_is_active, "$g_preset_message_value_1"),
        (str_store_agent_name, s1, "$g_preset_message_value_1"),
      (else_try),
        (eq, "$g_preset_message_params", preset_message_player),
        (player_is_active, "$g_preset_message_value_1"),
        (str_store_player_username, s1, "$g_preset_message_value_1"),
      (else_try),
        (eq, "$g_preset_message_params", preset_message_faction),
        (is_between, "$g_preset_message_value_1", factions_begin, factions_end),
        (str_store_faction_name, s1, "$g_preset_message_value_1"),
        (faction_get_color, "$g_preset_message_color", "$g_preset_message_value_1"),
      (else_try),
        (assign, reg1, "$g_preset_message_value_1"),
        (assign, reg2, "$g_preset_message_value_2"),
      (try_end),
      # end keep same

      (assign, ":log", ":flags"),
      (val_and, ":log", preset_message_log),
      (try_begin),
        (eq, ":log", preset_message_log),
        (display_message, "$g_preset_message_string_id", "$g_preset_message_color"),
      (try_end),

      (assign, ":fail_sound", ":flags"),
      (val_and, ":fail_sound", preset_message_fail_sound),
      (try_begin),
        (eq, ":fail_sound", preset_message_fail_sound),
        (play_sound, "snd_failure"),
      (try_end),

      (try_begin),
        (eq, "$g_preset_message_display_enabled", 0),
      (else_try),
        (eq, "$g_preset_message_type", preset_message_small),
        (start_presentation, "prsnt_preset_message_small"),
      (else_try),
        (eq, "$g_preset_message_type", preset_message_big),
        (start_presentation, "prsnt_preset_message_big"),
      (try_end),
    (try_end),
    ]),

  ("initialize_banner_info",
   [
    (faction_set_slot, "fac_commoners", slot_faction_banner_mesh, "mesh_banner_kingdom_e"),
    (faction_set_slot, "fac_outlaws", slot_faction_banner_mesh, "mesh_banner_kingdom_c"),
    (faction_set_slot, "fac_1", slot_faction_banner_mesh, "mesh_banner_kingdom_f"),
    (faction_set_slot, "fac_2", slot_faction_banner_mesh, "mesh_banner_kingdom_b"),
    (faction_set_slot, "fac_3", slot_faction_banner_mesh, "mesh_banner_kingdom_a"),
    (faction_set_slot, "fac_4", slot_faction_banner_mesh, "mesh_banner_kingdom_d"),

    (troop_set_slot, "trp_banner_background_color_array", 0, 0xFFAAAA99),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a01", 0xFF8f4531),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a02", 0xFFd9d7d1),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a03", 0xFF373736),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a04", 0xFFa48b28),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a05", 0xFF497735),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a06", 0xFF82362d),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a07", 0xFF793329),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a08", 0xFF262521),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a09", 0xFFd9dad1),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a10", 0xFF524563),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a11", 0xFF91312c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a12", 0xFFafa231),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a13", 0xFF706d3c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a14", 0xFFd6d3ce),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a15", 0xFFd6d3ce),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a16", 0xFF394584),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a17", 0xFF42662e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a18", 0xFFdfded6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a19", 0xFF292724),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a20", 0xFF58611b),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a21", 0xFF313a67),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b01", 0xFF9c924a),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b02", 0xFF998b39),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b03", 0xFF365168),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b04", 0xFFd6d3ce),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b05", 0xFF94a642),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b06", 0xFF944131),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b07", 0xFF893b34),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b08", 0xFF425510),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b09", 0xFF94452e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b10", 0xFF475a94),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b11", 0xFFd1b231),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b12", 0xFFe1e2df),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b13", 0xFF997c1e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b14", 0xFFc6b74d),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b15", 0xFFad9a18),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b16", 0xFF212421),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b17", 0xFF8c2021),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b18", 0xFF4d7136),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b19", 0xFF395d84),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b20", 0xFF527539),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b21", 0xFF9c3c39),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c01", 0xFF42518c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c02", 0xFFa46a2c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c03", 0xFF9f5141),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c04", 0xFF2c6189),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c05", 0xFF556421),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c06", 0xFF9d621e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c07", 0xFFdeded6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c08", 0xFF6e4891),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c09", 0xFF865a29),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c10", 0xFFdedfd9),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c11", 0xFF524273),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c12", 0xFF8c3821),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c13", 0xFFd1cec6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c14", 0xFF313031),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c15", 0xFF47620d),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c16", 0xFF6b4139),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c17", 0xFFd6d7d6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c18", 0xFF2e2f2c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c19", 0xFF604283),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c20", 0xFF395584),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c21", 0xFF313031),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d01", 0xFF7e3f2e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d02", 0xFF343434),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d03", 0xFF3c496b),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d04", 0xFFd9d8d1),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d05", 0xFF99823c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d06", 0xFF9f822e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d07", 0xFF393839),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d08", 0xFFa54931),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d09", 0xFFdfdcd6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d10", 0xFF9f4a36),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d11", 0xFF8c7521),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d12", 0xFF9f4631),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d13", 0xFF793324),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d14", 0xFF395076),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d15", 0xFF2c2b2c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d16", 0xFF657121),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d17", 0xFF7e3121),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d18", 0xFF76512e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d19", 0xFFe7e3de),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d20", 0xFF947921),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d21", 0xFF4d7b7c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e01", 0xFF343331),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e02", 0xFFa74d36),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e03", 0xFFe7e3de),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e04", 0xFFd6d8ce),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e05", 0xFF3e4d67),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e06", 0xFF9f842e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e07", 0xFF4d6994),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e08", 0xFF4a6118),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e09", 0xFF943c29),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e10", 0xFF394479),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e11", 0xFF343331),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e12", 0xFF3f4d5d),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e13", 0xFF4a6489),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e14", 0xFF313031),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e15", 0xFFd6d7ce),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e16", 0xFFc69e00),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e17", 0xFF638e52),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e18", 0xFFdcdbd3),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e19", 0xFFdbdcd3),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e20", 0xFF843831),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e21", 0xFFcecfc6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f01", 0xFFc39d31),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f02", 0xFFcbb670),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f03", 0xFF394a18),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f04", 0xFF372708),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f05", 0xFF9a6810),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f06", 0xFFb27910),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f07", 0xFF8c8621),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f08", 0xFF975a03),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f09", 0xFF2c2924),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f10", 0xFFaa962c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f11", 0xFFa2822e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f12", 0xFF7b8a8c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f13", 0xFF3c0908),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f14", 0xFFFF00FF),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f15", 0xFF671e14),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f16", 0xFF103042),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f17", 0xFF4a4500),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f18", 0xFF703324),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f19", 0xFF24293c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f20", 0xFF5d6966),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f21", 0xFF521c08),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g01", 0xFFbd9631),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g02", 0xFFc6b26b),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g03", 0xFF394918),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g04", 0xFF372708),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g05", 0xFF9a6810),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g06", 0xFFb27910),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g07", 0xFF8c8621),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g08", 0xFF975a03),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g09", 0xFF2c2924),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g10", 0xFFaa962c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_a", 0xFF316184),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_b", 0xFFd6d3bd),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_c", 0xFF633039),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_d", 0xFF3f6c2e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_e", 0xFFc6a64a),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_f", 0xFF5a2421),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banners_default_a", 0xFF242424),
    ]),

  ("item_set_banner",
   [(store_script_param, ":tableau_id", 1),
    (store_script_param, ":agent_id", 2),
    #(store_script_param, ":troop_id", 3),

    (try_begin),
      (agent_is_active, ":agent_id"),
      (agent_get_player_id, ":player_id", ":agent_id"),
      (player_is_active, ":player_id"),
      (player_get_slot, ":player_faction_id", ":player_id", slot_player_faction_id),
      (ge, ":player_faction_id", castle_factions_begin),
      (faction_get_slot, ":banner_mesh", ":player_faction_id", slot_faction_banner_mesh),
      (gt, ":banner_mesh", 0),
    (else_try),
      (assign, ":banner_mesh", 0),
    (try_end),
    (cur_item_set_tableau_material, ":tableau_id", ":banner_mesh"),
    ]),

  ("cf_add_item_to_troop_equipment_slots",
   [(store_script_param, ":troop_id", 1),
    (store_script_param, ":item_id", 2),

    (item_get_type, ":item_type", ":item_id"),
    (try_begin),
      (eq, ":item_type", itp_type_one_handed_wpn),
      (assign, ":equipment_slot_begin", slot_troop_equipment_one_hand_begin),
    (else_try),
      (is_between, ":item_type", itp_type_two_handed_wpn, itp_type_polearm + 1),
      (assign, ":equipment_slot_begin", slot_troop_equipment_two_hand_begin),
    (else_try),
      (is_between, ":item_type", itp_type_bow, itp_type_thrown + 1),
      (assign, ":equipment_slot_begin", slot_troop_equipment_ranged_begin),
    (else_try),
      (is_between, ":item_type", itp_type_arrows, itp_type_bolts + 1),
      (assign, ":equipment_slot_begin", slot_troop_equipment_ammo_begin),
    (else_try),
      (eq, ":item_type", itp_type_shield),
      (assign, ":equipment_slot_begin", slot_troop_equipment_shield_begin),
    (else_try),
      (eq, ":item_type", itp_type_head_armor),
      (assign, ":equipment_slot_begin", slot_troop_equipment_head_begin),
    (else_try),
      (eq, ":item_type", itp_type_body_armor),
      (assign, ":equipment_slot_begin", slot_troop_equipment_body_begin),
    (else_try),
      (eq, ":item_type", itp_type_foot_armor),
      (assign, ":equipment_slot_begin", slot_troop_equipment_foot_begin),
    (else_try),
      (eq, ":item_type", itp_type_hand_armor),
      (assign, ":equipment_slot_begin", slot_troop_equipment_hand_begin),
    (else_try),
      (eq, ":item_type", itp_type_horse),
      (assign, ":equipment_slot_begin", slot_troop_equipment_horse_begin),
    (else_try),
      (assign, ":equipment_slot_begin", -1),
    (try_end),
    (neq, ":equipment_slot_begin", -1),

    (troop_get_slot, ":equipment_slot_count", ":troop_id", ":equipment_slot_begin"),
    (lt, ":equipment_slot_count", troop_slot_count_per_equipment_type - 1),
    (val_add, ":equipment_slot_count", 1),
    (troop_set_slot, ":troop_id", ":equipment_slot_begin", ":equipment_slot_count"),
    (val_add, ":equipment_slot_begin", ":equipment_slot_count"),
    (troop_set_slot, ":troop_id", ":equipment_slot_begin", ":item_id"),
    ]),

  ("initialize_troop_equipment_slots",
   [
    (try_begin),
      (multiplayer_is_server),
      (try_for_range, ":troop_id", playable_troops_begin, playable_troops_end),
        (troop_get_inventory_capacity, ":capacity", ":troop_id"),
        (try_for_range, ":inv_slot", 0, ":capacity"),
          (troop_get_inventory_slot, ":item_id", ":troop_id", ":inv_slot"),
          (gt, ":item_id", 0),
          (call_script, "script_cf_add_item_to_troop_equipment_slots", ":troop_id", ":item_id"),
        (try_end),
      (try_end),
    (try_end),
    ]),

  ("cf_troop_get_random_equipment",
   [(store_script_param, ":troop_id", 1),
    (store_script_param, ":slot_begin", 2),

    (troop_get_slot, ":item_count", ":troop_id", ":slot_begin"),
    (gt, ":item_count", 0),
    (val_add, ":slot_begin", 1),
    (store_add, ":slot_end", ":slot_begin", ":item_count"),
    (store_random_in_range, ":random_slot", ":slot_begin", ":slot_end"),
    (troop_get_slot, reg0, ":troop_id", ":random_slot"),
    ]),

  ("player_add_troop_spawn_items",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":troop_id", 2),

    (try_begin),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_one_hand_begin),
      (player_add_spawn_item, ":player_id", ek_item_0, reg0),
    (else_try),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_two_hand_begin),
      (player_add_spawn_item, ":player_id", ek_item_0, reg0),
    (try_end),
    (try_begin),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_shield_begin),
      (player_add_spawn_item, ":player_id", ek_item_1, reg0),
    (try_end),
    (try_begin),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_ranged_begin),
      (item_get_type, ":ranged_item_type", reg0),
      (player_add_spawn_item, ":player_id", ek_item_2, reg0),
      (try_begin),
        (neq, ":ranged_item_type", itp_type_thrown),
        (val_sub, ":ranged_item_type", itp_type_bow - itp_type_arrows),
        (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_ammo_begin),
        (item_get_type, ":ammo_item_type", reg0),
        (try_begin),
          (eq, ":ammo_item_type", ":ranged_item_type"),
          (player_add_spawn_item, ":player_id", ek_item_3, reg0),
        (else_try),
          (troop_get_slot, ":ammo_slot_end", ":troop_id", slot_troop_equipment_ammo_begin),
          (val_add, ":ammo_slot_end", slot_troop_equipment_ammo_begin + 1),
          (try_for_range, ":ammo_slot", slot_troop_equipment_ammo_begin + 1, ":ammo_slot_end"),
            (troop_get_slot, ":ammo_item", ":troop_id", ":ammo_slot"),
            (item_get_type, ":ammo_item_type", ":ammo_item"),
            (eq, ":ammo_item_type", ":ranged_item_type"),
            (player_add_spawn_item, ":player_id", ek_item_3, reg0),
            (assign, ":ammo_slot_end", 0),
          (try_end),
        (try_end),
      (try_end),
    (else_try),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_two_hand_begin),
      (player_add_spawn_item, ":player_id", ek_item_2, reg0),
    (try_end),
    (try_begin),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_head_begin),
      (player_add_spawn_item, ":player_id", ek_head, reg0),
    (try_end),
    (try_begin),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_body_begin),
      (player_add_spawn_item, ":player_id", ek_body, reg0),
    (try_end),
    (try_begin),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_foot_begin),
      (player_add_spawn_item, ":player_id", ek_foot, reg0),
    (try_end),
    (try_begin),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_hand_begin),
      (player_add_spawn_item, ":player_id", ek_gloves, reg0),
    (try_end),
    (try_begin),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_horse_begin),
      (player_add_spawn_item, ":player_id", ek_horse, reg0),
    (try_end),
    ]),

  ("cf_check_player_add_spawn_item",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":troop_id", 2),
    (store_script_param, ":equip_slot", 3),
    (store_script_param, ":item_id", 4),

    (gt, ":item_id", 0),
    (call_script, "script_cf_check_troop_can_equip_item", ":troop_id", ":item_id"),
    (assign, ":fail", 0),
    (player_get_item_id, ":troop_item_id", ":player_id", ":equip_slot"),
    (try_begin),
      (gt, ":troop_item_id", 0),
      (store_item_value, ":troop_item_value", ":troop_item_id"),
      (store_item_value, ":item_value", ":item_id"),
      (lt, ":item_value", ":troop_item_value"),
      (assign, ":fail", 1),
    (try_end),
    (eq, ":fail", 0),
    (player_add_spawn_item, ":player_id", ":equip_slot", ":item_id"),
    ]),

  ("player_add_spawn_items",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":troop_id", 2),

    (call_script, "script_player_add_troop_spawn_items", ":player_id", ":troop_id"),
    (player_get_agent_id, ":agent_id", ":player_id"),
    (try_begin),
      (agent_is_alive, ":agent_id"),
      (try_for_range, ":equip_slot", ek_head, ek_gloves + 1),
        (player_get_slot, ":item_id", ":player_id", ":equip_slot"),
        (call_script, "script_cf_check_player_add_spawn_item", ":player_id", ":troop_id", ":equip_slot", ":item_id"),
      (try_end),
      (assign, ":equip_slot", ek_item_0),
      (assign, ":loop_condition", wielded_items_begin),
      (try_for_range_backwards, ":item_id", ":loop_condition", wielded_items_end), #more valuable at the end?
        (agent_has_item_equipped, ":agent_id", ":item_id"),
        (call_script, "script_cf_check_player_add_spawn_item", ":player_id", ":troop_id", ":equip_slot", ":item_id"),
        (val_add, ":equip_slot", 1),
        (gt, ":equip_slot", ek_item_3),
        (assign, ":loop_condition", wielded_items_end),
      (try_end),
      (try_begin),
        (agent_get_horse, ":horse_item_id", ":agent_id"),
        (call_script, "script_cf_check_player_add_spawn_item", ":player_id", ":troop_id", ":equip_slot", ":horse_item_id"),
      (try_end),
    (try_end),
    ]),

  ("player_check_spawn_agent",
   [(store_script_param, ":player_id", 1),

    (try_begin),
      (player_is_active, ":player_id"),
      (neg|player_is_busy_with_menus, ":player_id"),
      (player_get_agent_id, ":agent_id", ":player_id"),
      (this_or_next|lt, ":agent_id", 0),
      (neg|agent_is_alive, ":agent_id"),
      (player_get_troop_id, ":troop_id", ":player_id"),
      (call_script, "script_player_add_troop_spawn_items", ":player_id", ":troop_id"),
      (player_spawn_new_agent, ":player_id", 0),
    (try_end),
    ]),

  ("array_copy_range",
   [(store_script_param, ":from_array_troop_id", 1),
    (store_script_param, ":from_array_index", 2),
    (store_script_param, ":to_array_troop_id", 3),
    (store_script_param, ":to_array_index", 4),
    (store_script_param, ":count", 5),

    (try_for_range, ":unused", 0, ":count"),
      (troop_get_slot, ":value", ":from_array_troop_id", ":from_array_index"),
      (troop_set_slot, ":to_array_troop_id", ":to_array_index", ":value"),
      (val_add, ":from_array_index", 1),
      (val_add, ":to_array_index", 1),
    (try_end),
    ]),

  ("copy_player_values_to_inactive",
   [(store_script_param, ":active_index", 1),

    (troop_get_slot, ":inactive_array_size", "trp_inactive_players_array", slot_player_array_size),
    (troop_get_slot, ":active_unique_id", "trp_active_players_array", ":active_index"),
    (assign, ":loop_end", ":inactive_array_size"),
    (assign, ":inactive_index", slot_player_array_begin),
    (try_for_range, ":unused", 0, ":loop_end"),
      (try_begin),
        (this_or_next|troop_slot_eq, "trp_inactive_players_array", ":inactive_index", 0),
        (troop_slot_eq, "trp_inactive_players_array", ":inactive_index", ":active_unique_id"),
        (assign, ":loop_end", -1),
      (else_try),
        (val_add, ":inactive_index", player_array_entry_size),
      (try_end),
    (try_end),
    (try_begin),
      (neq, ":loop_end", -1),
      (val_add, ":inactive_array_size", 1),
      (troop_set_slot, "trp_inactive_players_array", slot_player_array_size, ":inactive_array_size"),
    (try_end),
    (call_script, "script_array_copy_range", "trp_active_players_array", ":active_index", "trp_inactive_players_array", ":inactive_index", player_array_entry_size),
    ]),

  ("player_check_stored_values",
   [(store_script_param, ":player_id", 1),

    (store_mul, ":player_index", ":player_id", player_array_entry_size),
    (troop_get_slot, ":stored_unique_id", "trp_active_players_array", ":player_index"),
    (try_begin),
      (player_is_active, ":player_id"),
      (player_get_unique_id, ":player_unique_id", ":player_id"),
      (try_begin),
        (neq, ":player_unique_id", ":stored_unique_id"),
        (try_begin),
          (neq, ":stored_unique_id", 0),
          (call_script, "script_copy_player_values_to_inactive", ":player_index"),
        (try_end),
        (troop_set_slot, "trp_active_players_array", ":player_index", ":player_unique_id"),
      (try_end),
      (player_get_troop_id, ":troop_id", ":player_id"),
      (store_add, ":temp_index", ":player_index", player_array_troop_id),
      (troop_set_slot, "trp_active_players_array", ":temp_index", ":troop_id"),
      (player_get_slot, ":faction_id", ":player_id", slot_player_faction_id),
      (store_add, ":temp_index", ":player_index", player_array_faction_id),
      (troop_set_slot, "trp_active_players_array", ":temp_index", ":faction_id"),
      (player_get_gold, ":gold_value", ":player_id"),
      (store_add, ":temp_index", ":player_index", player_array_gold_value),
      (troop_set_slot, "trp_active_players_array", ":temp_index", ":gold_value"),
    (else_try),
      (neq, ":stored_unique_id", 0),
      (call_script, "script_copy_player_values_to_inactive", ":player_index"),
      (troop_set_slot, "trp_active_players_array", ":player_index", 0),
    (try_end),
    ]),

  ("setup_player_joined",
   [(store_script_param, ":player_id", 1),

    (assign, ":found", 0),
    (player_get_unique_id, ":player_unique_id", ":player_id"),
    (store_mul, ":active_index", ":player_id", player_array_entry_size),
    (troop_get_slot, ":inactive_array_size", "trp_inactive_players_array", slot_player_array_size),
    (try_begin),
      (gt, ":inactive_array_size", 0),
      (store_sub, ":inactive_last_entry_number", ":inactive_array_size", 1),
      (store_mul, ":inactive_index", ":inactive_last_entry_number", player_array_entry_size),
      (val_add, ":inactive_index", slot_player_array_begin),
      (assign, ":loop_condition", ":inactive_array_size"),
      (try_for_range, ":unused", 0, ":loop_condition"),
        (troop_get_slot, ":inactive_unique_id", "trp_inactive_players_array", ":inactive_index"),
        (try_begin),
          (neq, ":inactive_unique_id", ":player_unique_id"),
          (val_sub, ":inactive_index", player_array_entry_size),
        (else_try),
          (call_script, "script_array_copy_range", "trp_inactive_players_array", ":inactive_index", "trp_active_players_array", ":active_index", player_array_entry_size),
          (troop_set_slot, "trp_inactive_players_array", ":inactive_index", 0),
          (assign, ":loop_condition", 0),
          (assign, ":found", 1),
        (try_end),
      (try_end),
      (try_begin),
        (eq, ":found", 0),
        (get_max_players, ":loop_condition"),
        (try_for_range, ":unchecked_player_id", 1, ":loop_condition"),
          (neg|player_is_active, ":unchecked_player_id"),
          (store_mul, ":unchecked_player_index", ":unchecked_player_id", player_array_entry_size),
          (troop_get_slot, ":unchecked_unique_id", "trp_active_players_array", ":unchecked_player_index"),
          (eq, ":unchecked_unique_id", ":player_unique_id"),
          (call_script, "script_array_copy_range", "trp_active_players_array", ":unchecked_player_index", "trp_active_players_array", ":active_index", player_array_entry_size),
          (troop_set_slot, "trp_active_players_array", ":unchecked_player_index", 0),
          (assign, ":loop_condition", 0),
          (assign, ":found", 1),
        (try_end),
      (try_end),
    (try_end),
    (get_max_players, ":max_players"),
    (try_begin),
      (eq, ":found", 1),
      (store_add, ":temp_index", ":active_index", player_array_troop_id),
      (troop_get_slot, ":troop_id", "trp_active_players_array", ":temp_index"),
      (player_set_troop_id, ":player_id", ":troop_id"),
      (store_add, ":temp_index", ":active_index", player_array_faction_id),
      (troop_get_slot, ":faction_id", "trp_active_players_array", ":temp_index"),
      (player_set_slot, ":player_id", slot_player_faction_id, ":faction_id"),
      (store_add, ":temp_index", ":active_index", player_array_gold_value),
      (troop_get_slot, ":gold_value", "trp_active_players_array", ":temp_index"),
      (store_random_in_range, ":keep_percentage", 50, 80),
      (val_mul, ":gold_value", ":keep_percentage"),
      (val_div, ":gold_value", 100),
      (player_set_gold, ":player_id", ":gold_value", max_correctly_displayed_gold),
      (try_begin),
        (neq, ":faction_id", 0),
        (try_for_range, ":other_player_id", 1, ":max_players"),
          (player_is_active, ":other_player_id"),
          (multiplayer_send_3_int_to_player, ":other_player_id", server_event_player_set_slot, ":player_id", slot_player_faction_id, ":faction_id"),
        (try_end),
      (try_end),
    (else_try),
      (player_set_troop_id, ":player_id", playable_troops_begin),
      (player_set_slot, ":player_id", slot_player_faction_id, "fac_commoners"),
      (store_random_in_range, ":starting_gold", 1, 50),
      (player_set_gold, ":player_id", ":starting_gold", max_correctly_displayed_gold),
    (try_end),
    (try_for_range, ":other_player_id", 1, ":max_players"),
      (neq, ":other_player_id", ":player_id"),
      (player_is_active, ":other_player_id"),
      (player_get_slot, ":other_faction_id", ":other_player_id", slot_player_faction_id),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_player_set_slot, ":other_player_id", slot_player_faction_id, ":other_faction_id"),
    (try_end),
    ]),

  ("agent_play_sound",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":sound_id", 2),

    (try_begin),
      (gt, ":agent_id", -1),
      (agent_is_active, ":agent_id"),
      (agent_get_position, pos60, ":agent_id"),
      (val_mul, ":sound_id", net_sound_multiplier),
      (lt, ":agent_id", net_sound_multiplier),
      (val_add, ":agent_id", ":sound_id"),
      (is_between, ":agent_id", 0, net_value_upper_bound),
      (try_for_agents, ":agent_2_id"),
        (agent_is_active, ":agent_2_id"),
        (agent_get_player_id, ":player_2_id", ":agent_2_id"),
        (player_is_active, ":player_2_id"),
        (agent_get_position, pos61, ":agent_2_id"),
        (get_distance_between_positions, ":distance", pos60, pos61),
        (le, ":distance", max_distance_to_play_sound),
        (multiplayer_send_int_to_player, ":player_2_id", server_event_agent_play_sound, ":agent_id"),
      (try_end),
    (try_end),
    ]),

  ("scene_prop_play_sound",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":sound_id", 2),

    (try_begin),
      (gt, ":instance_id", -1),
      (prop_instance_is_valid, ":instance_id"),
      (prop_instance_get_position, pos60, ":instance_id"),
      (val_mul, ":sound_id", net_sound_multiplier),
      (lt, ":instance_id", net_sound_multiplier),
      (val_add, ":instance_id", ":sound_id"),
      (is_between, ":instance_id", 0, net_value_upper_bound),
      (try_for_agents, ":agent_id"),
        (agent_is_active, ":agent_id"),
        (agent_get_player_id, ":player_id", ":agent_id"),
        (player_is_active, ":player_id"),
        (agent_get_position, pos61, ":agent_id"),
        (get_distance_between_positions, ":distance", pos60, pos61),
        (le, ":distance", max_distance_to_play_sound),
        (multiplayer_send_int_to_player, ":player_id", server_event_scene_prop_play_sound, ":instance_id"),
      (try_end),
    (try_end),
    ]),

  ("hit_scene_prop_play_sound",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":sound_id", 3),

    (agent_get_wielded_item, ":item_id", ":agent_id"),
    (try_begin),
      (gt, ":item_id", all_items_begin),
      (item_get_type, ":item_type", ":item_id"),
      (is_between, ":item_type", itp_type_bow, itp_type_thrown + 1),
      (call_script, "script_scene_prop_play_sound", ":instance_id", ":sound_id"),
    (else_try),
      (call_script, "script_agent_play_sound", ":agent_id", ":sound_id"),
    (try_end),
    ]),

  ("play_sound_at_position",
   [(store_script_param, ":sound_id", 1),

    (set_fixed_point_multiplier, 1),
    (position_get_x, ":pos_x", pos0),
    (position_get_y, ":pos_y", pos0),
    (position_get_z, ":pos_z", pos0),
    (set_fixed_point_multiplier, 100),
    (val_add, ":pos_z", net_pack_3_value_upper_bound / 2),
    (val_clamp, ":pos_x", 0, net_pack_3_value_upper_bound),
    (val_clamp, ":pos_y", 0, net_pack_3_value_upper_bound),
    (val_clamp, ":pos_z", 0, net_pack_3_value_upper_bound),
    (assign, ":packed_position", ":pos_x"),
    (val_mul, ":pos_y", net_pack_3_multiplier_2),
    (val_add, ":packed_position", ":pos_y"),
    (val_mul, ":pos_z", net_pack_3_multiplier_3),
    (val_add, ":packed_position", ":pos_z"),
    (try_for_agents, ":agent_id"),
      (agent_is_active, ":agent_id"),
      (agent_get_player_id, ":player_id", ":agent_id"),
      (player_is_active, ":player_id"),
      (agent_get_position, pos60, ":agent_id"),
      (get_distance_between_positions, ":distance", pos0, pos60),
      (le, ":distance", max_distance_to_play_sound),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_play_sound_at_position, ":sound_id", ":packed_position"),
    (try_end),
    ]),

  ("cf_check_enough_gold",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":gold_cost", 2),

    (player_get_gold, ":player_gold", ":player_id"),
    (try_begin),
      (lt, ":player_gold", ":gold_cost"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, "str_dont_have_enough_money", preset_message_error),
    (try_end),
    (ge, ":player_gold", ":gold_cost"),
    ]),

  ("deduct_gold",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":gold_cost", 2),

    (try_begin),
      (gt, ":gold_cost", 0),
      (player_get_gold, ":player_gold", ":player_id"),
      (val_sub, ":player_gold", ":gold_cost"),
      (player_set_gold, ":player_id", ":player_gold", max_correctly_displayed_gold),
      (player_get_agent_id, ":agent_id", ":player_id"),
      (call_script, "script_agent_play_sound", ":agent_id", "snd_money_paid"),
    (try_end),
    ]),

  ("reward_gold",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":gold_value", 2),

    (try_begin),
      (gt, ":gold_value", 0),
      (player_get_gold, ":player_gold", ":player_id"),
      (val_add, ":player_gold", ":gold_value"),
      (player_set_gold, ":player_id", ":player_gold", max_correctly_displayed_gold),
      (player_get_agent_id, ":agent_id", ":player_id"),
      (call_script, "script_agent_play_sound", ":agent_id", "snd_money_received"),
    (try_end),
    ]),

  ("scene_prop_get_gold_value",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":item_id", 2),
    (store_script_param, ":base_value_multiplier", 3),

    (scene_prop_get_slot, ":value", ":instance_id", slot_scene_prop_gold_value),
    (try_begin),
      (eq, ":value", 0),
      (try_begin),
        (gt, ":item_id", -1),
        (store_item_value, ":base_value", ":item_id"),
        (try_begin),
          (gt, ":base_value_multiplier", 0),
          (val_mul, ":base_value", ":base_value_multiplier"),
          (val_div, ":base_value", 100),
        (try_end),
      (else_try),
        (assign, ":base_value", ":base_value_multiplier"),
      (try_end),
      (gt, ":base_value", 0),
      (prop_instance_get_variation_id, ":multiplier_no", ":instance_id"),
      (val_div, ":multiplier_no", 10),
      (try_begin),
        (eq, ":multiplier_no", 0),
        (assign, ":value", ":base_value"),
        (assign, ":multiplier", 100),
      (else_try),
        (try_begin),
          (is_between, ":multiplier_no", 1, 5),
          (store_mul, ":multiplier", ":multiplier_no", 20),
        (else_try),
          (is_between, ":multiplier_no", 5, 10),
          (store_add, ":multiplier", ":multiplier_no", 1),
          (val_mul, ":multiplier", 20),
        (else_try),
          (eq, ":multiplier_no", 10),
          (assign, ":multiplier", 350),
        (else_try),
          (eq, ":multiplier_no", 11),
          (assign, ":multiplier", 500),
        (else_try),
          (eq, ":multiplier_no", 12),
          (assign, ":multiplier", 1000),
        (try_end),
        (store_mul, ":value", ":base_value", ":multiplier"),
        (val_div, ":value", 100),
        (val_max, ":value", 1),
      (try_end),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_gold_value, ":value"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_gold_multiplier, ":multiplier"),
    (else_try),
      (scene_prop_get_slot, ":multiplier", ":instance_id", slot_scene_prop_gold_multiplier),
    (try_end),
    (assign, reg0, ":value"),
    (assign, reg1, ":multiplier"),
    ]),

  ("setup_owner_faction_for_castles",
   [
    (assign, ":current_faction", castle_factions_begin),
    (try_for_range, ":current_castle_slot", slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
      (troop_set_slot, "trp_mission_data", ":current_castle_slot", ":current_faction"),
      (val_add, ":current_faction", 1),
      (try_begin),
        (eq, ":current_faction", factions_end),
        (assign, ":current_faction", castle_factions_begin),
      (try_end),
    (try_end),
    ]),

  ("scene_prop_get_owning_faction",
   [(store_script_param, ":instance_id", 1),

    (prop_instance_get_variation_id, ":scene_prop_owner_slot", ":instance_id"),
    (val_mod, ":scene_prop_owner_slot", 10),
    (try_begin),
      (ge, ":scene_prop_owner_slot", castle_factions_begin),
      (val_sub, ":scene_prop_owner_slot", castle_factions_begin),
      (val_clamp, ":scene_prop_owner_slot", slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
      (troop_get_slot, reg0, "trp_mission_data", ":scene_prop_owner_slot"),
      (assign, reg1, ":scene_prop_owner_slot"),
    (else_try),
      (assign, reg0, ":scene_prop_owner_slot"),
      (assign, reg1, -1),
    (try_end),
    (val_clamp, reg0, factions_begin, factions_end),
    ]),

  ("cf_can_change_faction",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":faction_id", 2),

    (player_get_slot, ":player_faction_id", ":player_id", slot_player_faction_id),
    (assign, reg0, ":player_faction_id"),
    (try_begin),
      (neq, ":player_faction_id", ":faction_id"),
      (neq, ":player_faction_id", "fac_commoners"),
      (neq, ":faction_id", "fac_commoners"),
      (assign, reg1, "str_must_leave_s1_first"),
    (else_try),
      (assign, reg1, 0),
    (try_end),
    (eq, reg1, 0),
    ]),

  ("change_faction",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":faction_id", 2),

    (try_begin),
      (neg|player_slot_eq, ":player_id", slot_player_faction_id, ":faction_id"),
      (player_set_slot, ":player_id", slot_player_faction_id, ":faction_id"),
      (get_max_players, ":num_players"),
      (try_for_range, ":other_player_id", 1, ":num_players"),
        (player_is_active, ":other_player_id"),
        (multiplayer_send_3_int_to_player, ":other_player_id", server_event_player_set_slot, ":player_id", slot_player_faction_id, ":faction_id"),
      (try_end),
    (try_end),
    ]),

  ("cf_change_faction",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (agent_is_alive, ":agent_id"),

    (assign, ":fail", 0),
    (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
    (assign, ":faction_id", reg0),
    (try_begin),
      (call_script, "script_cf_can_change_faction", ":player_id", ":faction_id"),
      (call_script, "script_change_faction", ":player_id", ":faction_id"),
    (else_try),
      (assign, ":fail", 1),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_preset_message, reg1, preset_message_faction|preset_message_fail_sound, reg0),
    (try_end),
    (eq, ":fail", 0),
    ]),

  ("cf_change_troop",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (agent_is_alive, ":agent_id"),
    (scene_prop_get_slot, ":gold_cost", ":instance_id", slot_scene_prop_gold_value),
    (call_script, "script_cf_check_enough_gold", ":player_id", ":gold_cost"),

    (call_script, "script_cf_change_faction", ":agent_id", ":instance_id"),

    (scene_prop_get_slot, ":troop_id", ":instance_id", slot_scene_prop_troop_id),
    (player_get_troop_id, ":player_troop_id", ":player_id"),
    (try_begin),
      (neq, ":player_troop_id", ":troop_id"),
      (call_script, "script_deduct_gold", ":player_id", ":gold_cost"),
      (call_script, "script_player_add_spawn_items", ":player_id", ":troop_id", 1),
      (agent_fade_out, ":agent_id"),
      (player_set_troop_id, ":player_id", ":troop_id"),
      (player_set_slot, ":player_id", slot_player_respawn_at_scene_prop, ":instance_id"),
      (player_spawn_new_agent, ":player_id", 0),
    (try_end),
    ]),

  ("cf_check_troop_can_equip_item",
   [(store_script_param, ":troop_id", 1),
    (store_script_param, ":item_id", 2),

    (item_get_type, ":item_type", ":item_id"),
    (try_begin),
      (eq, ":item_type", itp_type_arrows),
      (assign, ":difficulty", 1),
    (else_try),
      (item_get_slot, ":difficulty", ":item_id", slot_item_difficulty),
    (try_end),
    (assign, ":fail", 0),
    (try_begin),
      (gt, ":difficulty", 0),
      (try_begin),
        (this_or_next|eq, ":item_type", itp_type_bow),
        (eq, ":item_type", itp_type_arrows),
        (store_skill_level, ":troop_level", "skl_power_draw", ":troop_id"),
      (else_try),
        (eq, ":item_type", itp_type_thrown),
        (store_skill_level, ":troop_level", "skl_power_throw", ":troop_id"),
      (else_try),
        (eq, ":item_type", itp_type_shield),
        (assign, ":troop_level", 0), #disabled for multiplayer troops
      (else_try),
        (eq, ":item_type", itp_type_horse),
        (store_skill_level, ":troop_level", "skl_riding", ":troop_id"),
      (else_try),
        (store_attribute_level, ":troop_level", ":troop_id", ca_strength),
      (try_end),
      (lt, ":troop_level", ":difficulty"),
      (assign, ":fail", 1),
    (try_end),
    (eq, ":fail", 0),
    ]),

  ("cf_change_armor",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":item_id", 2),

    (agent_is_active, ":agent_id"),
    (assign, ":fail", 0),
    (agent_get_player_id, ":player_id", ":agent_id"),
    (try_begin),
      (player_is_active, ":player_id"),
      (player_get_troop_id, ":troop_id", ":player_id"),
      (try_begin),
        (call_script, "script_cf_check_troop_can_equip_item", ":troop_id", ":item_id"),
      (else_try),
        (assign, ":fail", 1),
        (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, "str_cant_equip_item", preset_message_error),
      (try_end),
      (eq, ":fail", 0),
      (item_get_type, ":item_type", ":item_id"),
      (store_sub, ":player_slot", ":item_type", itp_type_head_armor - ek_head),
      (player_set_slot, ":player_id", ":player_slot", ":item_id"),
    (else_try),
      (agent_is_non_player, ":agent_id"),
      (agent_is_alive, ":agent_id"),
    (else_try),
      (assign, ":fail", 1),
    (try_end),
    (eq, ":fail", 0),
    (call_script, "script_change_armor", ":agent_id", ":item_id"),
    ]),

  ("change_armor",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":item_id", 2),

    (agent_equip_item, ":agent_id", ":item_id"),
    (get_max_players, ":num_players"),
    (try_for_range, ":player_id", 1, ":num_players"),
      (player_is_active, ":player_id"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_agent_equip_armor, ":agent_id", ":item_id"),
    (try_end),
    ]),

  ("cf_buy_item",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (scene_prop_get_slot, ":item_id", ":instance_id", slot_scene_prop_item_id),
    (is_between, ":item_id", all_items_begin, all_items_end),
    (call_script, "script_scene_prop_get_gold_value", ":instance_id", ":item_id", 0),
    (assign, ":gold_value", reg0),
    (call_script, "script_cf_check_enough_gold", ":player_id", ":gold_value"),
    (assign, ":fail", 0),
    (item_get_type, ":item_type", ":item_id"),
    (try_begin),
      (is_between, ":item_type", itp_type_head_armor, itp_type_hand_armor + 1),
      (try_begin),
        (call_script, "script_cf_change_armor", ":agent_id", ":item_id"),
      (else_try),
        (assign, ":fail", 1),
      (try_end),
    (else_try),
      (set_spawn_position, pos1),
      (eq, ":item_type", itp_type_horse),
      (spawn_horse, ":item_id"),
    (else_try),
      (spawn_item, ":item_id", 0, seconds_before_removing_dropped_item),
      (prop_instance_set_position, reg0, pos1),
    (try_end),
    (eq, ":fail", 0),
    (call_script, "script_deduct_gold", ":player_id", ":gold_value"),
    ]),

  ("cf_sell_item",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (scene_prop_get_slot, ":item_id", ":instance_id", slot_scene_prop_item_id),
    (is_between, ":item_id", all_items_begin, all_items_end),
    (agent_has_item_equipped, ":agent_id", ":item_id"),
    (agent_unequip_item, ":agent_id", ":item_id"),
    (call_script, "script_scene_prop_get_gold_value", ":instance_id", ":item_id", 0),
    (store_mul, ":gold_value", reg0, sell_item_gold_multiplier),
    (val_div, ":gold_value", 100),
    (call_script, "script_reward_gold", ":player_id", ":gold_value"),
    ]),

  ("cf_gain_gold",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (scene_prop_get_slot, ":gold_value", ":instance_id", slot_scene_prop_gold_value),
    (call_script, "script_reward_gold", ":player_id", ":gold_value"),
    ]),

  ("cf_gain_health",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":heal_percent", 2),
    (store_script_param, ":heal_limit", 3),
    (store_script_param, ":heal_mount", 4),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),

    (assign, ":fail", 0),
    (try_begin),
      (try_begin),
        (eq, ":heal_mount", 1),
        (agent_get_horse, ":target_agent_id", ":agent_id"),
      (else_try),
        (assign, ":target_agent_id", ":agent_id"),
      (try_end),
      (neq, ":target_agent_id", -1),

      (store_agent_hit_points, ":health", ":target_agent_id", 0),
      (val_add, ":health", ":heal_percent"),
      (val_min, ":health", ":heal_limit"),
      (agent_set_hit_points, ":target_agent_id" , ":health", 0),

      (try_begin),
        (eq, ":heal_mount", 1),
        (call_script, "script_agent_play_sound", ":target_agent_id", "snd_horse_snort"),
      (else_try),
        (call_script, "script_agent_play_sound", ":target_agent_id", "snd_man_yawn"),
      (try_end),
    (else_try),
      (assign, ":fail", 1),
    (try_end),
    (eq, ":fail", 0),
    ]),

]
