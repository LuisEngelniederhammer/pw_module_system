# -*- coding: cp1254 -*-
from header_common import *
from header_operations import *
from module_constants import *
from module_constants import *
from header_parties import *
from header_skills import *
from header_mission_templates import *
from header_items import *
from header_triggers import *
from header_terrain_types import *
from header_music import *


####################################################################################################################
# scripts is a list of script records.
# Each script record contns the following two fields:
# 1) Script id: The prefix "script_" will be inserted when referencing scripts.
# 2) Operation block: This must be a valid operation block. See header_operations.py for reference.
####################################################################################################################

scripts = [
  ("game_start", []),

  ("game_get_use_string",
   [(store_script_param, ":instance_id", 1),

    (try_begin),
      (multiplayer_is_server),
      (get_player_agent_no, ":my_agent_id"),
    (else_try),
      (multiplayer_get_my_player, ":my_player_id"),
      (player_get_agent_id, ":my_agent_id", ":my_player_id"),
    (try_end),

    (scene_prop_get_slot, ":item_id", ":instance_id", slot_scene_prop_item_id),
    (scene_prop_get_slot, ":use_string", ":instance_id", slot_scene_prop_use_string),
    (try_begin),
      (is_between, ":item_id", all_items_begin, all_items_end),
      (call_script, "script_scene_prop_get_gold_value", ":instance_id", ":item_id", 0),
      (assign, ":gold_value", reg0),
      (assign, ":gold_multiplier", reg1),

      (try_begin),
        (gt, ":use_string", 0),
        (str_store_item_name, s1, ":item_id"),
        (assign, reg1, ":gold_value"),
        (str_store_string, s0, ":use_string"),
      (else_try),
        (str_store_string, s0, "str_buy"),
      (try_end),

      (agent_get_look_position, pos3, ":my_agent_id"),
      (position_get_screen_projection, pos4, pos3),
      (show_item_details, ":item_id", pos4, ":gold_multiplier"),

    (else_try),
      (scene_prop_get_slot, ":troop_id", ":instance_id", slot_scene_prop_troop_id),
      (is_between, ":troop_id", playable_troops_begin, playable_troops_end),
      (str_store_troop_name_plural, s1, ":troop_id"),
      (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
      (assign, ":faction_id", reg0),
      (str_store_faction_name, s2, ":faction_id"),
      (try_begin),
        (gt, ":use_string", 0),
        (str_store_string, s0, ":use_string"),
      (else_try),
        (str_store_string, s0, "str_troop_train"),
      (try_end),
      (multiplayer_get_my_player, ":player_id"),
      (try_begin),
        (call_script, "script_cf_can_change_faction", ":player_id", ":faction_id"),
      (else_try),
        (str_store_string, s0, "str_troop_not_available"),
      (try_end),
      (try_begin),
        (scene_prop_get_slot, ":gold_cost", ":instance_id", slot_scene_prop_gold_value),
        (gt, ":gold_cost", 0),
        (assign, reg10, ":gold_cost"),
        (str_store_string, s0, "str_troop_cost"),
      (try_end),
      (store_attribute_level, reg10, ":troop_id", ca_strength),
      (store_attribute_level, reg11, ":troop_id", ca_agility),
      (str_store_string, s0, "str_troop_strength_agility"),
      (call_script, "script_store_troop_skills_description", ":troop_id"),
      (store_proficiency_level, reg10, ":troop_id", wpt_one_handed_weapon),
      (store_proficiency_level, reg11, ":troop_id", wpt_two_handed_weapon),
      (store_proficiency_level, reg12, ":troop_id", wpt_polearm),
      (store_proficiency_level, reg13, ":troop_id", wpt_archery),
      (store_proficiency_level, reg14, ":troop_id", wpt_crossbow),
      (store_proficiency_level, reg15, ":troop_id", wpt_throwing),
      (str_store_string, s0, "str_troop_weapon_proficiencies"),

    (else_try),
      (this_or_next|eq, ":use_string", "str_winch_lower"),
      (eq, ":use_string", "str_winch_drop"),
      (call_script, "script_winch_get_direction", ":my_agent_id", ":instance_id"),
      (gt, reg0, 0),
      (str_store_string, s0, "str_winch_raise"),

    (else_try),
      (gt, ":use_string", 0),
      (scene_prop_get_slot, reg1, ":instance_id", slot_scene_prop_gold_value),
      (str_store_string, s0, ":use_string"),

    (else_try),
      (prop_instance_get_scene_prop_kind, ":scene_prop_id", ":instance_id"),

      (eq, ":scene_prop_id", "spr_pw_castle_sign"),
      (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
      (call_script, "script_str_store_castle_name", s0, reg1),
      (str_store_faction_name, s1, reg0),
      (str_store_string, s0, "str_s0__s1_"),

    (else_try),
      (eq, ":use_string", -1),
      (str_clear, s0),
    (else_try),
      (str_store_string, s0, "str_use"),
    (try_end),
    ]),

  ("store_troop_skills_description", []),
  ("initialize_item_slots", []),

  ("game_quick_start",
   [
    (store_random_in_range, "$g_profile_troop_body_item", "itm_linen_tunic", "itm_tribal_warrior_outfit"),
    (store_random_in_range, "$g_profile_troop_foot_item", "itm_hunter_boots", "itm_leather_boots"),
    (call_script, "script_initialize_troop_equipment_slots"),
    (call_script, "script_initialize_item_slots"),
    (call_script, "script_initialize_banner_info"),
    ]),

  ("game_set_multiplayer_mission_end", []),
  ("game_enable_cheat_menu", []),
  ("game_get_console_command", []),
  ("game_event_party_encounter", []),
  ("game_event_simulate_battle", []),
  ("game_event_battle_end", []),
  ("game_get_item_buy_price_factor", []),
  ("game_get_item_sell_price_factor", []),
  ("game_event_buy_item", []),
  ("game_event_sell_item", []),
  ("game_get_troop_wage", []),
  ("game_get_total_wage", []),
  ("game_get_join_cost", []),
  ("game_get_upgrade_xp", []),
  ("game_get_upgrade_cost", []),
  ("game_get_prisoner_price", []),
  ("game_check_prisoner_can_be_sold", []),
  ("game_get_morale_of_troops_from_faction", []),
  ("game_event_detect_party", []),
  ("game_event_undetect_party", []),
  ("game_get_statistics_line", []),
  ("game_get_date_text", []),
  ("game_get_money_text", []),
  ("game_get_party_companion_limit", []),
  ("game_reset_player_party_name", []),
  ("game_get_troop_note", []),
  ("game_get_center_note", []),
  ("game_get_faction_note", []),
  ("game_get_quest_note", []),
  ("game_get_info_page_note", []),

  ("game_get_scene_name",
   [(store_script_param, ":scene_no", 1),
    (try_begin),
      (is_between, ":scene_no", scenes_begin, scenes_end),
      (store_sub, ":string_id", ":scene_no", scenes_begin),
      (val_add, ":string_id", scene_names_begin),
      (str_store_string, s0, ":string_id"),
    (try_end),
    ]),

  ("game_get_mission_template_name",
   [(store_script_param, ":mission_template_no", 1),
    (try_begin),
      (is_between, ":mission_template_no", game_type_mission_templates_begin, game_type_mission_templates_end),
      (store_add, ":string_id", ":mission_template_no", game_type_names_begin),
      (str_store_string, s0, ":string_id"),
    (try_end),
    ]),

  ("game_receive_url_response", []),
  ("game_get_cheat_mode", []),

  ("game_receive_network_message",
   [(store_script_param, ":sender_player_id", 1),
    (store_script_param, ":event_type", 2),

    (try_begin),
      (neg|multiplayer_is_server),
      (try_begin),
        (eq, ":event_type", server_event_preset_message),
        (store_script_param, ":string_id", 3),
        (store_script_param, ":flags", 4),
        (store_script_param, ":value_1", 5),
        (store_script_param, ":value_2", 6),
        (call_script, "script_preset_message", ":string_id", ":flags", ":value_1", ":value_2"),
      (else_try),
        (eq, ":event_type", server_event_agent_play_sound),
        (store_script_param, ":agent_id", 3),
        (store_div, ":sound_id", ":agent_id", net_sound_multiplier),
        (val_and, ":agent_id", net_sound_mask),
        (try_begin),
          (is_between, ":sound_id", 0, "snd_sounds_end"),
          (try_begin),
            (eq, ":agent_id", net_sound_mask),
            (play_sound, ":sound_id"),
          (else_try),
            (agent_is_active, ":agent_id"),
            (agent_play_sound, ":agent_id", ":sound_id"),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_scene_prop_play_sound),
        (store_script_param, ":instance_id", 3),
        (store_div, ":sound_id", ":instance_id", net_sound_multiplier),
        (val_and, ":instance_id", net_sound_mask),
        (try_begin),
          (is_between, ":sound_id", 0, "snd_sounds_end"),
          (prop_instance_is_valid, ":instance_id"),
          (prop_instance_get_position, pos1, ":instance_id"),
          (play_sound_at_position, ":sound_id", pos1),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_play_sound_at_position),
        (store_script_param, ":sound_id", 3),
        (store_script_param, ":packed_position", 4),
        (try_begin),
          (is_between, ":sound_id", 0, "snd_sounds_end"),
          (assign, ":pos_x", ":packed_position"),
          (val_and, ":pos_x", net_pack_3_mask_1),
          (assign, ":pos_y", ":packed_position"),
          (val_and, ":pos_y", net_pack_3_mask_2),
          (val_div, ":pos_y", net_pack_3_multiplier_2),
          (assign, ":pos_z", ":packed_position"),
          (val_and, ":pos_z", net_pack_3_mask_3),
          (val_div, ":pos_z", net_pack_3_multiplier_3),
          (val_sub, ":pos_z", net_pack_3_value_upper_bound / 2),
          (set_fixed_point_multiplier, 1),
          (position_set_x, pos1, ":pos_x"),
          (position_set_y, pos1, ":pos_y"),
          (position_set_z, pos1, ":pos_z"),
          (set_fixed_point_multiplier, 100),
          (play_sound_at_position, ":sound_id", pos1),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_agent_equip_armor),
        (store_script_param, ":agent_id", 3),
        (store_script_param, ":item_id", 4),
        (try_begin),
          (agent_is_active, ":agent_id"),
          (agent_is_alive, ":agent_id"),
          (is_between, ":item_id", all_items_begin, all_items_end),
          (agent_equip_item, ":agent_id", ":item_id"),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_player_set_slot),
        (store_script_param, ":player_id", 3),
        (store_script_param, ":slot_no", 4),
        (store_script_param, ":value", 5),
        (try_begin),
          (player_is_active, ":player_id"),
          (player_set_slot, ":player_id", ":slot_no", ":value"),
          (multiplayer_get_my_player, ":my_player_id"),
          (try_begin),
            (eq, ":player_id", ":my_player_id"),
            (eq, ":slot_no", slot_player_faction_id),
            (call_script, "script_preset_message", "str_joined_the_s1", preset_message_faction|preset_message_log, ":value", 0),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_troop_set_slot),
        (store_script_param, ":troop_id", 3),
        (store_script_param, ":slot_no", 4),
        (store_script_param, ":value", 5),
        (troop_set_slot, ":troop_id", ":slot_no", ":value"),
        (try_begin),
          (eq, ":troop_id", "trp_mission_data"),
          (multiplayer_get_my_player, ":my_player_id"),
          (player_get_agent_id, ":my_agent_id", ":my_player_id"),
          (ge, ":my_agent_id", 0),
          (is_between, ":slot_no", slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
          (call_script, "script_preset_message", "str_s1_captured_s2", preset_message_faction_castle|preset_message_big|preset_message_log, ":value", ":slot_no"),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_set_attached_scene_prop),
        (store_script_param, ":agent_id", 3),
        (store_script_param, ":instance_id", 4),
        (try_begin),
          (agent_is_active, ":agent_id"),
          (agent_set_attached_scene_prop, ":agent_id", ":instance_id"),
          (try_begin),
            (gt, ":instance_id", -1),
            (scene_prop_get_slot, ":z_offset", ":instance_id", slot_scene_prop_position),
            (agent_set_attached_scene_prop_z, ":agent_id", ":z_offset"),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_chat_message_recieved),
        (store_script_param, ":chat_event", 3),
        (try_begin),
          (troop_slot_eq, "trp_last_chat_message", slot_last_chat_message_event, ":chat_event"),
          (troop_set_slot, "trp_last_chat_message", slot_last_chat_message_not_recieved, 0),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_local_chat),
        (neg|str_is_empty, s0),
        (display_message, s0, 0xFFFFDD8A),
      (else_try),
        (eq, ":event_type", server_event_local_chat_shout),
        (neg|str_is_empty, s0),
        (display_message, s0, 0xFFFF8C27),
      (try_end),

    (else_try),
      (multiplayer_is_server),
      (try_begin),
        (eq, ":event_type", client_event_detach_scene_prop),
        (player_get_agent_id, ":agent_id", ":sender_player_id"),
        (try_begin),
          (gt, ":agent_id", -1),
          (agent_is_alive, ":agent_id"),
          (agent_get_horse, ":horse_agent_id", ":agent_id"),
          (try_begin),
            (eq, ":horse_agent_id", -1),
            (assign, ":attach_agent_id", ":agent_id"),
          (else_try),
            (assign, ":attach_agent_id", ":horse_agent_id"),
          (try_end),
          (call_script, "script_cf_attach_cart", ":attach_agent_id", -1),
        (try_end),
      (else_try),
        (eq, ":event_type", client_event_control_scene_prop),
        (store_script_param, ":instance_id", 3),
        (store_script_param, ":forwards", 4),
        (store_script_param, ":rotation", 5),
        (try_begin),
          (prop_instance_is_valid, ":instance_id"),
          (call_script, "script_cf_control_ship", ":sender_player_id", ":instance_id", ":forwards", ":rotation"),
        (try_end),
      (else_try),
        (eq, ":event_type", client_event_chat_message_type),
        (store_script_param, ":chat_event", 3),
        (store_script_param, ":chat_event_type", 4),
        (try_begin),
          (player_is_active, ":sender_player_id"),
          (call_script, "script_cf_chat_event_is_new", ":chat_event", ":sender_player_id"),
          (player_set_slot, ":sender_player_id", slot_player_next_chat_event, ":chat_event"),
          (player_set_slot, ":sender_player_id", slot_player_next_chat_event_type, ":chat_event_type"),
        (try_end),
      (else_try),
        (is_between, ":event_type", client_event_chat_message_begin, client_event_chat_message_end),
        (try_begin),
          (player_is_active, ":sender_player_id"),
          (multiplayer_send_int_to_player, ":sender_player_id", server_event_chat_message_recieved, ":event_type"),
          (call_script, "script_cf_chat_event_is_new", ":event_type", ":sender_player_id"),
          (assign, ":type_valid", reg0),
          (player_get_slot, ":chat_event_type", ":sender_player_id", slot_player_next_chat_event_type),
          (player_set_slot, ":sender_player_id", slot_player_next_chat_event_type, 0),
          (neg|str_is_empty, s0),
          (try_begin),
            (this_or_next|eq, ":type_valid", 0),
            (is_between, ":chat_event_type", chat_event_type_local, chat_event_type_local_shout + 1),
            (player_get_agent_id, ":agent_id", ":sender_player_id"),
            (gt, ":agent_id", -1),
            (agent_is_alive, ":agent_id"),
            (str_store_player_username, s1, ":sender_player_id"),
            (str_store_string, s0, "str_chat_format"),
            (server_add_message_to_log, s0),
            (try_begin),
              (eq, ":type_valid", 1),
              (eq, ":chat_event_type", chat_event_type_local_shout),
              (assign, ":max_distance", max_distance_local_chat_shout),
              (assign, ":ambient_distance", ambient_distance_local_chat_shout),
              (assign, ":server_event", server_event_local_chat_shout),
            (else_try),
              (assign, ":max_distance", max_distance_local_chat),
              (assign, ":ambient_distance", ambient_distance_local_chat),
              (assign, ":server_event", server_event_local_chat),
            (try_end),
            (agent_get_position, pos1, ":agent_id"),
            (position_move_z, pos1, 160),
            (try_for_agents, ":other_agent_id"),
              (agent_is_alive, ":other_agent_id"),
              (neg|agent_is_non_player, ":other_agent_id"),
              (agent_get_player_id, ":other_player_id", ":other_agent_id"),
              (player_is_active, ":other_player_id"),
              (agent_get_position, pos2, ":other_agent_id"),
              (position_move_z, pos2, 160),
              (get_distance_between_positions, ":distance", pos1, pos2),
              (le, ":distance", ":max_distance"),
              (this_or_next|le, ":distance", ":ambient_distance"),
              (position_has_line_of_sight_to_position, pos1, pos2),
              (multiplayer_send_string_to_player, ":other_player_id", ":server_event", s0),
            (try_end),
          (try_end),
        (try_end),
      (try_end),
    (try_end),
    ]),

  ("game_get_multiplayer_server_option_for_mission_template", []),
  ("game_multiplayer_server_option_for_mission_template_to_string", []),
  ("game_multiplayer_event_duel_offered", []),

  ("game_get_multiplayer_game_type_enum",
   [(assign, reg0, game_type_mission_templates_begin),
    (store_sub, reg1, game_type_mission_templates_begin, game_type_mission_templates_end),
    ]),

  ("game_multiplayer_get_game_type_mission_template",
   [(store_script_param, ":game_type", 1),
    (try_begin),
      (is_between, ":game_type", game_type_mission_templates_begin, game_type_mission_templates_end),
      (assign, reg0, ":game_type"),
    (else_try),
      (assign, reg0, -1),
    (try_end),
    ]),

  ("game_get_party_prisoner_limit", []),

  ("game_get_item_extra_text",
   [(store_script_param, ":item_id", 1),
    (store_script_param, ":extra_text_id", 2),
    #(store_script_param, ":item_modifier", 3),

    (try_begin),
      (eq, ":extra_text_id", 0),
      (item_get_slot, reg1, ":item_id", slot_item_difficulty),
      (try_begin),
        (gt, reg1, 0),
        (try_begin),
          (multiplayer_is_server),
          (get_player_agent_no, ":agent_id"),
          (agent_get_troop_id, ":troop_id", ":agent_id"),
        (else_try),
          (multiplayer_get_my_player, ":my_player"),
          (player_get_troop_id, ":troop_id", ":my_player"),
        (try_end),
        (item_get_type, ":item_type", ":item_id"),
        (try_begin),
          (eq, ":item_type", itp_type_bow),
          (set_result_string, "str_requires_power_draw_reg1"),
          (store_skill_level, ":troop_level", "skl_power_draw", ":troop_id"),
        (else_try),
          (eq, ":item_type", itp_type_thrown),
          (set_result_string, "str_requires_power_throw_reg1"),
          (store_skill_level, ":troop_level", "skl_power_throw", ":troop_id"),
        (else_try),
          (eq, ":item_type", itp_type_shield),
          (set_result_string, "str_requires_shield_reg1"),
          (assign, ":troop_level", 0),
        (else_try),
          (eq, ":item_type", itp_type_horse),
          (set_result_string, "str_requires_riding_reg1"),
          (store_skill_level, ":troop_level", "skl_riding", ":troop_id"),
        (else_try),
          (set_result_string, "str_requires_strength_reg1"),
          (store_attribute_level, ":troop_level", ":troop_id", ca_strength),
        (try_end),
        (try_begin),
          (ge, ":troop_level", reg1),
          (set_trigger_result, 0xFF33DD11),
        (else_try),
          (set_trigger_result, 0xFFFF4422),
        (try_end),
      (try_end),
    (try_end),
    ]),

  ("game_on_disembark", []),
  ("game_context_menu_get_buttons", []),
  ("game_event_context_menu_button_clicked", []),
  ("game_get_skill_modifier_for_troop", []),
  ("game_check_party_sees_party", []),
  ("game_get_party_speed_multiplier", []),

  ("add_troop_to_cur_tableau_for_profile",
   [(store_script_param, ":troop_no",1),
    (set_fixed_point_multiplier, 100),

    (cur_tableau_clear_override_items),
    (cur_tableau_set_camera_parameters, 1, 4, 6, 10, 10000),

    (init_position, pos5),
    (assign, ":cam_height", 105),
    (assign, ":camera_distance", 380),
    (assign, ":camera_yaw", -15),
    (assign, ":camera_pitch", -18),
    (assign, ":animation", "anim_stand_man"),

    (position_set_z, pos5, ":cam_height"),
    (position_rotate_x, pos5, -90),
    (position_rotate_z, pos5, 180),
    (position_rotate_y, pos5, ":camera_yaw"),
    (position_rotate_x, pos5, ":camera_pitch"),
    (position_move_z, pos5, ":camera_distance", 0),
    (position_move_x, pos5, 5, 0),

    (profile_get_banner_id, ":profile_banner"),
    (try_begin),
      (ge, ":profile_banner", 0),
      (init_position, pos2),
      (val_add, ":profile_banner", banner_meshes_begin),
      (position_set_x, pos2, -175),
      (position_set_y, pos2, -300),
      (position_set_z, pos2, 180),
      (position_rotate_x, pos2, 90),
      (position_rotate_y, pos2, -15),
      (cur_tableau_add_mesh, ":profile_banner", pos2, 0, 0),
    (try_end),

    (troop_clear_inventory, ":troop_no"),
    (troop_add_item, ":troop_no", "$g_profile_troop_body_item"),
    (troop_add_item, ":troop_no", "$g_profile_troop_foot_item"),
    (troop_equip_items, ":troop_no"),

    (init_position, pos2),
    (try_begin),
      (troop_is_hero, ":troop_no"),
      (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
    (else_try),
      (store_mul, ":random_seed", ":troop_no", 126233),
      (val_mod, ":random_seed", 1000),
      (val_add, ":random_seed", 1),
      (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
    (try_end),
    (cur_tableau_set_camera_position, pos5),

    (copy_position, pos8, pos5),
    (position_rotate_x, pos8, -90),
    (position_rotate_z, pos8, 30),
    (position_rotate_x, pos8, -60),
    (cur_tableau_add_sun_light, pos8, 175,150,125),
    ]),

  ("preset_message",
   [(store_script_param, "$g_preset_message_string_id", 1),
    (store_script_param, ":flags", 2),
    (store_script_param, "$g_preset_message_value_1", 3),
    (store_script_param, "$g_preset_message_value_2", 4),

    (assign, ":color", ":flags"),
    (val_and, ":color", preset_message_color_mask),
    (try_begin),
      (eq, ":color", preset_message_white),
      (assign, "$g_preset_message_color", 0xFFFFFFFF),
    (else_try),
      (eq, ":color", preset_message_red),
      (assign, "$g_preset_message_color", 0xFFFF4422),
    (else_try),
      (eq, ":color", preset_message_green),
      (assign, "$g_preset_message_color", 0xFF33DD11),
    (else_try),
      (eq, ":color", preset_message_blue),
      (assign, "$g_preset_message_color", 0xFFFF4422),
    (else_try),
      (eq, ":color", preset_message_yellow),
      (assign, "$g_preset_message_color", 0xFFFFEE11),
    (try_end),

    (assign, "$g_preset_message_type", ":flags"),
    (val_and, "$g_preset_message_type", preset_message_type_mask),
    (try_begin),
      (eq, "$g_preset_message_type", preset_message_read_object),
      (start_presentation, "prsnt_read_object"),
    (else_try),
      (assign, "$g_preset_message_params", ":flags"),
      (val_and, "$g_preset_message_params", preset_message_params_mask),

      # keep the same as in prsnt_preset_message_* - unfortunately scripts and presentations are not run in order
      (try_begin),
        (eq, "$g_preset_message_params", preset_message_item),
        (is_between, "$g_preset_message_value_1", 1, all_items_end),
        (str_store_item_name, s1, "$g_preset_message_value_1"),
      (else_try),
        (eq, "$g_preset_message_params", preset_message_agent),
        (agent_is_active, "$g_preset_message_value_1"),
        (str_store_agent_name, s1, "$g_preset_message_value_1"),
      (else_try),
        (eq, "$g_preset_message_params", preset_message_player),
        (player_is_active, "$g_preset_message_value_1"),
        (str_store_player_username, s1, "$g_preset_message_value_1"),
      (else_try),
        (is_between, "$g_preset_message_params", preset_message_faction, preset_message_faction_castle + 1),
        (is_between, "$g_preset_message_value_1", factions_begin, factions_end),
        (str_store_faction_name, s1, "$g_preset_message_value_1"),
        (faction_get_color, "$g_preset_message_color", "$g_preset_message_value_1"),
        (eq, "$g_preset_message_params", preset_message_faction_castle),
        (call_script, "script_str_store_castle_name", s2, "$g_preset_message_value_2"),
      (else_try),
        (assign, reg1, "$g_preset_message_value_1"),
        (assign, reg2, "$g_preset_message_value_2"),
      (try_end),
      # end keep same

      (assign, ":log", ":flags"),
      (val_and, ":log", preset_message_log),
      (try_begin),
        (eq, ":log", preset_message_log),
        (display_message, "$g_preset_message_string_id", "$g_preset_message_color"),
      (try_end),

      (assign, ":fail_sound", ":flags"),
      (val_and, ":fail_sound", preset_message_fail_sound),
      (try_begin),
        (eq, ":fail_sound", preset_message_fail_sound),
        (play_sound, "snd_failure"),
      (try_end),

      (try_begin),
        (eq, "$g_preset_message_display_enabled", 0),
      (else_try),
        (eq, "$g_preset_message_type", preset_message_small),
        (start_presentation, "prsnt_preset_message_small"),
      (else_try),
        (eq, "$g_preset_message_type", preset_message_big),
        (start_presentation, "prsnt_preset_message_big"),
      (try_end),
    (try_end),
    ]),

  ("chat_event_increment",
   [(store_script_param, reg0, 1),

    (try_begin),
      (this_or_next|ge, reg0, client_event_chat_message_end - 1),
      (lt, reg0, client_event_chat_message_begin),
      (assign, reg0, client_event_chat_message_begin),
    (else_try),
      (val_add, reg0, 1),
    (try_end),
    ]),

  ("cf_chat_event_is_new",
   [(store_script_param, ":event", 1),
    (store_script_param, ":player_id", 2),

    (player_get_slot, ":next_event", ":player_id", slot_player_next_chat_event),
    (try_begin),
      (eq, ":event", ":next_event"),
      (assign, ":continue", 1),
      (assign, ":type_valid", 1),
    (else_try),
      (assign, ":type_valid", 0),
      (store_sub, ":event_difference", ":event", ":next_event"),
      (try_begin),
        (lt, ":event_difference", 0),
        (val_add, ":event_difference", client_event_chat_message_end - client_event_chat_message_begin),
      (try_end),
      (lt, ":event_difference", (client_event_chat_message_end - client_event_chat_message_begin) / 2),
      (assign, ":continue", 1),
    (else_try),
      (assign, ":continue", 0),
    (try_end),
    (eq, ":continue", 1),
    (call_script, "script_chat_event_increment", ":event"),
    (player_set_slot, ":player_id", slot_player_next_chat_event, reg0),
    (assign, reg0, ":type_valid"),
    ]),

  ("cf_no_input_presentation_active",
   [(neg|is_presentation_active, "prsnt_chat_box"),
    ]),

  ("initialize_banner_info",
   [
    (faction_set_slot, "fac_commoners", slot_faction_banner_mesh, "mesh_banner_kingdom_e"),
    (faction_set_slot, "fac_outlaws", slot_faction_banner_mesh, "mesh_banner_kingdom_c"),
    (faction_set_slot, "fac_1", slot_faction_banner_mesh, "mesh_banner_kingdom_f"),
    (faction_set_slot, "fac_2", slot_faction_banner_mesh, "mesh_banner_kingdom_b"),
    (faction_set_slot, "fac_3", slot_faction_banner_mesh, "mesh_banner_kingdom_a"),
    (faction_set_slot, "fac_4", slot_faction_banner_mesh, "mesh_banner_kingdom_d"),

    (troop_set_slot, "trp_banner_background_color_array", 0, 0xFFAAAA99),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a01", 0xFF8f4531),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a02", 0xFFd9d7d1),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a03", 0xFF373736),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a04", 0xFFa48b28),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a05", 0xFF497735),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a06", 0xFF82362d),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a07", 0xFF793329),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a08", 0xFF262521),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a09", 0xFFd9dad1),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a10", 0xFF524563),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a11", 0xFF91312c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a12", 0xFFafa231),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a13", 0xFF706d3c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a14", 0xFFd6d3ce),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a15", 0xFFd6d3ce),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a16", 0xFF394584),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a17", 0xFF42662e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a18", 0xFFdfded6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a19", 0xFF292724),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a20", 0xFF58611b),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a21", 0xFF313a67),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b01", 0xFF9c924a),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b02", 0xFF998b39),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b03", 0xFF365168),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b04", 0xFFd6d3ce),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b05", 0xFF94a642),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b06", 0xFF944131),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b07", 0xFF893b34),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b08", 0xFF425510),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b09", 0xFF94452e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b10", 0xFF475a94),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b11", 0xFFd1b231),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b12", 0xFFe1e2df),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b13", 0xFF997c1e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b14", 0xFFc6b74d),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b15", 0xFFad9a18),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b16", 0xFF212421),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b17", 0xFF8c2021),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b18", 0xFF4d7136),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b19", 0xFF395d84),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b20", 0xFF527539),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b21", 0xFF9c3c39),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c01", 0xFF42518c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c02", 0xFFa46a2c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c03", 0xFF9f5141),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c04", 0xFF2c6189),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c05", 0xFF556421),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c06", 0xFF9d621e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c07", 0xFFdeded6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c08", 0xFF6e4891),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c09", 0xFF865a29),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c10", 0xFFdedfd9),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c11", 0xFF524273),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c12", 0xFF8c3821),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c13", 0xFFd1cec6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c14", 0xFF313031),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c15", 0xFF47620d),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c16", 0xFF6b4139),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c17", 0xFFd6d7d6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c18", 0xFF2e2f2c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c19", 0xFF604283),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c20", 0xFF395584),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c21", 0xFF313031),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d01", 0xFF7e3f2e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d02", 0xFF343434),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d03", 0xFF3c496b),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d04", 0xFFd9d8d1),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d05", 0xFF99823c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d06", 0xFF9f822e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d07", 0xFF393839),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d08", 0xFFa54931),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d09", 0xFFdfdcd6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d10", 0xFF9f4a36),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d11", 0xFF8c7521),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d12", 0xFF9f4631),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d13", 0xFF793324),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d14", 0xFF395076),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d15", 0xFF2c2b2c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d16", 0xFF657121),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d17", 0xFF7e3121),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d18", 0xFF76512e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d19", 0xFFe7e3de),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d20", 0xFF947921),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d21", 0xFF4d7b7c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e01", 0xFF343331),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e02", 0xFFa74d36),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e03", 0xFFe7e3de),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e04", 0xFFd6d8ce),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e05", 0xFF3e4d67),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e06", 0xFF9f842e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e07", 0xFF4d6994),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e08", 0xFF4a6118),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e09", 0xFF943c29),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e10", 0xFF394479),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e11", 0xFF343331),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e12", 0xFF3f4d5d),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e13", 0xFF4a6489),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e14", 0xFF313031),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e15", 0xFFd6d7ce),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e16", 0xFFc69e00),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e17", 0xFF638e52),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e18", 0xFFdcdbd3),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e19", 0xFFdbdcd3),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e20", 0xFF843831),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e21", 0xFFcecfc6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f01", 0xFFc39d31),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f02", 0xFFcbb670),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f03", 0xFF394a18),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f04", 0xFF372708),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f05", 0xFF9a6810),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f06", 0xFFb27910),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f07", 0xFF8c8621),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f08", 0xFF975a03),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f09", 0xFF2c2924),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f10", 0xFFaa962c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f11", 0xFFa2822e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f12", 0xFF7b8a8c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f13", 0xFF3c0908),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f14", 0xFFFF00FF),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f15", 0xFF671e14),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f16", 0xFF103042),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f17", 0xFF4a4500),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f18", 0xFF703324),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f19", 0xFF24293c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f20", 0xFF5d6966),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f21", 0xFF521c08),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g01", 0xFFbd9631),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g02", 0xFFc6b26b),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g03", 0xFF394918),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g04", 0xFF372708),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g05", 0xFF9a6810),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g06", 0xFFb27910),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g07", 0xFF8c8621),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g08", 0xFF975a03),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g09", 0xFF2c2924),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g10", 0xFFaa962c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_a", 0xFF316184),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_b", 0xFFd6d3bd),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_c", 0xFF633039),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_d", 0xFF3f6c2e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_e", 0xFFc6a64a),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_f", 0xFF5a2421),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banners_default_a", 0xFF242424),
    ]),

  ("item_set_banner",
   [(store_script_param, ":tableau_id", 1),
    (store_script_param, ":agent_id", 2),
    #(store_script_param, ":troop_id", 3),

    (try_begin),
      (agent_is_active, ":agent_id"),
      (agent_get_player_id, ":player_id", ":agent_id"),
      (player_is_active, ":player_id"),
      (player_get_slot, ":player_faction_id", ":player_id", slot_player_faction_id),
      (ge, ":player_faction_id", castle_factions_begin),
      (faction_get_slot, ":banner_mesh", ":player_faction_id", slot_faction_banner_mesh),
      (gt, ":banner_mesh", 0),
    (else_try),
      (assign, ":banner_mesh", 0),
    (try_end),
    (cur_item_set_tableau_material, ":tableau_id", ":banner_mesh"),
    ]),

  ("cf_add_item_to_troop_equipment_slots",
   [(store_script_param, ":troop_id", 1),
    (store_script_param, ":item_id", 2),

    (item_get_type, ":item_type", ":item_id"),
    (try_begin),
      (eq, ":item_type", itp_type_one_handed_wpn),
      (assign, ":equipment_slot_begin", slot_troop_equipment_one_hand_begin),
    (else_try),
      (is_between, ":item_type", itp_type_two_handed_wpn, itp_type_polearm + 1),
      (assign, ":equipment_slot_begin", slot_troop_equipment_two_hand_begin),
    (else_try),
      (is_between, ":item_type", itp_type_bow, itp_type_thrown + 1),
      (assign, ":equipment_slot_begin", slot_troop_equipment_ranged_begin),
    (else_try),
      (is_between, ":item_type", itp_type_arrows, itp_type_bolts + 1),
      (assign, ":equipment_slot_begin", slot_troop_equipment_ammo_begin),
    (else_try),
      (eq, ":item_type", itp_type_shield),
      (assign, ":equipment_slot_begin", slot_troop_equipment_shield_begin),
    (else_try),
      (eq, ":item_type", itp_type_head_armor),
      (assign, ":equipment_slot_begin", slot_troop_equipment_head_begin),
    (else_try),
      (eq, ":item_type", itp_type_body_armor),
      (assign, ":equipment_slot_begin", slot_troop_equipment_body_begin),
    (else_try),
      (eq, ":item_type", itp_type_foot_armor),
      (assign, ":equipment_slot_begin", slot_troop_equipment_foot_begin),
    (else_try),
      (eq, ":item_type", itp_type_hand_armor),
      (assign, ":equipment_slot_begin", slot_troop_equipment_hand_begin),
    (else_try),
      (eq, ":item_type", itp_type_horse),
      (assign, ":equipment_slot_begin", slot_troop_equipment_horse_begin),
    (else_try),
      (assign, ":equipment_slot_begin", -1),
    (try_end),
    (neq, ":equipment_slot_begin", -1),

    (troop_get_slot, ":equipment_slot_count", ":troop_id", ":equipment_slot_begin"),
    (lt, ":equipment_slot_count", troop_slot_count_per_equipment_type - 1),
    (val_add, ":equipment_slot_count", 1),
    (troop_set_slot, ":troop_id", ":equipment_slot_begin", ":equipment_slot_count"),
    (val_add, ":equipment_slot_begin", ":equipment_slot_count"),
    (troop_set_slot, ":troop_id", ":equipment_slot_begin", ":item_id"),
    ]),

  ("initialize_troop_equipment_slots",
   [
    (try_begin),
      (multiplayer_is_server),
      (try_for_range, ":troop_id", playable_troops_begin, playable_troops_end),
        (troop_get_inventory_capacity, ":capacity", ":troop_id"),
        (try_for_range, ":inv_slot", 0, ":capacity"),
          (troop_get_inventory_slot, ":item_id", ":troop_id", ":inv_slot"),
          (gt, ":item_id", 0),
          (call_script, "script_cf_add_item_to_troop_equipment_slots", ":troop_id", ":item_id"),
        (try_end),
      (try_end),
    (try_end),
    ]),

  ("cf_troop_get_random_equipment",
   [(store_script_param, ":troop_id", 1),
    (store_script_param, ":slot_begin", 2),

    (troop_get_slot, ":item_count", ":troop_id", ":slot_begin"),
    (gt, ":item_count", 0),
    (val_add, ":slot_begin", 1),
    (store_add, ":slot_end", ":slot_begin", ":item_count"),
    (store_random_in_range, ":random_slot", ":slot_begin", ":slot_end"),
    (troop_get_slot, reg0, ":troop_id", ":random_slot"),
    ]),

  ("cf_player_add_default_troop_item",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":equip_slot", 2),
    (store_script_param, ":troop_id", 3),
    (store_script_param, ":troop_slot", 4),

    (store_add, ":player_slot", ":equip_slot", slot_player_equip_item_0),
    (player_get_slot, ":existing_item_id", ":player_id", ":player_slot"),
    (lt, ":existing_item_id", all_items_begin),
    (call_script, "script_cf_troop_get_random_equipment", ":troop_id", ":troop_slot"),
    (val_mul, reg0, -1),
    (player_set_slot, ":player_id", ":player_slot", reg0),
    ]),

  ("player_add_default_troop_items",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":troop_id", 2),

    (assign, ":free_slots", 0),
    (assign, ":free_slots_begin", slot_player_equip_end),
    (try_for_range, ":player_slot", slot_player_equip_item_0, slot_player_equip_head),
      (player_get_slot, ":existing_item_id", ":player_id", ":player_slot"),
      (lt, ":existing_item_id", all_items_begin),
      (val_min, ":free_slots_begin", ":player_slot"),
      (val_add, ":free_slots", 1),
    (try_end),
    (assign, ":ranged_count", 0),
    (try_begin),
      (ge, ":free_slots", 2),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_ranged_begin),
      (assign, ":ranged_item_id", reg0),
      (item_get_type, ":ranged_item_type", ":ranged_item_id"),
      (try_begin),
        (eq, ":ranged_item_type", itp_type_thrown),
        (assign, ":ranged_count", 1),
      (else_try),
        (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_ammo_begin),
        (assign, ":ammo_item_id", reg0),
        (val_sub, ":ranged_item_type", itp_type_bow - itp_type_arrows),
        (assign, ":ammo_slot_end", slot_troop_equipment_ammo_begin + troop_slot_count_per_equipment_type + 1),
        (try_for_range, ":ammo_slot", slot_troop_equipment_ammo_begin + 1, ":ammo_slot_end"),
          (item_get_type, ":ammo_item_type", ":ammo_item_id"),
          (try_begin),
            (eq, ":ammo_item_type", ":ranged_item_type"),
            (assign, ":ammo_slot_end", -1),
          (else_try),
            (troop_get_slot, ":ammo_item_id", ":troop_id", ":ammo_slot"),
          (try_end),
        (try_end),
        (try_begin),
          (eq, ":ammo_slot_end", -1),
          (assign, ":ranged_count", 2),
        (try_end),
      (try_end),
    (try_end),
    (store_sub, ":free_melee_slots", ":free_slots", ":ranged_count"),
    (assign, ":one_hand_added", 0),
    (assign, ":shield_added", 0),
    (assign, ":two_hand_added", 0),
    (assign, ":two_hand_item_id", 0),
    (assign, ":ranged_added", 0),
    (assign, ":ammo_added", 0),
    (try_for_range, ":slot_counter", 0, ":free_slots"),
      (try_begin),
        (lt, ":slot_counter", ":free_melee_slots"),
        (eq, ":one_hand_added", 0),
        (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_one_hand_begin),
        (val_add, ":one_hand_added", 1),
      (else_try),
        (lt, ":slot_counter", ":free_melee_slots"),
        (eq, ":shield_added", 0),
        (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_shield_begin),
        (val_add, ":shield_added", 1),
      (else_try),
        (lt, ":slot_counter", ":free_melee_slots"),
        (le, ":two_hand_added", 1),
        (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_two_hand_begin),
        (neq, reg0, ":two_hand_item_id"),
        (val_add, ":two_hand_added", 1),
        (assign, ":two_hand_item_id", reg0),
      (else_try),
        (ge, ":ranged_count", 1),
        (eq, ":ranged_added", 0),
        (assign, reg0, ":ranged_item_id"),
        (val_add, ":ranged_added", 1),
      (else_try),
        (ge, ":ranged_count", 2),
        (eq, ":ammo_added", 0),
        (assign, reg0, ":ammo_item_id"),
        (val_add, ":ammo_added", 1),
      (else_try),
        (assign, ":free_slots", -1),
      (try_end),
      (gt, ":free_slots", -1),
      (val_mul, reg0, -1),
      (player_set_slot, ":player_id", ":free_slots_begin", reg0),
      (val_add, ":free_slots_begin", 1),
      (assign, ":free_slots_end", slot_player_equip_head),
      (try_for_range, ":next_free_slot", ":free_slots_begin", ":free_slots_end"),
        (player_get_slot, ":existing_item_id", ":player_id", ":next_free_slot"),
        (lt, ":existing_item_id", all_items_begin),
        (assign, ":free_slots_begin", ":next_free_slot"),
        (assign, ":free_slots_end", -1),
      (try_end),
      (try_begin),
        (neq, ":free_slots_end", -1),
        (assign, ":free_slots", -1),
      (try_end),
    (try_end),
    (try_begin),
      (call_script, "script_cf_player_add_default_troop_item", ":player_id", ek_horse, ":troop_id", slot_troop_equipment_horse_begin),
    (try_end),
    ]),

  ("player_add_default_troop_armor",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":troop_id", 2),

    (assign, ":troop_slot", slot_troop_equipment_head_begin),
    (assign, ":player_slot", slot_player_equip_head),
    (try_for_range, ":equip_slot", ek_head, ek_gloves + 1),
      (try_begin),
        (call_script, "script_cf_player_add_default_troop_item", ":player_id", ":equip_slot", ":troop_id", ":troop_slot"),
      (try_end),
      (val_add, ":troop_slot", troop_slot_count_per_equipment_type),
      (val_add, ":player_slot", 1),
    (try_end),
    ]),

  ("set_random_spawn_position",
   [(store_script_param, ":range", 1),

    (store_mul, ":negative_range", ":range", -1),
    (init_position, pos10),
    (position_copy_origin, pos10, pos1),
    (store_random_in_range, ":offset", ":negative_range", ":range"),
    (position_move_x, pos10, ":offset"),
    (store_random_in_range, ":offset", ":negative_range", ":range"),
    (position_move_y, pos10, ":offset"),
    (store_random_in_range, ":offset", 0, 360),
    (position_rotate_z, pos10, ":offset"),
    (position_set_z_to_ground_level, pos10),
    (set_spawn_position, pos10),
    ]),

  ("player_add_equipped_items",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":troop_id", 2),

    (player_get_agent_id, ":agent_id", ":player_id"),
    (try_begin),
      (agent_is_alive, ":agent_id"),
      (agent_get_position, pos1, ":agent_id"),
      (assign, ":player_slot", slot_player_equip_item_0),
      (try_for_range, ":equip_slot", ek_item_0, ek_item_3 + 1),
        (assign, ":store_item_id", 0),
        (agent_get_item_slot, ":item_id", ":agent_id", ":equip_slot"),
        (try_begin),
          (ge, ":item_id", all_items_begin),
          (try_begin),
            (call_script, "script_cf_check_troop_can_equip_item", ":troop_id", ":item_id"),
            (assign, ":store_item_id", ":item_id"),
          (else_try),
            (call_script, "script_set_random_spawn_position", 50),
            (spawn_item, ":item_id", 0, seconds_before_removing_dropped_item),
          (try_end),
        (try_end),
        (player_set_slot, ":player_id", ":player_slot", ":store_item_id"),
        (val_add, ":player_slot", 1),
      (try_end),
      (try_begin),
        (agent_get_horse, ":horse_agent_id", ":agent_id"),
        (gt, ":horse_agent_id", -1),
        (agent_get_item_id, ":horse_item_id", ":horse_agent_id"),
        (store_agent_hit_points, ":hit_points", ":horse_agent_id", 1),
        (init_position, pos2),
        (position_move_x, pos2, 50),
        (position_transform_position_to_parent, pos3, pos1, pos2),
        (position_set_z_to_ground_level, pos3),
        (set_spawn_position, pos3),
        (spawn_horse, ":horse_item_id"),
        (agent_set_hit_points, reg0, ":hit_points", 1),
      (try_end),
      (assign, ":player_slot", slot_player_equip_head),
      (try_for_range, ":equip_slot", ek_head, ek_gloves + 1),
        (player_get_slot, ":item_id", ":player_id", ":player_slot"),
        (try_begin),
          (ge, ":item_id", all_items_begin),
          (try_begin),
            (call_script, "script_cf_check_troop_can_equip_item", ":troop_id", ":item_id"),
          (else_try),
            (player_set_slot, ":player_id", ":player_slot", 0),
          (try_end),
        (try_end),
        (val_add, ":player_slot", 1),
      (try_end),
    (try_end),
    (call_script, "script_player_add_default_troop_items", ":player_id", ":troop_id"),
    (call_script, "script_player_add_default_troop_armor", ":player_id", ":troop_id"),
    ]),

  ("player_add_spawn_items",
   [(store_script_param, ":player_id", 1),

    (assign, ":player_slot", slot_player_equip_item_0),
    (try_for_range, ":equip_slot", ek_item_0, ek_horse + 1),
      (player_get_slot, ":item_id", ":player_id", ":player_slot"),
      (val_abs, ":item_id"),
      (try_begin),
        (ge, ":item_id", all_items_begin),
        (player_add_spawn_item, ":player_id", ":equip_slot", ":item_id"),
      (try_end),
      (val_add, ":player_slot", 1),
    (try_end),
    ]),

  ("player_equip_stored_default_items",
   [(store_script_param, ":player_id", 1),

    (player_get_agent_id, ":agent_id", ":player_id"),
    (try_begin),
      (agent_is_alive, ":agent_id"),
      (try_for_range, ":player_slot", slot_player_equip_item_0, slot_player_equip_item_3 + 1),
        (player_get_slot, ":item_id", ":player_id", ":player_slot"),
        (lt, ":item_id", 0),
        (val_abs, ":item_id"),
        (agent_equip_item, ":agent_id", ":item_id"),
      (try_end),
    (try_end),
    ]),

  ("player_get_spawn_point",
   [(store_script_param, ":player_id", 1),

    (player_get_slot, ":faction_id", ":player_id", slot_player_faction_id),
    (try_begin),
      (is_between, ":faction_id", castle_factions_begin, factions_end),
      (assign, ":owned_castles", 0),
      (assign, ":temp_slot", 0),
      (try_for_range, ":castle_no", slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
        (troop_get_slot, ":owner_faction", "trp_mission_data", ":castle_no"),
        (eq, ":owner_faction", ":faction_id"),
        (troop_set_slot, "trp_temp_array", ":temp_slot", ":castle_no"),
        (val_add, ":owned_castles", 1),
        (val_add, ":temp_slot", 1),
      (try_end),
      (gt, ":owned_castles", 0),
      (store_random_in_range, ":random_slot", 0, ":owned_castles"),
      (troop_get_slot, ":entry_point_begin", "trp_temp_array", ":random_slot"),
      (val_add, ":entry_point_begin", castle_factions_begin),
      (val_mul, ":entry_point_begin", 10),
    (else_try),
      (is_between, ":faction_id", factions_begin, castle_factions_begin),
      (store_mul, ":entry_point_begin", ":faction_id", 10),
    (else_try),
      (assign, ":entry_point_begin", 0),
    (try_end),
    (store_add, ":entry_point_end", ":entry_point_begin", 5),
    (store_random_in_range, reg0, ":entry_point_begin", ":entry_point_end"),
    ]),

  ("player_respawn_in_place",
   [(store_script_param, ":player_id", 1),

    (player_get_agent_id, ":agent_id", ":player_id"),
    (store_agent_hit_points, ":hit_points", ":agent_id", 1),
    (player_set_slot, ":player_id", slot_player_spawn_hit_points, ":hit_points"),
    (agent_get_position, pos1, ":agent_id"),
    (try_begin),
      (ge, ":player_id", "$g_spawn_marker_count"),
      (assign, ":start_count", "$g_spawn_marker_count"),
      (server_get_max_num_players, "$g_spawn_marker_count"),
      (val_add, "$g_spawn_marker_count", 1),
      (try_begin),
        (ge, ":player_id", "$g_spawn_marker_count"),
        (store_add, "$g_spawn_marker_count", ":player_id", 1),
      (try_end),
      (set_spawn_position, pos1),
      (try_for_range, ":unused", ":start_count", "$g_spawn_marker_count"),
        (spawn_scene_prop, "spr_spawn_marker"),
      (try_end),
    (try_end),
    (try_begin),
      (scene_prop_get_instance, ":instance_id", "spr_spawn_marker", ":player_id"),
      (prop_instance_set_position, ":instance_id", pos1, 1),
    (try_end),
    (player_set_slot, ":player_id", slot_player_spawn_state, player_spawn_state_at_marker),
    (agent_fade_out, ":agent_id"),
    (call_script, "script_player_get_spawn_point", ":player_id"),
    (player_spawn_new_agent, ":player_id", reg0),
    ]),

  ("player_set_faction_team",
   [(store_script_param, ":player_id", 1),

    (player_get_agent_id, ":agent_id", ":player_id"),
    (player_get_slot, ":faction_id", ":player_id", slot_player_faction_id),
    (try_begin),
      (is_between, ":faction_id", castle_factions_begin, factions_end),
      (store_sub, ":faction_team", ":faction_id", castle_factions_begin),
      (val_add, ":faction_team", team_faction_1),
      (agent_set_team, ":agent_id", ":faction_team"),
    (else_try),
      (agent_set_team, ":agent_id", team_default),
    (try_end),
    ]),

  ("player_check_spawn_agent",
   [(store_script_param, ":player_id", 1),

    (try_begin),
      (player_is_active, ":player_id"),
      (player_get_agent_id, ":agent_id", ":player_id"),
      (player_get_slot, ":spawn_state", ":player_id", slot_player_spawn_state),
      (try_begin),
        (eq, ":spawn_state", player_spawn_state_dead),
        (assign, ":spawn", 0),
        (try_begin),
          (le, ":agent_id", -1),
          (assign, ":spawn", 1),
        (else_try),
          (agent_is_alive, ":agent_id"),
          (player_set_slot, ":player_id", slot_player_spawn_state, player_spawn_state_alive),
        (else_try),
          (assign, ":spawn", 1),
        (try_end),
        (try_begin),
          (eq, ":spawn", 1),
          (neg|player_is_busy_with_menus, ":player_id"),
          (player_get_troop_id, ":troop_id", ":player_id"),
          (call_script, "script_player_add_default_troop_armor", ":player_id", ":troop_id"),
          (call_script, "script_player_add_spawn_items", ":player_id"),
          (call_script, "script_player_get_spawn_point", ":player_id"),
          (player_set_slot, ":player_id", slot_player_spawn_entry_point, reg0),
          (player_spawn_new_agent, ":player_id", reg0),
          (player_set_slot, ":player_id", slot_player_spawn_state, player_spawn_state_invulnerable),
          (store_mission_timer_a, ":spawn_time"),
          (player_set_slot, ":player_id", slot_player_spawn_invulnerable_time, ":spawn_time"),
        (try_end),
      (else_try),
        (eq, ":spawn_state", player_spawn_state_invulnerable),
        (gt, ":agent_id", -1),
        (agent_is_alive, ":agent_id"),
        (player_get_slot, ":spawn_invulnerable_time", ":player_id", slot_player_spawn_invulnerable_time),
        (store_mission_timer_a, ":current_time"),
        (val_sub, ":current_time", ":spawn_invulnerable_time"),
        (try_begin),
          (ge, ":current_time", spawn_invulnerable_time),
          (player_set_slot, ":player_id", slot_player_spawn_state, player_spawn_state_alive),
          (player_set_slot, ":player_id", slot_player_spawn_invulnerable_time, 0),
          (player_get_troop_id, ":troop_id", ":player_id"),
          (call_script, "script_player_set_faction_team", ":player_id"),
          (call_script, "script_player_add_default_troop_items", ":player_id", ":troop_id"),
          (call_script, "script_player_equip_stored_default_items", ":player_id"),
        (try_end),
      (try_end),
    (try_end),
    ]),

  ("on_agent_spawned",
   [(store_script_param, ":agent_id", 1),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (try_begin),
      (player_is_active, ":player_id"),
      (player_get_slot, ":spawn_state", ":player_id", slot_player_spawn_state),
      (try_begin),
        (eq, ":spawn_state", player_spawn_state_invulnerable),
        (agent_set_team, ":agent_id", team_spawn_invulnerable),
      (else_try),
        (player_set_slot, ":player_id", slot_player_spawn_state, player_spawn_state_alive),
        (eq, ":spawn_state", player_spawn_state_at_marker),
        (scene_prop_get_instance, ":instance_id", "spr_spawn_marker", ":player_id"),
        (prop_instance_get_position, pos1, ":instance_id"),
        (agent_set_position, ":agent_id", pos1),
        (player_get_slot, ":spawn_hit_points", ":player_id", slot_player_spawn_hit_points),
        (try_begin),
          (gt, ":spawn_hit_points", 0),
          (agent_set_hit_points, ":agent_id", ":spawn_hit_points", 1),
          (player_set_slot, ":player_id", slot_player_spawn_hit_points, 0),
        (try_end),
      (try_end),
      (try_begin),
        (neq, ":spawn_state", player_spawn_state_invulnerable),
        (call_script, "script_player_set_faction_team", ":player_id"),
      (try_end),
    (try_end),
    ]),

  ("setup_agent_for_respawn",
   [(store_script_param, ":agent_id", 1),

    (try_begin),
      (gt, ":agent_id", -1),
      (agent_get_player_id, ":player_id", ":agent_id"),
      (player_is_active, ":player_id"),
      (try_for_range, ":player_equip_slot", slot_player_equip_item_0, slot_player_equip_end),
        (player_set_slot, ":player_id", ":player_equip_slot", 0),
      (try_end),
      (agent_get_position, pos1, ":agent_id"),
      (agent_get_wielded_item, ":weapon_item_id", ":agent_id", 0),
      (agent_get_wielded_item, ":shield_item_id", ":agent_id", 1),
      (position_get_z, ":height", pos1),
      (try_for_range, ":equip_slot", ek_item_0, ek_item_3 + 1),
        (agent_get_item_slot, ":item_id", ":agent_id", ":equip_slot"),
        (ge, ":item_id", all_items_begin),
        (this_or_next|lt, ":height", -100),
        (neq, ":item_id", ":weapon_item_id"),
        (this_or_next|lt, ":height", -100),
        (neq, ":item_id", ":shield_item_id"),
        (call_script, "script_set_random_spawn_position", 50),
        (spawn_item, ":item_id", 0, seconds_before_removing_dropped_item),
      (try_end),
      (call_script, "script_player_check_stored_values", ":player_id"),
      (player_set_slot, ":player_id", slot_player_spawn_state, player_spawn_state_dead),
    (try_end),
    ]),

  ("array_copy_range",
   [(store_script_param, ":from_array_troop_id", 1),
    (store_script_param, ":from_array_index", 2),
    (store_script_param, ":to_array_troop_id", 3),
    (store_script_param, ":to_array_index", 4),
    (store_script_param, ":count", 5),

    (try_for_range, ":unused", 0, ":count"),
      (troop_get_slot, ":value", ":from_array_troop_id", ":from_array_index"),
      (troop_set_slot, ":to_array_troop_id", ":to_array_index", ":value"),
      (val_add, ":from_array_index", 1),
      (val_add, ":to_array_index", 1),
    (try_end),
    ]),

  ("copy_player_values_to_inactive",
   [(store_script_param, ":active_index", 1),

    (troop_get_slot, ":inactive_array_size", "trp_inactive_players_array", slot_player_array_size),
    (troop_get_slot, ":active_unique_id", "trp_active_players_array", ":active_index"),
    (assign, ":loop_end", ":inactive_array_size"),
    (assign, ":inactive_index", slot_player_array_begin),
    (try_for_range, ":unused", 0, ":loop_end"),
      (try_begin),
        (this_or_next|troop_slot_eq, "trp_inactive_players_array", ":inactive_index", 0),
        (troop_slot_eq, "trp_inactive_players_array", ":inactive_index", ":active_unique_id"),
        (assign, ":loop_end", -1),
      (else_try),
        (val_add, ":inactive_index", player_array_entry_size),
      (try_end),
    (try_end),
    (try_begin),
      (neq, ":loop_end", -1),
      (val_add, ":inactive_array_size", 1),
      (troop_set_slot, "trp_inactive_players_array", slot_player_array_size, ":inactive_array_size"),
    (try_end),
    (call_script, "script_array_copy_range", "trp_active_players_array", ":active_index", "trp_inactive_players_array", ":inactive_index", player_array_entry_size),
    ]),

  ("player_check_stored_values",
   [(store_script_param, ":player_id", 1),

    (store_mul, ":player_index", ":player_id", player_array_entry_size),
    (troop_get_slot, ":stored_unique_id", "trp_active_players_array", ":player_index"),
    (try_begin),
      (player_is_active, ":player_id"),
      (player_get_unique_id, ":player_unique_id", ":player_id"),
      (try_begin),
        (neq, ":player_unique_id", ":stored_unique_id"),
        (try_begin),
          (neq, ":stored_unique_id", 0),
          (call_script, "script_copy_player_values_to_inactive", ":player_index"),
        (try_end),
        (troop_set_slot, "trp_active_players_array", ":player_index", ":player_unique_id"),
      (try_end),
      (player_get_troop_id, ":troop_id", ":player_id"),
      (store_add, ":temp_index", ":player_index", player_array_troop_id),
      (troop_set_slot, "trp_active_players_array", ":temp_index", ":troop_id"),
      (player_get_slot, ":faction_id", ":player_id", slot_player_faction_id),
      (store_add, ":temp_index", ":player_index", player_array_faction_id),
      (troop_set_slot, "trp_active_players_array", ":temp_index", ":faction_id"),
      (player_get_gold, ":gold_value", ":player_id"),
      (store_add, ":temp_index", ":player_index", player_array_gold_value),
      (troop_set_slot, "trp_active_players_array", ":temp_index", ":gold_value"),
    (else_try),
      (neq, ":stored_unique_id", 0),
      (call_script, "script_copy_player_values_to_inactive", ":player_index"),
      (troop_set_slot, "trp_active_players_array", ":player_index", 0),
    (try_end),
    ]),

  ("setup_player_joined",
   [(store_script_param, ":player_id", 1),

    (player_set_team_no, ":player_id", team_default),
    (player_set_slot, ":player_id", slot_player_next_chat_event, client_event_chat_message_begin),

    (assign, ":found", 0),
    (player_get_unique_id, ":player_unique_id", ":player_id"),
    (store_mul, ":active_index", ":player_id", player_array_entry_size),
    (troop_get_slot, ":inactive_array_size", "trp_inactive_players_array", slot_player_array_size),
    (try_begin),
      (gt, ":inactive_array_size", 0),
      (store_sub, ":inactive_last_entry_number", ":inactive_array_size", 1),
      (store_mul, ":inactive_index", ":inactive_last_entry_number", player_array_entry_size),
      (val_add, ":inactive_index", slot_player_array_begin),
      (assign, ":loop_condition", ":inactive_array_size"),
      (try_for_range, ":unused", 0, ":loop_condition"),
        (troop_get_slot, ":inactive_unique_id", "trp_inactive_players_array", ":inactive_index"),
        (try_begin),
          (neq, ":inactive_unique_id", ":player_unique_id"),
          (val_sub, ":inactive_index", player_array_entry_size),
        (else_try),
          (call_script, "script_array_copy_range", "trp_inactive_players_array", ":inactive_index", "trp_active_players_array", ":active_index", player_array_entry_size),
          (troop_set_slot, "trp_inactive_players_array", ":inactive_index", 0),
          (assign, ":loop_condition", 0),
          (assign, ":found", 1),
        (try_end),
      (try_end),
      (try_begin),
        (eq, ":found", 0),
        (get_max_players, ":loop_condition"),
        (try_for_range, ":unchecked_player_id", 1, ":loop_condition"),
          (neg|player_is_active, ":unchecked_player_id"),
          (store_mul, ":unchecked_player_index", ":unchecked_player_id", player_array_entry_size),
          (troop_get_slot, ":unchecked_unique_id", "trp_active_players_array", ":unchecked_player_index"),
          (eq, ":unchecked_unique_id", ":player_unique_id"),
          (call_script, "script_array_copy_range", "trp_active_players_array", ":unchecked_player_index", "trp_active_players_array", ":active_index", player_array_entry_size),
          (troop_set_slot, "trp_active_players_array", ":unchecked_player_index", 0),
          (assign, ":loop_condition", 0),
          (assign, ":found", 1),
        (try_end),
      (try_end),
    (try_end),
    (try_for_range, ":castle_owner_slot", slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
      (troop_get_slot, ":castle_owner", "trp_mission_data", ":castle_owner_slot"),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_troop_set_slot, "trp_mission_data", ":castle_owner_slot", ":castle_owner"),
    (try_end),
    (get_max_players, ":max_players"),
    (try_begin),
      (eq, ":found", 1),
      (store_add, ":temp_index", ":active_index", player_array_troop_id),
      (troop_get_slot, ":troop_id", "trp_active_players_array", ":temp_index"),
      (player_set_troop_id, ":player_id", ":troop_id"),
      (store_add, ":temp_index", ":active_index", player_array_faction_id),
      (troop_get_slot, ":faction_id", "trp_active_players_array", ":temp_index"),
      (player_set_slot, ":player_id", slot_player_faction_id, ":faction_id"),
      (store_add, ":temp_index", ":active_index", player_array_gold_value),
      (troop_get_slot, ":gold_value", "trp_active_players_array", ":temp_index"),
      (store_random_in_range, ":keep_percentage", 50, 80),
      (val_mul, ":gold_value", ":keep_percentage"),
      (val_div, ":gold_value", 100),
      (player_set_gold, ":player_id", ":gold_value", max_correctly_displayed_gold),
      (try_begin),
        (neq, ":faction_id", 0),
        (try_for_range, ":other_player_id", 1, ":max_players"),
          (player_is_active, ":other_player_id"),
          (multiplayer_send_3_int_to_player, ":other_player_id", server_event_player_set_slot, ":player_id", slot_player_faction_id, ":faction_id"),
        (try_end),
      (try_end),
    (else_try),
      (player_set_troop_id, ":player_id", playable_troops_begin),
      (player_set_slot, ":player_id", slot_player_faction_id, "fac_commoners"),
      (store_random_in_range, ":starting_gold", 1, 50),
      (player_set_gold, ":player_id", ":starting_gold", max_correctly_displayed_gold),
    (try_end),
    (try_for_range, ":other_player_id", 1, ":max_players"),
      (neq, ":other_player_id", ":player_id"),
      (player_is_active, ":other_player_id"),
      (player_get_slot, ":other_faction_id", ":other_player_id", slot_player_faction_id),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_player_set_slot, ":other_player_id", slot_player_faction_id, ":other_faction_id"),
      (player_get_agent_id, ":agent_id", ":other_player_id"),
      (try_begin),
        (agent_is_active, ":agent_id"),
        (agent_get_attached_scene_prop, ":attached_instance", ":agent_id"),
        (ge, ":attached_instance", 0),
        (multiplayer_send_2_int_to_player, ":player_id", server_event_set_attached_scene_prop, ":agent_id", ":attached_instance"),
      (try_end),
    (try_end),
    ]),

  ("agent_play_sound",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":sound_id", 2),

    (try_begin),
      (gt, ":agent_id", -1),
      (agent_is_active, ":agent_id"),
      (agent_get_position, pos60, ":agent_id"),
      (val_mul, ":sound_id", net_sound_multiplier),
      (lt, ":agent_id", net_sound_multiplier),
      (val_add, ":agent_id", ":sound_id"),
      (is_between, ":agent_id", 0, net_value_upper_bound),
      (try_for_agents, ":agent_2_id"),
        (agent_is_active, ":agent_2_id"),
        (agent_get_player_id, ":player_2_id", ":agent_2_id"),
        (player_is_active, ":player_2_id"),
        (agent_get_position, pos61, ":agent_2_id"),
        (get_distance_between_positions, ":distance", pos60, pos61),
        (le, ":distance", max_distance_to_play_sound),
        (multiplayer_send_int_to_player, ":player_2_id", server_event_agent_play_sound, ":agent_id"),
      (try_end),
    (try_end),
    ]),

  ("scene_prop_play_sound",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":sound_id", 2),

    (try_begin),
      (gt, ":instance_id", -1),
      (prop_instance_is_valid, ":instance_id"),
      (prop_instance_get_position, pos60, ":instance_id"),
      (val_mul, ":sound_id", net_sound_multiplier),
      (lt, ":instance_id", net_sound_multiplier),
      (val_add, ":instance_id", ":sound_id"),
      (is_between, ":instance_id", 0, net_value_upper_bound),
      (try_for_agents, ":agent_id"),
        (agent_is_active, ":agent_id"),
        (agent_get_player_id, ":player_id", ":agent_id"),
        (player_is_active, ":player_id"),
        (agent_get_position, pos61, ":agent_id"),
        (get_distance_between_positions, ":distance", pos60, pos61),
        (le, ":distance", max_distance_to_play_sound),
        (multiplayer_send_int_to_player, ":player_id", server_event_scene_prop_play_sound, ":instance_id"),
      (try_end),
    (try_end),
    ]),

  ("hit_scene_prop_play_sound",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":sound_id", 3),

    (agent_get_wielded_item, ":item_id", ":agent_id"),
    (try_begin),
      (gt, ":item_id", all_items_begin),
      (item_get_type, ":item_type", ":item_id"),
      (is_between, ":item_type", itp_type_bow, itp_type_thrown + 1),
      (call_script, "script_scene_prop_play_sound", ":instance_id", ":sound_id"),
    (else_try),
      (call_script, "script_agent_play_sound", ":agent_id", ":sound_id"),
    (try_end),
    ]),

  ("play_sound_at_position",
   [(store_script_param, ":sound_id", 1),

    (set_fixed_point_multiplier, 1),
    (position_get_x, ":pos_x", pos0),
    (position_get_y, ":pos_y", pos0),
    (position_get_z, ":pos_z", pos0),
    (set_fixed_point_multiplier, 100),
    (val_add, ":pos_z", net_pack_3_value_upper_bound / 2),
    (val_clamp, ":pos_x", 0, net_pack_3_value_upper_bound),
    (val_clamp, ":pos_y", 0, net_pack_3_value_upper_bound),
    (val_clamp, ":pos_z", 0, net_pack_3_value_upper_bound),
    (assign, ":packed_position", ":pos_x"),
    (val_mul, ":pos_y", net_pack_3_multiplier_2),
    (val_add, ":packed_position", ":pos_y"),
    (val_mul, ":pos_z", net_pack_3_multiplier_3),
    (val_add, ":packed_position", ":pos_z"),
    (try_for_agents, ":agent_id"),
      (agent_is_active, ":agent_id"),
      (agent_get_player_id, ":player_id", ":agent_id"),
      (player_is_active, ":player_id"),
      (agent_get_position, pos60, ":agent_id"),
      (get_distance_between_positions, ":distance", pos0, pos60),
      (le, ":distance", max_distance_to_play_sound),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_play_sound_at_position, ":sound_id", ":packed_position"),
    (try_end),
    ]),

  ("cf_check_enough_gold",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":gold_cost", 2),

    (player_get_gold, ":player_gold", ":player_id"),
    (try_begin),
      (lt, ":player_gold", ":gold_cost"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, "str_dont_have_enough_money", preset_message_error),
    (try_end),
    (ge, ":player_gold", ":gold_cost"),
    ]),

  ("deduct_gold",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":gold_cost", 2),

    (try_begin),
      (gt, ":gold_cost", 0),
      (player_get_gold, ":player_gold", ":player_id"),
      (val_sub, ":player_gold", ":gold_cost"),
      (player_set_gold, ":player_id", ":player_gold", max_correctly_displayed_gold),
      (player_get_agent_id, ":agent_id", ":player_id"),
      (call_script, "script_agent_play_sound", ":agent_id", "snd_money_paid"),
    (try_end),
    ]),

  ("reward_gold",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":gold_value", 2),

    (try_begin),
      (gt, ":gold_value", 0),
      (player_get_gold, ":player_gold", ":player_id"),
      (val_add, ":player_gold", ":gold_value"),
      (player_set_gold, ":player_id", ":player_gold", max_correctly_displayed_gold),
      (player_get_agent_id, ":agent_id", ":player_id"),
      (call_script, "script_agent_play_sound", ":agent_id", "snd_money_received"),
    (try_end),
    ]),

  ("scene_prop_get_gold_value",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":item_id", 2),
    (store_script_param, ":base_value_multiplier", 3),

    (scene_prop_get_slot, ":value", ":instance_id", slot_scene_prop_gold_value),
    (try_begin),
      (eq, ":value", 0),
      (try_begin),
        (gt, ":item_id", -1),
        (store_item_value, ":base_value", ":item_id"),
        (try_begin),
          (gt, ":base_value_multiplier", 0),
          (val_mul, ":base_value", ":base_value_multiplier"),
          (val_div, ":base_value", 100),
        (try_end),
      (else_try),
        (assign, ":base_value", ":base_value_multiplier"),
      (try_end),
      (gt, ":base_value", 0),
      (prop_instance_get_variation_id, ":multiplier_no", ":instance_id"),
      (val_div, ":multiplier_no", 10),
      (try_begin),
        (eq, ":multiplier_no", 0),
        (assign, ":value", ":base_value"),
        (assign, ":multiplier", 100),
      (else_try),
        (try_begin),
          (is_between, ":multiplier_no", 1, 5),
          (store_mul, ":multiplier", ":multiplier_no", 20),
        (else_try),
          (is_between, ":multiplier_no", 5, 10),
          (store_add, ":multiplier", ":multiplier_no", 1),
          (val_mul, ":multiplier", 20),
        (else_try),
          (eq, ":multiplier_no", 10),
          (assign, ":multiplier", 350),
        (else_try),
          (eq, ":multiplier_no", 11),
          (assign, ":multiplier", 500),
        (else_try),
          (eq, ":multiplier_no", 12),
          (assign, ":multiplier", 1000),
        (try_end),
        (store_mul, ":value", ":base_value", ":multiplier"),
        (val_div, ":value", 100),
        (val_max, ":value", 1),
      (try_end),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_gold_value, ":value"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_gold_multiplier, ":multiplier"),
    (else_try),
      (scene_prop_get_slot, ":multiplier", ":instance_id", slot_scene_prop_gold_multiplier),
    (try_end),
    (assign, reg0, ":value"),
    (assign, reg1, ":multiplier"),
    ]),

  ("setup_owner_faction_for_castles",
   [
    (assign, ":current_faction", castle_factions_begin),
    (try_for_range, ":current_castle_slot", slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
      (troop_set_slot, "trp_mission_data", ":current_castle_slot", ":current_faction"),
      (val_add, ":current_faction", 1),
      (try_begin),
        (eq, ":current_faction", factions_end),
        (assign, ":current_faction", castle_factions_begin),
      (try_end),
    (try_end),
    ]),

  ("capture_castle",
   [(store_script_param, ":faction_id", 1),
    (store_script_param, ":castle_no", 2),

    (try_begin),
      (is_between, ":faction_id", castle_factions_begin, factions_end),
      (is_between, ":castle_no", slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
      (troop_set_slot, "trp_mission_data", ":castle_no", ":faction_id"),
      (get_max_players, ":num_players"),
      (try_for_range, ":player_id", 1, ":num_players"),
        (player_is_active, ":player_id"),
        (multiplayer_send_3_int_to_player, ":player_id", server_event_troop_set_slot, "trp_mission_data", ":castle_no", ":faction_id"),
      (try_end),
    (try_end),
    ]),

  ("str_store_castle_name",
   [(store_script_param, ":output_castle_name", 1),
    (store_script_param, ":castle_no", 2),

    (val_add, ":castle_no", castle_names_begin),
    (try_begin),
      (is_between, ":castle_no", castle_names_begin, castle_names_end),
      (str_store_string, ":output_castle_name", ":castle_no"),
    (else_try),
      (str_store_string, ":output_castle_name", castle_names_end),
    (try_end),
    ]),

  ("scene_prop_get_owning_faction",
   [(store_script_param, ":instance_id", 1),

    (prop_instance_get_variation_id, ":scene_prop_owner_slot", ":instance_id"),
    (val_mod, ":scene_prop_owner_slot", 10),
    (try_begin),
      (ge, ":scene_prop_owner_slot", castle_factions_begin),
      (val_sub, ":scene_prop_owner_slot", castle_factions_begin),
      (val_clamp, ":scene_prop_owner_slot", slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
      (troop_get_slot, reg0, "trp_mission_data", ":scene_prop_owner_slot"),
      (assign, reg1, ":scene_prop_owner_slot"),
    (else_try),
      (assign, reg0, ":scene_prop_owner_slot"),
      (assign, reg1, -1),
    (try_end),
    (val_clamp, reg0, factions_begin, factions_end),
    ]),

  ("cf_can_change_faction",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":faction_id", 2),

    (player_get_slot, ":player_faction_id", ":player_id", slot_player_faction_id),
    (assign, reg0, ":player_faction_id"),
    (try_begin),
      (neq, ":player_faction_id", ":faction_id"),
      (neq, ":player_faction_id", "fac_commoners"),
      (neq, ":faction_id", "fac_commoners"),
      (assign, reg1, "str_must_leave_s1_first"),
    (else_try),
      (assign, reg1, 0),
    (try_end),
    (eq, reg1, 0),
    ]),

  ("change_faction",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":faction_id", 2),

    (try_begin),
      (neg|player_slot_eq, ":player_id", slot_player_faction_id, ":faction_id"),
      (player_set_slot, ":player_id", slot_player_faction_id, ":faction_id"),
      (get_max_players, ":num_players"),
      (try_for_range, ":other_player_id", 1, ":num_players"),
        (player_is_active, ":other_player_id"),
        (multiplayer_send_3_int_to_player, ":other_player_id", server_event_player_set_slot, ":player_id", slot_player_faction_id, ":faction_id"),
      (try_end),
    (try_end),
    ]),

  ("cf_change_faction",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (agent_is_alive, ":agent_id"),

    (assign, ":fail", 0),
    (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
    (assign, ":faction_id", reg0),
    (try_begin),
      (call_script, "script_cf_can_change_faction", ":player_id", ":faction_id"),
      (call_script, "script_change_faction", ":player_id", ":faction_id"),
    (else_try),
      (assign, ":fail", 1),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_preset_message, reg1, preset_message_faction|preset_message_fail_sound, reg0),
    (try_end),
    (eq, ":fail", 0),
    ]),

  ("cf_change_troop",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (agent_is_alive, ":agent_id"),
    (scene_prop_get_slot, ":gold_cost", ":instance_id", slot_scene_prop_gold_value),
    (call_script, "script_cf_check_enough_gold", ":player_id", ":gold_cost"),

    (call_script, "script_cf_change_faction", ":agent_id", ":instance_id"),

    (scene_prop_get_slot, ":troop_id", ":instance_id", slot_scene_prop_troop_id),
    (player_get_troop_id, ":player_troop_id", ":player_id"),
    (try_begin),
      (neq, ":player_troop_id", ":troop_id"),
      (call_script, "script_deduct_gold", ":player_id", ":gold_cost"),
      (player_set_troop_id, ":player_id", ":troop_id"),
      (call_script, "script_player_add_equipped_items", ":player_id", ":troop_id"),
      (call_script, "script_player_add_spawn_items", ":player_id"),
      (call_script, "script_player_respawn_in_place", ":player_id"),
    (try_end),
    ]),

  ("cf_check_troop_can_equip_item",
   [(store_script_param, ":troop_id", 1),
    (store_script_param, ":item_id", 2),

    (item_get_type, ":item_type", ":item_id"),
    (try_begin),
      (eq, ":item_type", itp_type_arrows),
      (assign, ":difficulty", 1),
    (else_try),
      (item_get_slot, ":difficulty", ":item_id", slot_item_difficulty),
    (try_end),
    (assign, ":fail", 0),
    (try_begin),
      (gt, ":difficulty", 0),
      (try_begin),
        (this_or_next|eq, ":item_type", itp_type_bow),
        (eq, ":item_type", itp_type_arrows),
        (store_skill_level, ":troop_level", "skl_power_draw", ":troop_id"),
      (else_try),
        (eq, ":item_type", itp_type_thrown),
        (store_skill_level, ":troop_level", "skl_power_throw", ":troop_id"),
      (else_try),
        (eq, ":item_type", itp_type_shield),
        (assign, ":troop_level", 0), #disabled for multiplayer troops
      (else_try),
        (eq, ":item_type", itp_type_horse),
        (store_skill_level, ":troop_level", "skl_riding", ":troop_id"),
      (else_try),
        (store_attribute_level, ":troop_level", ":troop_id", ca_strength),
      (try_end),
      (lt, ":troop_level", ":difficulty"),
      (assign, ":fail", 1),
    (try_end),
    (eq, ":fail", 0),
    ]),

  ("cf_change_armor",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":item_id", 2),

    (agent_is_active, ":agent_id"),
    (assign, ":fail", 0),
    (agent_get_player_id, ":player_id", ":agent_id"),
    (try_begin),
      (player_is_active, ":player_id"),
      (player_get_troop_id, ":troop_id", ":player_id"),
      (try_begin),
        (call_script, "script_cf_check_troop_can_equip_item", ":troop_id", ":item_id"),
      (else_try),
        (assign, ":fail", 1),
        (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, "str_cant_equip_item", preset_message_error),
      (try_end),
      (eq, ":fail", 0),
      (item_get_type, ":item_type", ":item_id"),
      (store_sub, ":player_slot", ":item_type", itp_type_head_armor),
      (val_add, ":player_slot", slot_player_equip_head),
      (player_set_slot, ":player_id", ":player_slot", ":item_id"),
    (else_try),
      (agent_is_non_player, ":agent_id"),
      (agent_is_alive, ":agent_id"),
    (else_try),
      (assign, ":fail", 1),
    (try_end),
    (eq, ":fail", 0),
    (call_script, "script_change_armor", ":agent_id", ":item_id"),
    ]),

  ("change_armor",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":item_id", 2),

    (agent_equip_item, ":agent_id", ":item_id"),
    (get_max_players, ":num_players"),
    (try_for_range, ":player_id", 1, ":num_players"),
      (player_is_active, ":player_id"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_agent_equip_armor, ":agent_id", ":item_id"),
    (try_end),
    ]),

  ("cf_buy_item",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (scene_prop_get_slot, ":item_id", ":instance_id", slot_scene_prop_item_id),
    (is_between, ":item_id", all_items_begin, all_items_end),
    (call_script, "script_scene_prop_get_gold_value", ":instance_id", ":item_id", 0),
    (assign, ":gold_value", reg0),
    (call_script, "script_cf_check_enough_gold", ":player_id", ":gold_value"),
    (assign, ":fail", 0),
    (item_get_type, ":item_type", ":item_id"),
    (try_begin),
      (is_between, ":item_type", itp_type_head_armor, itp_type_hand_armor + 1),
      (try_begin),
        (call_script, "script_cf_change_armor", ":agent_id", ":item_id"),
      (else_try),
        (assign, ":fail", 1),
      (try_end),
    (else_try),
      (set_spawn_position, pos1),
      (eq, ":item_type", itp_type_horse),
      (spawn_horse, ":item_id"),
    (else_try),
      (spawn_item, ":item_id", 0, seconds_before_removing_dropped_item),
      (prop_instance_set_position, reg0, pos1),
    (try_end),
    (eq, ":fail", 0),
    (call_script, "script_deduct_gold", ":player_id", ":gold_value"),
    ]),

  ("cf_sell_item",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (scene_prop_get_slot, ":item_id", ":instance_id", slot_scene_prop_item_id),
    (is_between, ":item_id", all_items_begin, all_items_end),
    (call_script, "script_cf_agent_consume_item", ":agent_id", ":item_id", 1),
    (call_script, "script_scene_prop_get_gold_value", ":instance_id", ":item_id", 0),
    (store_mul, ":gold_value", reg0, sell_item_gold_multiplier),
    (val_div, ":gold_value", 100),
    (call_script, "script_reward_gold", ":player_id", ":gold_value"),
    ]),

  ("cf_gain_gold",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (scene_prop_get_slot, ":gold_value", ":instance_id", slot_scene_prop_gold_value),
    (call_script, "script_reward_gold", ":player_id", ":gold_value"),
    ]),

  ("cf_gain_health",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":heal_percent", 2),
    (store_script_param, ":heal_limit", 3),
    (store_script_param, ":heal_mount", 4),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),

    (assign, ":fail", 0),
    (try_begin),
      (try_begin),
        (eq, ":heal_mount", 1),
        (agent_get_horse, ":target_agent_id", ":agent_id"),
      (else_try),
        (assign, ":target_agent_id", ":agent_id"),
      (try_end),
      (neq, ":target_agent_id", -1),

      (store_agent_hit_points, ":health", ":target_agent_id", 0),
      (val_add, ":health", ":heal_percent"),
      (val_min, ":health", ":heal_limit"),
      (agent_set_hit_points, ":target_agent_id" , ":health", 0),

      (try_begin),
        (eq, ":heal_mount", 1),
        (call_script, "script_agent_play_sound", ":target_agent_id", "snd_horse_snort"),
      (else_try),
        (call_script, "script_agent_play_sound", ":target_agent_id", "snd_man_yawn"),
      (try_end),
    (else_try),
      (assign, ":fail", 1),
    (try_end),
    (eq, ":fail", 0),
    ]),

  ("scene_prop_adjust_hit",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_damage", 2),
    (store_script_param, ":hardness", 3),
    (store_script_param, ":tool_class", 4),
    (store_script_param, ":skill_id", 5),
    (store_script_param, ":attack_direction_range", 6),
    (set_fixed_point_multiplier, 1),
    (position_get_x, ":agent_id", pos2),
    (set_fixed_point_multiplier, 100),

    (scene_prop_get_hit_points, ":hit_points", ":instance_id"),
    (store_add, ":original_hit_points", ":hit_points", ":hit_damage"),
    (val_add, ":original_hit_points", 1),
    (try_begin),
      (gt, ":skill_id", -1),
      (agent_get_troop_id, ":troop_id", ":agent_id"),
      (store_skill_level, ":skill", ":skill_id", ":troop_id"),
      (try_begin),
        (le, ":skill", 0),
        (val_mul, ":hit_damage", 10),
      (else_try),
        (val_mul, ":hit_damage", 30),
        (val_mul, ":hit_damage", ":skill"),
      (try_end),
    (else_try),
      (val_mul, ":hit_damage", 100),
    (try_end),
    (try_begin),
      (ge, ":hit_damage", 100),
      (try_begin),
        (gt, ":attack_direction_range", -1),
        (store_div, ":attack_direction_end", ":attack_direction_range", 10),
        (val_mod, ":attack_direction_range", 10),
        (val_add, ":attack_direction_end", ":attack_direction_range"),
        (val_add, ":attack_direction_end", 1),
        (agent_get_action_dir, ":attack_direction", ":agent_id"),
        (neg|is_between, ":attack_direction", ":attack_direction_range", ":attack_direction_end"),
        (val_div, ":hit_damage", 3),
      (try_end),
      (ge, ":hit_damage", 100),
      (try_begin),
        (gt, ":tool_class", -1),
        (agent_get_wielded_item, ":wielded_item", ":agent_id", 0),
        (try_begin),
          (gt, ":wielded_item", -1),
          (item_get_slot, ":wielded_item_class", ":wielded_item", slot_item_class),
          (eq, ":wielded_item_class", ":tool_class"),
        (else_try),
          (val_div, ":hit_damage", 5),
        (try_end),
      (try_end),
      (val_max, ":hardness", 1),
      (val_div, ":hit_damage", ":hardness"),
    (try_end),
    (val_div, ":hit_damage", 100),
    (store_sub, ":hit_points", ":original_hit_points", ":hit_damage"),
    (scene_prop_set_hit_points, ":instance_id", ":hit_points"),
    (assign, reg0, ":agent_id"),
    (assign, reg1, ":hit_damage"),
    (assign, reg2, ":hit_points"),
    ]),

  ("cf_check_drop_resource",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_points_for_resource", 2),

    (scene_prop_get_hit_points, ":hit_points", ":instance_id"),
    (scene_prop_get_slot, ":next_resource_hp", ":instance_id", slot_scene_prop_next_resource_hp),
    (assign, reg0, 0),
    (assign, ":loop_condition", 10),
    (try_for_range, ":unused", 0, ":loop_condition"),
      (try_begin),
        (ge, ":next_resource_hp", ":hit_points"),
        (val_sub, ":next_resource_hp", ":hit_points_for_resource"),
        (val_add, reg0, 1),
      (else_try),
        (assign, ":loop_condition", -1),
      (try_end),
    (try_end),
    (neq, reg0, 0),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_next_resource_hp, ":next_resource_hp"),
    ]),

  ("cf_check_harvest_tree_after_felled",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),

    (scene_prop_slot_eq, ":instance_id", slot_scene_prop_state, scene_prop_state_destroyed),
    (scene_prop_get_hit_points, ":hit_points", ":instance_id"),
    (lt, ":hit_points", destroy_scene_prop_hit_points),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_hidden),
    (prop_instance_get_position, pos2, ":instance_id"),
    (position_set_z_to_ground_level, pos2),
    (set_spawn_position, pos2),
    (spawn_scene_prop, "spr_pw_tree_trunk_a"),
    (position_move_z, pos2, -1000, 1),
    (prop_instance_animate_to_position, ":instance_id", pos2, 500),
    ]),

  ("cf_hit_tree",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_damage", 2),
    #(store_script_param, ":full_hit_points", 3),
    (store_script_param, ":hit_points_for_resource", 4),
    (store_script_param, ":hardness", 5),
    (store_script_param, ":branch_imod", 6),

    (call_script, "script_scene_prop_adjust_hit", ":instance_id", ":hit_damage", ":hardness", item_class_wood_cutting, "skl_labouring", 11),
    (assign, ":agent_id", reg0),
    (assign, ":hit_damage", reg1),
    (assign, ":hit_points", reg2),
    (assign, ":break_effect", 0),
    (try_begin),
      (lt, ":hit_points", fell_tree_hit_points),
      (try_begin),
        (prop_instance_is_animating, ":is_animating", ":instance_id"),
        (eq, ":is_animating", 0),
        (call_script, "script_cf_check_harvest_tree_after_felled", ":instance_id"),
      (else_try),
        (scene_prop_slot_eq, ":instance_id", slot_scene_prop_state, scene_prop_state_active),
        (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_destroyed),
        (prop_instance_get_position, pos2, ":instance_id"),
        (position_rotate_y, pos2, 90),
        (prop_instance_animate_to_position, ":instance_id", pos2, 300),
        (assign, ":break_effect", 1),
      (try_end),
    (else_try),
      (call_script, "script_cf_check_drop_resource", ":instance_id", ":hit_points_for_resource"),
      (assign, ":resource_count", reg0),
      (try_for_range, ":unused", 0, ":resource_count"),
        (call_script, "script_set_random_spawn_position", 200),
        (spawn_item, "itm_branch", ":branch_imod", seconds_before_removing_dropped_item),
      (try_end),
      (assign, ":break_effect", 1),
    (try_end),
    (try_begin),
      (eq, ":break_effect", 1),
      (particle_system_burst, "psys_dummy_straw", pos1, 40),
      (particle_system_burst, "psys_gourd_piece_2", pos1, 5),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood_break"),
    (else_try),
      (ge, ":hit_damage", 5),
      (particle_system_burst, "psys_dummy_straw", pos1, 10),
      (particle_system_burst, "psys_gourd_piece_2", pos1, 2),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood"),
    (else_try),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood_scratch"),
    (try_end),
    ]),

  ("init_resource",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_points_for_resource", 2),

    (prop_instance_get_variation_id, ":start_hit_points", ":instance_id"),
    (val_mul, ":start_hit_points", 120),
    (val_clamp, ":start_hit_points", 120, max_correctly_displayed_hp + 1),
    (scene_prop_set_hit_points, ":instance_id", ":start_hit_points"),
    (try_begin),
      (multiplayer_is_server),
      (val_sub, ":start_hit_points", ":hit_points_for_resource"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_next_resource_hp, ":start_hit_points"),
    (try_end),
    ]),

  ("cf_hit_resource",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_damage", 2),
    (store_script_param, ":hit_points_for_resource", 3),
    (store_script_param, ":resource_item_id", 4),
    (store_script_param, ":hardness", 5),
    (store_script_param, ":tool_item_class", 6),

    (call_script, "script_scene_prop_adjust_hit", ":instance_id", ":hit_damage", ":hardness", ":tool_item_class", "skl_labouring", 21),
    (assign, ":agent_id", reg0),
    (assign, ":hit_damage", reg1),
    (try_begin),
      (call_script, "script_cf_check_drop_resource", ":instance_id", ":hit_points_for_resource"),
      (assign, ":resource_count", reg0),
      (set_spawn_position, pos1),
      (try_for_range, ":unused", 0, ":resource_count"),
        (spawn_item, ":resource_item_id", 0, seconds_before_removing_dropped_item),
      (try_end),
      (particle_system_burst, "psys_dummy_smoke", pos1, 10),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_body_fall_big"),
    (else_try),
      (ge, ":hit_damage", 5),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_mining_hit"),
    (else_try),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_mining_scratch"),
    (try_end),
    ]),

  ("cf_destroy_resource",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),

    (prop_instance_get_position, pos1, ":instance_id"),
    (position_move_z, pos1, -500),
    (particle_system_burst, "psys_dummy_smoke", pos1, 10),
    (prop_instance_animate_to_position, ":instance_id", pos1, 500),
    ]),

  ("setup_linked_scene_props",
   [(store_script_param, ":scene_prop_id", 1),

    (scene_prop_get_num_instances, ":num_instances", ":scene_prop_id"),
    (try_for_range, ":begin_scene_prop_no", 0, ":num_instances"),
      (scene_prop_get_instance, ":begin_instance_id", ":scene_prop_id", ":begin_scene_prop_no"),
      (scene_prop_slot_eq, ":begin_instance_id", slot_scene_prop_linked_scene_prop, 0),
      (prop_instance_get_variation_id_2, ":begin_var_2", ":begin_instance_id"),
      (prop_instance_get_position, pos1, ":begin_instance_id"),
      (try_for_range, ":linked_scene_prop_no", 0, linked_scene_prop_slot_count),
        (store_add, ":linked_scene_prop_param_no", ":linked_scene_prop_no", 2),
        (store_script_param, ":linked_scene_prop_id", ":linked_scene_prop_param_no"),
        (gt, ":linked_scene_prop_id", -1),
        (store_add, ":linked_scene_prop_slot", slot_scene_prop_linked_scene_prop, ":linked_scene_prop_no"),
        (assign, ":nearest_instance_id", -1),
        (assign, ":nearest_distance", -1),
        (scene_prop_get_num_instances, ":num_check_instances", ":linked_scene_prop_id"),
        (try_for_range, ":check_scene_prop_no", 0, ":num_check_instances"),
          (scene_prop_get_instance, ":check_instance_id", ":linked_scene_prop_id", ":check_scene_prop_no"),
          (neq, ":check_instance_id", ":begin_instance_id"),
          (prop_instance_get_variation_id_2, ":check_var_2", ":check_instance_id"),
          (eq, ":check_var_2", ":begin_var_2"),
          (scene_prop_slot_eq, ":check_instance_id", slot_scene_prop_linked_scene_prop, 0),
          (prop_instance_get_position, pos2, ":check_instance_id"),
          (get_sq_distance_between_positions, ":check_distance", pos1, pos2),
          (this_or_next|eq, ":nearest_distance", -1),
          (lt, ":check_distance", ":nearest_distance"),
          (assign, ":nearest_distance", ":check_distance"),
          (assign, ":nearest_instance_id", ":check_instance_id"),
        (try_end),
        (scene_prop_set_slot, ":begin_instance_id", ":linked_scene_prop_slot", ":nearest_instance_id"),
        (try_begin),
          (gt, ":nearest_instance_id", -1),
          (scene_prop_set_slot, ":nearest_instance_id", slot_scene_prop_linked_scene_prop, ":begin_instance_id"),
        (else_try),
          (assign, reg10, ":begin_instance_id"),
          (prop_instance_get_scene_prop_kind, reg11, ":begin_instance_id"),
          (assign, reg12, ":linked_scene_prop_id"),
          (display_message, "str_error_unable_to_find_link_scene_prop"),
        (try_end),
      (try_end),
    (try_end),
    ]),

  ("setup_all_linked_scene_props", []),
  ("setup_scene_props_after_mission_start", []),

  ("cf_use_teleport_door",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":x_offset", 3),
    (store_script_param, ":y_offset", 4),
    (store_script_param, ":z_offset", 5),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (player_get_slot, ":player_faction_id", ":player_id", slot_player_faction_id),
    (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
    (assign, ":faction_id", reg0),
    (try_begin),
      (this_or_next|eq, ":faction_id", "fac_commoners"),
      (eq, ":faction_id", ":player_faction_id"),
      (assign, ":fail", 0),
    (else_try),
      (assign, ":fail", 1),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_preset_message, "str_door_locked_by_s1", preset_message_faction|preset_message_fail_sound, ":faction_id"),
    (try_end),
    (eq, ":fail", 0),
    (scene_prop_get_slot, ":linked_door", ":instance_id", slot_scene_prop_linked_scene_prop),
    (gt, ":linked_door", 0),
    (prop_instance_get_position, pos1, ":linked_door"),
    (init_position, pos2),
    (position_move_x, pos2, ":x_offset"),
    (position_move_y, pos2, ":y_offset"),
    (position_move_z, pos2, ":z_offset"),
    (position_transform_position_to_parent, pos3, pos1, pos2),
    (agent_set_position, ":agent_id", pos3),
    ]),

  ("cf_agent_consume_items",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":item_1_id", 2),
    (store_script_param, ":item_2_id", 3),
    (store_script_param, ":item_3_id", 4),
    (store_script_param, ":item_4_id", 5),

    (this_or_next|lt, ":item_1_id", all_items_begin),
    (agent_has_item_equipped, ":agent_id", ":item_1_id"),
    (this_or_next|lt, ":item_2_id", all_items_begin),
    (agent_has_item_equipped, ":agent_id", ":item_2_id"),
    (this_or_next|lt, ":item_3_id", all_items_begin),
    (agent_has_item_equipped, ":agent_id", ":item_3_id"),
    (this_or_next|lt, ":item_4_id", all_items_begin),
    (agent_has_item_equipped, ":agent_id", ":item_4_id"),
    (assign, ":item_1_required", 0),
    (assign, ":item_2_required", 0),
    (assign, ":item_3_required", 0),
    (assign, ":item_4_required", 0),
    (try_begin),
      (ge, ":item_1_id", all_items_begin),
      (assign, ":item_1_required", 1),
    (try_end),
    (try_begin),
      (ge, ":item_2_id", all_items_begin),
      (try_begin),
        (eq, ":item_2_id", ":item_1_id"),
        (val_add, ":item_1_required", 1),
      (else_try),
        (assign, ":item_2_required", 1),
      (try_end),
    (try_end),
    (try_begin),
      (ge, ":item_3_id", all_items_begin),
      (try_begin),
        (eq, ":item_3_id", ":item_1_id"),
        (val_add, ":item_1_required", 1),
      (else_try),
        (eq, ":item_3_id", ":item_2_id"),
        (val_add, ":item_2_required", 1),
      (else_try),
        (assign, ":item_3_required", 1),
      (try_end),
    (try_end),
    (try_begin),
      (ge, ":item_4_id", all_items_begin),
      (try_begin),
        (eq, ":item_4_id", ":item_1_id"),
        (val_add, ":item_1_required", 1),
      (else_try),
        (eq, ":item_4_id", ":item_2_id"),
        (val_add, ":item_2_required", 1),
      (else_try),
        (eq, ":item_4_id", ":item_3_id"),
        (val_add, ":item_3_required", 1),
      (else_try),
        (assign, ":item_4_required", 1),
      (try_end),
    (try_end),
    (assign, ":item_1_count", 0),
    (assign, ":item_2_count", 0),
    (assign, ":item_3_count", 0),
    (assign, ":item_4_count", 0),
    (try_for_range, ":equip_slot", ek_item_0, ek_item_3 + 1),
      (agent_get_item_slot, ":item_id", ":agent_id", ":equip_slot"),
      (ge, ":item_id", all_items_begin),
      (try_begin),
        (ge, ":item_1_required", 1),
        (eq, ":item_id", ":item_1_id"),
        (val_add, ":item_1_count", 1),
      (else_try),
        (ge, ":item_2_required", 1),
        (eq, ":item_id", ":item_2_id"),
        (val_add, ":item_2_count", 1),
      (else_try),
        (ge, ":item_3_required", 1),
        (eq, ":item_id", ":item_3_id"),
        (val_add, ":item_3_count", 1),
      (else_try),
        (ge, ":item_4_required", 1),
        (eq, ":item_id", ":item_4_id"),
        (val_add, ":item_4_count", 1),
      (try_end),
    (try_end),
    (ge, ":item_1_count", ":item_1_required"),
    (ge, ":item_2_count", ":item_2_required"),
    (ge, ":item_3_count", ":item_3_required"),
    (ge, ":item_4_count", ":item_4_required"),
    (try_begin),
      (ge, ":item_1_required", 1),
      (agent_unequip_item, ":agent_id", ":item_1_id"),
    (try_end),
    (try_begin),
      (ge, ":item_2_required", 1),
      (agent_unequip_item, ":agent_id", ":item_2_id"),
    (try_end),
    (try_begin),
      (ge, ":item_3_required", 1),
      (agent_unequip_item, ":agent_id", ":item_3_id"),
    (try_end),
    (try_begin),
      (ge, ":item_4_required", 1),
      (agent_unequip_item, ":agent_id", ":item_4_id"),
    (try_end),
    (try_for_range, ":unused", ":item_1_required", ":item_1_count"),
      (agent_equip_item, ":agent_id", ":item_1_id"),
    (try_end),
    (try_for_range, ":unused", ":item_2_required", ":item_2_count"),
      (agent_equip_item, ":agent_id", ":item_2_id"),
    (try_end),
    (try_for_range, ":unused", ":item_3_required", ":item_3_count"),
      (agent_equip_item, ":agent_id", ":item_3_id"),
    (try_end),
    ]),

  ("cf_agent_consume_resource",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":resource_class", 2),
    (store_script_param, ":amount_required", 3),

    (assign, ":amount_found", 0),
    (assign, ":item_1_id", -1),
    (assign, ":item_2_id", -1),
    (assign, ":item_3_id", -1),
    (assign, ":item_4_id", -1),
    (assign, ":extra_item_1", 0),
    (assign, ":extra_item_2", 0),
    (assign, ":extra_item_3", 0),
    (try_for_range, ":equip_slot", ek_item_0, ek_item_3 + 1),
      (agent_get_item_slot, ":item_id", ":agent_id", ":equip_slot"),
      (ge, ":item_id", all_items_begin),
      (item_slot_eq, ":item_id", slot_item_class, ":resource_class"),
      (try_begin),
        (ge, ":amount_found", ":amount_required"),
        (try_begin),
          (eq, ":item_id", ":item_1_id"),
          (val_add, ":extra_item_1", 1),
        (else_try),
          (eq, ":item_id", ":item_2_id"),
          (val_add, ":extra_item_2", 1),
        (else_try),
          (eq, ":item_id", ":item_3_id"),
          (val_add, ":extra_item_3", 1),
        (try_end),
      (else_try),
        (item_get_slot, ":item_amount", ":item_id", slot_item_resource_amount),
        (gt, ":item_amount", 0),
        (val_add, ":amount_found", ":item_amount"),
        (try_begin),
          (eq, ":item_1_id", -1),
          (assign, ":item_1_id", ":item_id"),
        (else_try),
          (eq, ":item_id", ":item_1_id"),
        (else_try),
          (eq, ":item_2_id", -1),
          (assign, ":item_2_id", ":item_id"),
        (else_try),
          (eq, ":item_id", ":item_2_id"),
        (else_try),
          (eq, ":item_3_id", -1),
          (assign, ":item_id", ":item_3_id"),
        (else_try),
          (eq, ":item_id", ":item_3_id"),
        (else_try),
          (assign, ":item_4_id", ":item_id"),
        (try_end),
      (try_end),
    (try_end),
    (gt, ":amount_found", 0),
    (try_begin),
      (ge, ":item_1_id", all_items_begin),
      (agent_unequip_item, ":agent_id", ":item_1_id"),
    (try_end),
    (try_begin),
      (ge, ":item_2_id", all_items_begin),
      (agent_unequip_item, ":agent_id", ":item_2_id"),
    (try_end),
    (try_begin),
      (ge, ":item_3_id", all_items_begin),
      (agent_unequip_item, ":agent_id", ":item_3_id"),
    (try_end),
    (try_begin),
      (ge, ":item_4_id", all_items_begin),
      (agent_unequip_item, ":agent_id", ":item_4_id"),
    (try_end),
    (try_for_range, ":unused", 0, ":extra_item_1"),
      (agent_equip_item,  ":agent_id", ":item_1_id"),
    (try_end),
    (try_for_range, ":unused", 0, ":extra_item_2"),
      (agent_equip_item,  ":agent_id", ":item_2_id"),
    (try_end),
    (try_for_range, ":unused", 0, ":extra_item_3"),
      (agent_equip_item,  ":agent_id", ":item_3_id"),
    (try_end),
    (assign, reg0, ":amount_found"),
    ]),

  ("cf_agent_consume_item",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":item_id", 2),
    (store_script_param, ":count", 3),

    (agent_has_item_equipped, ":agent_id", ":item_id"),
    (assign, ":actual_count", 0),
    (try_for_range, ":equip_slot", ek_item_0, ek_item_3 + 1),
      (agent_get_item_slot, ":equip_item_id", ":agent_id", ":equip_slot"),
      (eq, ":equip_item_id", ":item_id"),
      (val_add, ":actual_count", 1),
    (try_end),
    (ge, ":actual_count", ":count"),
    (agent_unequip_item, ":agent_id", ":item_id"),
    (try_for_range, ":unused", ":count", ":actual_count"),
      (agent_equip_item, ":agent_id", ":item_id"),
    (try_end),
    ]),

  ("cf_repair_scene_prop",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":agent_id", 2),
    (store_script_param, ":hit_damage", 3),
    (store_script_param, ":full_hit_points", 4),
    (store_script_param, ":resource_class", 5),
    (store_script_param, ":script_damage", 6),

    (agent_is_alive, ":agent_id"),
    (agent_get_wielded_item, ":wielded_item_id", ":agent_id", 0),
    (gt, ":wielded_item_id", -1),
    (item_get_slot, ":wielded_item_class", ":wielded_item_id", slot_item_class),
    (eq, ":wielded_item_class", item_class_repair),
    (agent_get_troop_id, ":troop_id", ":agent_id"),
    (store_skill_level, ":engineer", "skl_engineer", ":troop_id"),
    (gt, ":engineer", 0),
    (scene_prop_get_hit_points, ":hit_points", ":instance_id"),
    (lt, ":hit_points", ":full_hit_points"),
    (scene_prop_get_slot, ":next_resource_hp", ":instance_id", slot_scene_prop_next_resource_hp),
    (try_begin),
      (gt, ":hit_points", ":next_resource_hp"),
      (store_sub, ":amount_required", ":full_hit_points", ":hit_points"),
      (call_script, "script_cf_agent_consume_resource", ":agent_id", ":resource_class", ":amount_required"),
      (val_add, ":next_resource_hp", reg0),
      (val_min, ":next_resource_hp", ":full_hit_points"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_next_resource_hp, ":next_resource_hp"),
    (try_end),
    (try_begin),
      (le, ":hit_points", ":next_resource_hp"),
      (try_begin),
        (neq, ":script_damage", 1),
        (val_add, ":hit_points", ":hit_damage"),
      (try_end),
      (val_mul, ":engineer", 20),
      (val_add, ":hit_points", ":engineer"),
      (scene_prop_set_hit_points, ":instance_id", ":hit_points"),
      (assign, reg1, 0),
    (else_try),
      (assign, reg1, 1),
    (try_end),
    (assign, reg0, ":hit_points"),
    ]),

  ("cf_hit_repairable_scene_prop",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_damage", 2),
    (store_script_param, ":full_hit_points", 3),
    (store_script_param, ":destroy_hit_points", 4),
    (store_script_param, ":resource_class", 5),
    (store_script_param, ":agent_id", 6),
    (store_script_param, ":repair_active", 7),
    (store_script_param, ":script_damage", 8),

    (assign, ":subtract_resource", 1),
    (scene_prop_get_slot, ":state", ":instance_id", slot_scene_prop_state),
    (try_begin),
      (gt, ":agent_id", -1),
      (agent_is_active, ":agent_id"),
      (this_or_next|neq, ":state", scene_prop_state_active),
      (eq, ":repair_active", 1),
      (call_script, "script_cf_repair_scene_prop", ":instance_id", ":agent_id", ":hit_damage", ":full_hit_points", ":resource_class", ":script_damage"),
      (assign, ":hit_points", reg0),
      (assign, ":resource_required", reg1),
      (assign, ":subtract_resource", 0),
      (try_begin),
        (ge, ":hit_points", ":full_hit_points"),
        (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_active),
        (assign, ":result", repairable_repaired),
      (else_try),
        (eq, ":resource_required", 1),
        (assign, ":result", repairable_resource_required),
        (agent_get_player_id, ":player_id", ":agent_id"),
        (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, "str_resource_required", preset_message_yellow|preset_message_fail_sound),
      (else_try),
        (assign, ":result", repairable_repairing),
      (try_end),
    (else_try),
      (scene_prop_get_hit_points, ":hit_points", ":instance_id"),
      (try_begin),
        (eq, ":script_damage", 1),
        (val_sub, ":hit_points", ":hit_damage"),
      (try_end),
      (eq, ":state", scene_prop_state_active),
      (try_begin),
        (lt, ":hit_points", ":destroy_hit_points"),
        (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_destroyed),
        (assign, ":result", repairable_destroyed),
      (else_try),
        (assign, ":result", repairable_hit),
      (try_end),
    (else_try),
      (assign, ":result", repairable_hit_destroyed),
    (try_end),
    (try_begin),
      (eq, ":subtract_resource", 1),
      (scene_prop_get_slot, ":next_resource_hp", ":instance_id", slot_scene_prop_next_resource_hp),
      (val_sub, ":next_resource_hp", ":hit_damage"),
      (val_max, ":next_resource_hp", ":destroy_hit_points"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_next_resource_hp, ":next_resource_hp"),
    (try_end),
    (try_begin),
      (lt, ":hit_points", ":destroy_hit_points"),
      (assign, ":hit_points", ":destroy_hit_points"),
      (scene_prop_set_hit_points, ":instance_id", ":destroy_hit_points"),
    (else_try),
      (eq, ":script_damage", 1),
      (scene_prop_set_hit_points, ":instance_id", ":hit_points"),
    (try_end),
    (assign, reg0, ":result"),
    (assign, reg1, ":hit_points"),
    ]),

  ("cf_hit_door",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_damage", 2),
    (store_script_param, ":full_hit_points", 3),
    (store_script_param, ":resource_class", 4),
    (set_fixed_point_multiplier, 1),
    (position_get_x, ":agent_id", pos2),
    (set_fixed_point_multiplier, 100),

    (call_script, "script_cf_hit_repairable_scene_prop", ":instance_id", ":hit_damage", ":full_hit_points", destroy_scene_prop_hit_points, ":resource_class", ":agent_id", 0, 0),
    (assign, ":result", reg0),
    (try_begin),
      (eq, ":result", repairable_hit),
      (particle_system_burst, "psys_dummy_straw", pos1, 10),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_shield_hit_wood_metal"),
    (else_try),
      (eq, ":result", repairable_destroyed),
      (prop_instance_get_starting_position, pos2, ":instance_id"),
      (init_position, pos3),
      (agent_get_position, pos5, ":agent_id"),
      (prop_instance_get_position, pos6, ":instance_id"),
      (try_begin),
        (position_is_behind_position, pos5, pos6),
        (assign, ":direction", -1),
        (position_move_y, pos3, 150),
        (assign, ":ground_offset", 20),
      (else_try),
        (assign, ":direction", 1),
        (position_move_y, pos3, -150),
        (assign, ":ground_offset", 0),
      (try_end),
      (position_move_x, pos3, -50),
      (position_transform_position_to_parent, pos4, pos2, pos3),
      (position_move_z, pos4, 150, 1),
      (position_get_distance_to_ground_level, ":ground_distance", pos4),
      (val_sub, ":ground_distance", 150),
      (store_atan2, ":ground_angle", ":ground_distance", 150),
      (convert_from_fixed_point, ":ground_angle"),
      (store_add, ":rotate_angle", 90, ":ground_angle"),
      (val_mul, ":rotate_angle", ":direction"),
      (position_rotate_x, pos2, ":rotate_angle"),
      (position_move_z, pos2, ":ground_offset", 1),
      (prop_instance_animate_to_position, ":instance_id", pos2, 100),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_target_position, 0),
      (particle_system_burst, "psys_dummy_smoke", pos1, 20),
      (particle_system_burst, "psys_dummy_straw", pos1, 50),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood_break"),
    (else_try),
      (eq, ":result", repairable_hit_destroyed),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood_scratch"),
    (else_try),
      (eq, ":result", repairable_repairing),
      (call_script, "script_agent_play_sound", ":agent_id", "snd_repair_wood"),
    (else_try),
      (eq, ":result", repairable_repaired),
      (prop_instance_get_starting_position, pos2, ":instance_id"),
      (prop_instance_animate_to_position, ":instance_id", pos2, 400),
      (call_script, "script_agent_play_sound", ":agent_id", "snd_man_grunt"),
    (try_end),
    ]),

  ("cf_use_rotate_door",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":left", 3),

    (scene_prop_slot_eq, ":instance_id", slot_scene_prop_state, scene_prop_state_active),
    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (player_get_slot, ":player_faction_id", ":player_id", slot_player_faction_id),
    (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
    (assign, ":faction_id", reg0),
    (try_begin),
      (this_or_next|eq, ":faction_id", "fac_commoners"),
      (eq, ":faction_id", ":player_faction_id"),
      (call_script, "script_cf_rotate_door", ":instance_id", ":left"),
      (assign, ":fail", 0),
    (else_try),
      (assign, ":fail", 1),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_preset_message, "str_door_locked_by_s1", preset_message_faction|preset_message_fail_sound, ":faction_id"),
    (try_end),
    (eq, ":fail", 0),
    ]),

  ("cf_rotate_door",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":left", 2),

    (prop_instance_get_starting_position, pos1, ":instance_id"),
    (try_begin),
      (scene_prop_slot_eq, ":instance_id", slot_scene_prop_rotation, 0),
      (try_begin),
        (eq, ":left", 1),
        (position_rotate_z, pos1, -95),
      (else_try),
        (position_rotate_z, pos1, 95),
      (try_end),
      (assign, ":door_open", 1),
    (else_try),
      (assign, ":door_open", 0),
    (try_end),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_rotation, ":door_open"),
    (scene_prop_enable_after_time, ":instance_id", 100),
    (prop_instance_animate_to_position, ":instance_id", pos1, 100),
    ]),

  ("cf_init_rotate_door",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":left", 2),

    (prop_instance_get_variation_id_2, ":initial_position", ":instance_id"),
    (try_begin),
      (eq, ":initial_position", 1),
      (call_script, "script_cf_rotate_door", ":instance_id", ":left"),
    (try_end),
    ]),

  ("winch_get_direction",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (prop_instance_get_starting_position, pos1, ":instance_id"),
    (agent_get_position, pos2, ":agent_id"),
    (position_transform_position_to_local, pos3, pos1, pos2),
    (position_get_y, ":relative_y_position", pos3),
    (try_begin),
      (ge, ":relative_y_position", 0),
      (assign, reg0, 1),
    (else_try),
      (assign, reg0, -1),
    (try_end),
    ]),

  ("cf_use_winch",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":winch_instance_id", 2),
    (store_script_param, ":move_steps_plus_one", 3),
    (store_script_param, ":step_size", 4),
    (store_script_param, ":animation_time", 5),
    (store_script_param, ":winch_type", 6),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (agent_is_alive, ":agent_id"),

    (call_script, "script_winch_get_direction", ":agent_id", ":winch_instance_id"),
    (assign, ":direction", reg0),

    (scene_prop_get_slot, ":moveable_instance_id", ":winch_instance_id", slot_scene_prop_linked_scene_prop),
    (ge, ":moveable_instance_id", 0),
    (scene_prop_get_slot, ":current_target", ":moveable_instance_id", slot_scene_prop_target_position),
    (try_begin),
      (le, ":direction", -1),
      (val_mul, ":direction", 2),
      (eq, ":winch_type", winch_type_portcullis),
      (assign, ":new_target", 0),
      (assign, ":animation_time", 20),
      (call_script, "script_scene_prop_play_sound", ":moveable_instance_id", "snd_body_fall_big"),
    (else_try),
      (store_add, ":new_target", ":current_target", ":direction"),
      (val_clamp, ":new_target", 0, ":move_steps_plus_one"),
    (try_end),
    (neq, ":new_target", ":current_target"),
    (scene_prop_set_slot, ":moveable_instance_id", slot_scene_prop_target_position, ":new_target"),

    (prop_instance_get_starting_position, pos1, ":moveable_instance_id"),
    (store_mul, ":target_movement", ":new_target", ":step_size"),
    (try_begin),
      (eq, ":winch_type", winch_type_portcullis),
      (position_move_z, pos1, ":target_movement"),
    (else_try),
      (position_rotate_x, pos1, ":target_movement"),
    (try_end),
    (prop_instance_animate_to_position, ":moveable_instance_id", pos1, ":animation_time"),
    (try_begin),
      (gt, ":direction", 0),
      (assign, ":winch_rotation", -36000),
    (else_try),
      (assign, ":winch_rotation", 36000),
    (try_end),
    (prop_instance_get_position, pos1, ":winch_instance_id"),
    (prop_instance_rotate_to_position, ":winch_instance_id", pos1, ":animation_time", ":winch_rotation"),
    ]),

  ("cf_init_winch",
   [(multiplayer_is_server),
    (store_script_param, ":winch_instance_id", 1),
    (store_script_param, ":start_step", 2),
    (store_script_param, ":step_size", 3),
    (store_script_param, ":winch_type", 4),

    (scene_prop_get_slot, ":moveable_instance_id", ":winch_instance_id", slot_scene_prop_linked_scene_prop),
    (ge, ":moveable_instance_id", 0),
    (scene_prop_set_slot, ":moveable_instance_id", slot_scene_prop_target_position, ":start_step"),
    (prop_instance_get_starting_position, pos1, ":moveable_instance_id"),
    (store_mul, ":target_movement", ":start_step", ":step_size"),
    (try_begin),
      (eq, ":winch_type", winch_type_portcullis),
      (position_move_z, pos1, ":target_movement"),
    (try_end),
    (prop_instance_set_position, ":moveable_instance_id", pos1),
    ]),

  ("cf_use_cart",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":horse", 3),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (agent_is_alive, ":agent_id"),

    (agent_get_horse, ":horse_agent_id", ":agent_id"),
    (assign, ":fail", 0),
    (try_begin),
      (eq, ":horse", 1),
      (try_begin),
        (gt, ":horse_agent_id", -1),
        (agent_get_item_id, ":horse_item_id", ":horse_agent_id"),
        (eq, ":horse_item_id", "itm_cart_horse"),
        (assign, ":attach_agent_id", ":horse_agent_id"),
      (else_try),
        (assign, ":fail", 1),
        (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, "str_not_riding_cart_horse", preset_message_error),
      (try_end),
    (else_try),
      (gt, ":horse_agent_id", -1),
      (assign, ":fail", 1),
    (else_try),
      (assign, ":attach_agent_id", ":agent_id"),
    (try_end),
    (eq, ":fail", 0),

    (try_begin),
      (call_script, "script_cf_attach_cart", ":attach_agent_id", ":instance_id"),
    (else_try),
      (assign, ":fail", 1),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, "str_already_towing_cart", preset_message_error),
    (try_end),
    (eq, ":fail", 0),
    ]),

  ("cf_attach_cart",
   [(store_script_param, ":attach_agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_attached_scene_prop, ":attached_scene_prop", ":attach_agent_id"),
    (assign, ":fail", 0),
    (try_begin),
      (eq, ":attached_scene_prop", -1),
      (ge, ":instance_id", 0),
      (scene_prop_get_slot, ":attached_to_agent", ":instance_id", slot_scene_prop_attached_to_agent),
      (try_begin),
        (gt, ":attached_to_agent", -1),
        (agent_is_alive, ":attached_to_agent"),
        (assign, ":fail", 1),
      (else_try),
        (scene_prop_set_slot, ":instance_id", slot_scene_prop_attached_to_agent, ":attach_agent_id"),
        (assign, ":new_attached_scene_prop", ":instance_id"),
        (agent_set_attached_scene_prop, ":attach_agent_id", ":new_attached_scene_prop"),
        (scene_prop_get_slot, ":z_offset", ":instance_id", slot_scene_prop_position),
        (agent_set_attached_scene_prop_z, ":attach_agent_id", ":z_offset"),
      (try_end),
    (else_try),
      (gt, ":attached_scene_prop", -1),
      (try_begin),
        (eq, ":instance_id", -1),
        (assign, ":instance_id", ":attached_scene_prop"),
      (try_end),
      (eq, ":attached_scene_prop", ":instance_id"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_attached_to_agent, -1),
      (assign, ":new_attached_scene_prop", -1),
      (agent_set_attached_scene_prop, ":attach_agent_id", ":new_attached_scene_prop"),
      (prop_instance_get_position, pos1, ":instance_id"),
      (position_set_z_to_ground_level, pos1),
      (prop_instance_animate_to_position, ":instance_id", pos1, 50),
    (else_try),
      (assign, ":fail", 1),
    (try_end),
    (eq, ":fail", 0),
    (get_max_players, ":max_players"),
    (try_for_range, ":player_id", 1, ":max_players"),
      (player_is_active, ":player_id"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_set_attached_scene_prop, ":attach_agent_id", ":new_attached_scene_prop"),
    (try_end),
    ]),

  ("check_remove_lost_horse",
   [(store_script_param, ":horse_agent_id", 1),

    (agent_get_slot, ":last_rider", ":horse_agent_id", slot_agent_horse_last_rider),
    (agent_get_rider, ":rider_agent_id", ":horse_agent_id"),
    (try_begin),
      (gt, ":rider_agent_id", -1),
      (try_begin),
        (neq, ":last_rider", ":rider_agent_id"),
        (agent_set_slot, ":horse_agent_id", slot_agent_horse_last_rider, ":rider_agent_id"),
      (try_end),
    (else_try),
      (gt, ":last_rider", -1),
      (try_begin),
        (agent_is_active, ":last_rider"),
        (agent_is_alive, ":last_rider"),
        (agent_get_position, pos1, ":last_rider"),
        (agent_get_position, pos2, ":horse_agent_id"),
        (get_distance_between_positions, ":distance", pos1, pos2),
        (try_begin),
          (gt, ":distance", max_distance_horse_rider),
          (agent_set_slot, ":horse_agent_id", slot_agent_horse_last_rider, -1),
        (try_end),
      (else_try),
        (agent_set_slot, ":horse_agent_id", slot_agent_horse_last_rider, -1),
      (try_end),
    (else_try),
      (le, ":last_rider", -10),
      (agent_get_item_id, ":horse_item_id", ":horse_agent_id"),
      (gt, ":horse_item_id", -1),
      (store_item_value, ":horse_value", ":horse_item_id"),
      (assign, ":kill", 1),
      (try_begin),
        (ge, ":horse_value", 5000),
        (gt, ":last_rider", -60),
        (assign, ":kill", 0),
      (else_try),
        (ge, ":horse_value", 2000),
        (gt, ":last_rider", -20),
        (assign, ":kill", 0),
      (end_try),
      (eq, ":kill", 1),
      (try_begin),
        (eq, 1, 0), #(call_script, "script_cf_check_horse_in_range_of_stable", ":horse_agent_id"),
        (agent_set_slot, ":horse_agent_id", slot_agent_horse_last_rider, -1),
      (else_try),
        (agent_fade_out, ":horse_agent_id"),
      (try_end),
    (else_try),
      (val_sub, ":last_rider", 1),
      (agent_set_slot, ":horse_agent_id", slot_agent_horse_last_rider, ":last_rider"),
    (try_end),
    ]),

  ("check_agent_drowning",
   [(store_script_param, ":agent_id", 1),

    (try_begin),
      (agent_is_alive, ":agent_id"),
      (agent_get_position, pos1, ":agent_id"),
      (agent_get_slot, ":drowning_count", ":agent_id", slot_agent_drowning_count),
      (agent_get_item_id, ":horse_item_id", ":agent_id"),
      (try_begin),
        (gt, ":horse_item_id", -1),
        (copy_position, pos2, pos1),
        (position_move_y, pos2, 50),
        (position_move_z, pos2, -10000, 1),
        (position_set_z_to_ground_level, pos2),
        (position_get_z, ":height", pos2),
        (assign, ":drown_height", -190),
      (else_try),
        (position_get_z, ":height", pos1),
        (agent_get_horse, ":on_horse", ":agent_id"),
        (eq, ":on_horse", -1),
        (assign, ":drown_height", -190),
      (else_try),
        (assign, ":drown_height", -275),
      (try_end),
      (try_begin),
        (le, ":height", ":drown_height"),
        (agent_get_speed, pos4, ":agent_id"),
        (position_get_y, ":forwards_speed", pos4),
        (val_abs, ":forwards_speed"),
        (val_div, ":forwards_speed", 200),
        (val_add, ":forwards_speed", 1),
        (val_add, ":drowning_count", ":forwards_speed"),
        (agent_set_slot, ":agent_id", slot_agent_drowning_count, ":drowning_count"),
        (store_sub, ":damage", ":drowning_count", 3),
        (try_begin),
          (gt, ":damage", 1),
          (val_mul, ":damage", ":damage"),
          (store_agent_hit_points, ":hit_points", ":agent_id", 1),
          (val_sub, ":hit_points", ":damage"),
          (agent_deliver_damage_to_agent, ":agent_id", ":agent_id", 5),
          (agent_set_hit_points, ":agent_id", ":hit_points", 1),
          (try_begin),
            (agent_is_human, ":agent_id"),
            (call_script, "script_agent_play_sound", ":agent_id", "snd_man_drown"),
          (else_try),
            (call_script, "script_agent_play_sound", ":agent_id", "snd_horse_low_whinny"),
          (try_end),
        (try_end),
      (else_try),
        (gt, ":drowning_count", 0),
        (agent_set_slot, ":agent_id", slot_agent_drowning_count, 0),
        (try_begin),
          (agent_is_human, ":agent_id"),
          (call_script, "script_agent_play_sound", ":agent_id", "snd_man_cough"),
        (else_try),
          (call_script, "script_agent_play_sound", ":agent_id", "snd_horse_snort"),
        (try_end),
      (try_end),
    (try_end),
    ]),

  ("setup_ship",
   [(store_script_param, ":hull_instance_id", 1),

    (troop_get_slot, ":ship_array_count", "trp_ship_array", 0),
    (val_add, ":ship_array_count", 1),
    (troop_set_slot, "trp_ship_array", ":ship_array_count", ":hull_instance_id"),
    (troop_set_slot, "trp_ship_array", 0, ":ship_array_count"),

    (try_begin),
      (multiplayer_is_server),
      (neq, "$g_edit_scene", 1),
      (store_script_param, ":sail_scene_prop_id", 2),
      (store_script_param, ":sail_off_scene_prop_id", 3),
      (store_script_param, ":ramp_scene_prop_id", 4),

      (prop_instance_get_position, pos1, ":hull_instance_id"),
      (try_begin),
        (gt, ":sail_scene_prop_id", -1),
        (copy_position, pos2, pos1),
        (position_move_z, pos2, -10000),
        (set_spawn_position, pos2),
        (spawn_scene_prop, ":sail_scene_prop_id"),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_linked_sail, reg0),
        (scene_prop_set_slot, reg0, slot_scene_prop_linked_scene_prop, ":hull_instance_id"),
      (else_try),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_linked_sail, -1),
      (try_end),
      (try_begin),
        (gt, ":sail_off_scene_prop_id", -1),
        (set_spawn_position, pos1),
        (spawn_scene_prop, ":sail_off_scene_prop_id"),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_linked_sail_off, reg0),
        (scene_prop_set_slot, reg0, slot_scene_prop_linked_scene_prop, ":hull_instance_id"),
      (else_try),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_linked_sail_off, -1),
      (try_end),
      (try_begin),
        (gt, ":ramp_scene_prop_id", -1),
        (prop_instance_get_variation_id, ":ramp_start_position", ":hull_instance_id"),
        (try_begin),
          (gt, ":ramp_start_position", 1),
          (assign, ":ramp_start_position", -1),
        (try_end),
        (call_script, "script_ship_get_ramp_relative_position", ":ramp_start_position", 1),
        (position_transform_position_to_parent, pos2, pos1, pos30),
        (set_spawn_position, pos2),
        (spawn_scene_prop, ":ramp_scene_prop_id"),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_linked_ramp, reg0),
        (scene_prop_set_slot, reg0, slot_scene_prop_linked_scene_prop, ":hull_instance_id"),
        (scene_prop_set_slot, reg0, slot_scene_prop_position, ":ramp_start_position"),
      (else_try),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_linked_ramp, -1),
      (try_end),
      (scene_prop_get_slot, ":cd_scene_prop_id", ":hull_instance_id", slot_scene_prop_collision_kind),
      (try_begin),
        (gt, ":cd_scene_prop_id", -1),
        (scene_prop_get_num_instances, ":num_instances", ":cd_scene_prop_id"),
        (lt, ":num_instances", 2),
        (init_position, pos1),
        (position_set_z, pos1, z_position_to_hide_object),
        (set_spawn_position, pos1),
        (spawn_scene_prop, ":cd_scene_prop_id"),
        (spawn_scene_prop, ":cd_scene_prop_id"),
      (try_end),
    (try_end),
    ]),

  ("agent_get_ship_station",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (assign, ":station", ship_station_not_on_ship),
    (try_begin),
      (agent_is_active, ":agent_id"),
      (agent_is_alive, ":agent_id"),
      (scene_prop_has_agent_on_it, ":instance_id", ":agent_id"),
      (assign, ":station", ship_station_none),

      (prop_instance_get_position, pos1, ":instance_id"),
      (agent_get_position, pos20, ":agent_id"),
      (position_transform_position_to_local, pos21, pos1, pos20),
      (set_fixed_point_multiplier, 100),
      (position_get_x, ":x_pos", pos21),
      (position_get_y, ":y_pos", pos21),
      (position_get_z, ":z_pos", pos21),
      (is_between, ":y_pos", -150, 150),
      (try_begin),
        (is_between, ":x_pos", -50, 250),
        (assign, ":station", ship_station_mast),
      (else_try),
        (scene_prop_get_slot, ":hull_length", ":instance_id", slot_scene_prop_length),
        (val_mul, ":hull_length", -1),
        (lt, ":x_pos", ":hull_length"),
        (lt, ":z_pos", 500),
        (assign, ":station", ship_station_rudder),
      (try_end),
    (try_end),
    (assign, reg0, ":station"),
    ]),

  ("ship_get_ramp_relative_position",
   [(store_script_param, ":ramp_target", 1),
    (store_script_param, ":match_ground", 2),

    (init_position, pos30),
    (try_begin),
      (position_move_x, pos30, 200),
      (try_begin),
        (eq, ":ramp_target", 0),
        (position_move_z, pos30, 220),
        (position_rotate_y, pos30, -3),
      (else_try),
        (position_move_z, pos30, 305),
        (copy_position, pos31, pos30),
        (try_begin),
          (gt, ":ramp_target", 0),
          (position_move_y, pos30, 500),
          (position_move_y, pos31, 1250),
          (position_rotate_z, pos30, 90),
        (else_try),
          (position_move_y, pos30, -500),
          (position_move_y, pos31, -1250),
          (position_rotate_z, pos30, -90),
        (try_end),

        (try_begin),
          (eq, ":match_ground", 1),
          (position_transform_position_to_parent, pos32, pos1, pos31),
          (position_move_z, pos32, 500),
          (position_get_distance_to_ground_level, ":ground_clearance", pos32),
          (val_sub, ":ground_clearance", 500),
          (lt, ":ground_clearance", 750),
          (assign, ":clearance_ramp", ":ground_clearance"),
          (val_abs, ":clearance_ramp"),
          (convert_to_fixed_point, ":clearance_ramp"),
          (val_div, ":clearance_ramp", 750),
          (store_asin, ":ramp_angle", ":clearance_ramp"),
          (convert_from_fixed_point, ":ramp_angle"),
          (val_min, ":ramp_angle", 50),
          (try_begin),
            (lt, ":ground_clearance", 0),
            (val_mul, ":ramp_angle", -1),
          (try_end),
          (position_rotate_y, pos30, ":ramp_angle"),
        (try_end),
      (try_end),
    (try_end),
    ]),

  ("use_ship_ramp",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (prop_instance_get_position, pos1, ":instance_id"),
    (agent_get_position, pos2, ":agent_id"),
    (scene_prop_get_slot, ":hull_instance_id", ":instance_id", slot_scene_prop_linked_scene_prop),
    (scene_prop_get_slot, ":ramp_position", ":instance_id", slot_scene_prop_target_position),
    (assign, ":ramp_target", ":ramp_position"),
    (try_begin),
      (eq, ":ramp_position", 0),
      (position_transform_position_to_local, pos3, pos1, pos2),
      (position_get_y, ":y_pos", pos3),
      (try_begin),
        (lt, ":y_pos", 0),
        (assign, ":ramp_target", 1),
      (else_try),
        (assign, ":ramp_target", -1),
      (try_end),
    (else_try),
      (scene_prop_has_agent_on_it, ":hull_instance_id", ":agent_id"),
      (assign, ":ramp_target", 0),
    (try_end),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_target_position, ":ramp_target"),
    ]),

  ("cf_check_ship_climb_side",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":server", 3),

    (set_fixed_point_multiplier, 100),
    (prop_instance_get_position, pos1, ":instance_id"),
    (agent_get_position, pos2, ":agent_id"),
    (position_transform_position_to_local, pos3, pos1, pos2),
    (position_get_x, ":relative_x", pos3),
    (scene_prop_get_slot, ":hull_length", ":instance_id", slot_scene_prop_length),
    (store_mul, ":neg_hull_length", ":hull_length", -1),
    (is_between, ":relative_x", ":neg_hull_length", ":hull_length"),
    (position_get_y, ":relative_y", pos3),
    (scene_prop_get_slot, ":hull_width", ":instance_id", slot_scene_prop_width),
    (store_mul, ":neg_hull_width", ":hull_width", -1),
    (neg|is_between, ":relative_y", ":neg_hull_width", ":hull_width"),
    (store_add, ":climb_width", ":hull_width", 300),
    (store_mul, ":neg_climb_width", ":climb_width", -1),
    (is_between, ":relative_y", ":neg_climb_width", ":climb_width"),
    (try_begin),
      (eq, ":server", 1),
      (try_begin),
        (gt, ":relative_y", 0),
        (position_set_y, pos3, ":hull_width"),
      (else_try),
        (position_set_y, pos3, ":neg_hull_width"),
      (try_end),
      (position_set_z, pos3, 300),
      (position_transform_position_to_parent, pos4, pos1, pos3),
      (agent_set_position, ":agent_id", pos4),
    (try_end),
    ]),

  ("cf_client_check_control_ship",
   [(multiplayer_get_my_player, ":my_player_id"),
    (player_get_agent_id, ":my_agent_id", ":my_player_id"),
    (agent_is_active, ":my_agent_id"),
    (agent_is_alive, ":my_agent_id"),
    (troop_get_slot, ":ship_array_count", "trp_ship_array", 0),
    (store_add, ":ship_array_end", ":ship_array_count", 1),
    (assign, ":climb_instance_id", -1),
    (try_for_range, ":ship_no", 1, ":ship_array_end"),
      (troop_get_slot, ":hull_instance_id", "trp_ship_array", ":ship_no"),
      (call_script, "script_agent_get_ship_station", ":my_agent_id", ":hull_instance_id"),
      (try_begin),
        (eq, reg0, ship_station_not_on_ship),
        (key_clicked, key_up),
        (call_script, "script_cf_check_ship_climb_side", ":my_agent_id", ":hull_instance_id", 0),
        (assign, ":climb_instance_id", ":hull_instance_id"),
      (try_end),
      (gt, reg0, ship_station_not_on_ship),
      (assign, ":station", reg0),
      (assign, ":forwards", 0),
      (assign, ":rotation", 0),
      (assign, ":fail", 0),
      (try_begin),
        (eq, ":station", ship_station_mast),
        (try_begin),
          (key_clicked, key_up),
          (assign, ":forwards", 1),
        (else_try),
          (key_clicked, key_down),
          (assign, ":forwards", -1),
        (try_end),
      (else_try),
        (eq, ":station", ship_station_rudder),
        (try_begin),
          (key_clicked, key_left),
          (assign, ":rotation", 1),
        (else_try),
          (key_clicked, key_right),
          (assign, ":rotation", -1),
        (try_end),
      (else_try),
        (assign, ":fail", 1),
        (call_script, "script_preset_message", "str_not_at_mast_or_rudder", preset_message_error, 0, 0),
      (try_end),
      (eq, ":fail", 0),
      (multiplayer_send_3_int_to_server, client_event_control_scene_prop, ":hull_instance_id", ":forwards", ":rotation"),
      (assign, ":ship_array_end", -1),
    (try_end),
    (try_begin),
      (neq, ":ship_array_end", -1),
      (neq, ":climb_instance_id", -1),
      (multiplayer_send_2_int_to_server, client_event_control_scene_prop, ":climb_instance_id", 1),
    (try_end),
    (eq, ":ship_array_end", -1),
    ]),

  ("cf_control_ship",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":forwards", 3),
    (store_script_param, ":rotation", 4),

    (val_clamp, ":forwards", -1, 2),
    (val_clamp, ":rotation", -1, 2),
    (player_is_active, ":player_id"),
    (player_get_agent_id, ":agent_id", ":player_id"),
    (agent_is_alive, ":agent_id"),
    (try_begin),
      (call_script, "script_agent_get_ship_station", ":agent_id", ":instance_id"),
      (try_begin),
        (eq, reg0, ship_station_not_on_ship),
        (eq, ":forwards", 1),
        (call_script, "script_cf_check_ship_climb_side", ":agent_id", ":instance_id", 1),
      (try_end),
      (gt, reg0, ship_station_not_on_ship),
      (assign, ":station", reg0),
      (try_begin),
        (eq, ":station", ship_station_mast),
        (try_begin),
          (neq, ":forwards", 0),
          (scene_prop_get_slot, ":current_forwards", ":instance_id", slot_scene_prop_target_position),
          (val_add, ":current_forwards", ":forwards"),
          (val_clamp, ":current_forwards", -1, ship_forwards_maximum + 1),
          (scene_prop_set_slot, ":instance_id", slot_scene_prop_target_position, ":current_forwards"),
        (try_end),
      (else_try),
        (eq, ":station", ship_station_rudder),
        (scene_prop_set_slot, ":instance_id", slot_scene_prop_controlling_agent, ":agent_id"),
        (try_begin),
          (eq, ":rotation", 0),
          (eq, ":forwards", 0),
          (scene_prop_set_slot, ":instance_id", slot_scene_prop_target_rotation, 0),
        (else_try),
          (scene_prop_get_slot, ":current_rotation", ":instance_id", slot_scene_prop_target_rotation),
          (val_add, ":current_rotation", ":rotation"),
          (val_clamp, ":current_rotation", -ship_rotation_maximum, ship_rotation_maximum + 1),
          (scene_prop_set_slot, ":instance_id", slot_scene_prop_target_rotation, ":current_rotation"),
        (try_end),
      (try_end),
    (try_end),
    (gt, reg0, ship_station_not_on_ship),
    ]),

  ("move_ship",
   [(store_script_param, ":hull_instance_id", 1),

    (try_begin),
      (neg|scene_prop_slot_eq, ":hull_instance_id", slot_scene_prop_state, scene_prop_state_active),
      (assign, ":ramp_instance_id", -1),
    (else_try),
      (scene_prop_get_slot, ":ramp_instance_id", ":hull_instance_id", slot_scene_prop_linked_ramp),
      (scene_prop_get_slot, ":forwards", ":hull_instance_id", slot_scene_prop_position),
      (scene_prop_get_slot, ":target_forwards", ":hull_instance_id", slot_scene_prop_target_position),
      (neq, ":forwards", 0),

      (prop_instance_get_position, pos1, ":hull_instance_id"),
      (assign, ":crashed", 0),
      (scene_prop_get_slot, ":cd_scene_prop_id", ":hull_instance_id", slot_scene_prop_collision_kind),
      (scene_prop_get_instance, ":cd_instance_id", ":cd_scene_prop_id", 0),
      (prop_instance_set_position, ":cd_instance_id", pos1, 1),
      (troop_get_slot, ":ship_array_end", "trp_ship_array", 0),
      (val_add, ":ship_array_end", 1),
      (try_for_range, ":ship_array_slot", 1, ":ship_array_end"),
        (troop_get_slot, ":other_hull_instance_id", "trp_ship_array", ":ship_array_slot"),
        (neq, ":other_hull_instance_id", ":hull_instance_id"),
        (scene_prop_get_slot, ":other_forwards", ":other_hull_instance_id", slot_scene_prop_position),
        (assign, ":continue", 1),
        (try_begin),
          (eq, ":other_forwards", 0),
        (else_try),
          (gt, ":ship_array_slot", "$g_loop_ship_to_check"),
        (else_try),
          (assign, ":continue", 0),
        (try_end),
        (eq, ":continue", 1),
        (scene_prop_get_slot, ":other_cd_scene_prop_id", ":other_hull_instance_id", slot_scene_prop_collision_kind),
        (scene_prop_get_instance, ":other_cd_instance_id", ":other_cd_scene_prop_id", 1),
        (prop_instance_get_position, pos2, ":other_hull_instance_id"),
        (prop_instance_set_position, ":other_cd_instance_id", pos2, 1),
        (prop_instance_intersects_with_prop_instance, ":cd_instance_id", ":other_cd_instance_id"),
        (copy_position, pos2, pos1),
        (assign, ":max_distance", ship_forwards_multiplier * ship_forwards_maximum),
        (try_begin),
          (le, ":forwards", -1),
          (val_mul, ":max_distance", -1),
        (try_end),
        (position_move_x, pos2, ":max_distance"),
        (prop_instance_set_position, ":cd_instance_id", pos2, 1),
        (prop_instance_intersects_with_prop_instance, ":cd_instance_id", ":other_cd_instance_id"),
        (assign, ":crashed", 1),
        (assign, ":ship_array_end", -1),
      (try_end),
      (scene_prop_get_slot, ":ship_length", ":hull_instance_id", slot_scene_prop_length),
      (init_position, pos4),
      (try_begin),
        (gt, ":forwards", 0),
        (position_move_x, pos4, ":ship_length"),
      (else_try),
        (val_mul, ":ship_length", -1),
        (position_move_x, pos4, ":ship_length"),
      (try_end),
      (position_transform_position_to_parent, pos5, pos1, pos4),
      (try_begin),
        (eq, ":crashed", 0),
        (copy_position, pos6, pos5),
        (position_set_z, pos6, 0),
        (position_get_distance_to_terrain, ":ground_clearance", pos6),
        (gt, ":ground_clearance", 200),
      (else_try),
        (assign, ":crashed", 1),
        (copy_position, pos3, pos1),
        (copy_position, pos1, pos5),
        (store_mul, ":damage", ":forwards", ":forwards"),
        (val_mul, ":damage", 100),
        (call_script, "script_cf_damage_ship", ":hull_instance_id", ":damage", 0, 1),
        (copy_position, pos1, pos3),
      (try_end),
      (try_begin),
        (eq, ":crashed", 0),
        (get_scene_boundaries, pos7, pos8),
        (position_get_x, ":hull_end_x", pos5),
        (position_get_x, ":scene_min_x", pos7),
        (gt, ":hull_end_x", ":scene_min_x"),
        (position_get_y, ":hull_end_y", pos5),
        (position_get_y, ":scene_min_y", pos7),
        (gt, ":hull_end_y", ":scene_min_y"),
        (position_get_x, ":scene_max_x", pos8),
        (lt, ":hull_end_x", ":scene_max_x"),
        (position_get_y, ":scene_max_y", pos8),
        (lt, ":hull_end_y", ":scene_max_y"),
      (else_try),
        (assign, ":crashed", 1),
      (try_end),
      (try_begin),
        (eq, ":crashed", 1),
        (assign, ":target_forwards", 0),
        (assign, ":forwards", 0),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_target_position, 0),
        (copy_position, pos3, pos1),
      (else_try),
        (init_position, pos2),
        (store_mul, ":distance", ":forwards", ship_forwards_multiplier),
        (position_move_x, pos2, ":distance"),
        (scene_prop_get_slot, ":rotation", ":hull_instance_id", slot_scene_prop_target_rotation),
        (try_begin),
          (neq, ":rotation", 0),
          (scene_prop_get_slot, ":agent_id", ":hull_instance_id", slot_scene_prop_controlling_agent),
          (call_script, "script_agent_get_ship_station", ":agent_id", ":hull_instance_id"),
          (try_begin),
            (neq, reg0, ship_station_rudder),
            (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_target_rotation, 0),
          (try_end),
          (eq, reg0, ship_station_rudder),
          (store_mul, ":move_sideways", ":rotation", ship_rotation_multiplier),
          (assign, ":forwards_multiplier", ":forwards"),
          (val_abs, ":forwards_multiplier"),
          (val_mul, ":move_sideways", ":forwards_multiplier"),
          (position_move_y, pos2, ":move_sideways"),
          (assign, ":fore_side_ratio", ":move_sideways"),
          (convert_to_fixed_point, ":fore_side_ratio"),
          (val_div, ":fore_side_ratio", ":distance"),
          (val_abs, ":fore_side_ratio"),
          (store_atan, ":rotate_angle", ":fore_side_ratio"),
          (convert_from_fixed_point, ":rotate_angle"),
          (try_begin),
            (this_or_next|is_between, 0, ":rotation", ":forwards"),
            (is_between, 0, ":forwards", ":rotation"),
            (val_mul, ":rotate_angle", -1),
          (try_end),
          (position_rotate_z, pos2, ":rotate_angle"),
        (try_end),
        (position_transform_position_to_parent, pos3, pos1, pos2),
        (prop_instance_animate_to_position, ":hull_instance_id", pos3, 100),
      (try_end),
      (try_begin),
        (gt, ":target_forwards", 0),
        (scene_prop_get_slot, ":active_sail_instance_id", ":hull_instance_id", slot_scene_prop_linked_sail),
        (scene_prop_get_slot, ":inactive_sail_instance_id", ":hull_instance_id", slot_scene_prop_linked_sail_off),
      (else_try),
        (scene_prop_get_slot, ":active_sail_instance_id", ":hull_instance_id", slot_scene_prop_linked_sail_off),
        (scene_prop_get_slot, ":inactive_sail_instance_id", ":hull_instance_id", slot_scene_prop_linked_sail),
      (try_end),
      (try_begin),
        (neq, ":active_sail_instance_id", -1),
        (prop_instance_set_position, ":active_sail_instance_id", pos1),
        (eq, ":crashed", 0),
        (prop_instance_animate_to_position, ":active_sail_instance_id", pos3, 100),
      (try_end),
      (try_begin),
        (neq, ":inactive_sail_instance_id", -1),
        (copy_position, pos4, pos1),
        (position_set_z, pos4, z_position_to_hide_object),
        (prop_instance_stop_animating, ":inactive_sail_instance_id"),
        (prop_instance_set_position, ":inactive_sail_instance_id", pos4),
      (try_end),
    (try_end),
    (try_begin),
      (neq, ":ramp_instance_id", -1),
      (scene_prop_get_slot, ":ramp_target", ":ramp_instance_id", slot_scene_prop_target_position),
      (assign, ":continue", 1),
      (try_begin),
        (neq, ":forwards", 0),
        (assign, ":match_ground", 0),
      (else_try),
        (scene_prop_get_slot, ":ramp_position", ":ramp_instance_id", slot_scene_prop_position),
        (neq, ":ramp_position", ":ramp_target"),
        (prop_instance_get_position, pos3, ":hull_instance_id"),
        (assign, ":match_ground", 1),
      (else_try),
        (assign, ":continue", 0),
      (try_end),
      (eq, ":continue", 1),
      (call_script, "script_ship_get_ramp_relative_position", ":ramp_target", ":match_ground"),
      (position_transform_position_to_parent, pos5, pos3, pos30),
      (prop_instance_animate_to_position, ":ramp_instance_id", pos5, 100),
      (scene_prop_set_slot, ":ramp_instance_id", slot_scene_prop_position, ":ramp_target"),
    (try_end),
    (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_position, ":target_forwards"),
    ]),

  ("animate_ship_parts",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":animation_time", 2),

    (prop_instance_animate_to_position, ":instance_id", pos20, ":animation_time"),
    (scene_prop_get_slot, ":target_forwards", ":instance_id", slot_scene_prop_target_position),
    (try_begin),
      (gt, ":target_forwards", 0),
      (scene_prop_get_slot, ":sail_instance_id", ":instance_id", slot_scene_prop_linked_sail),
    (else_try),
      (scene_prop_get_slot, ":sail_instance_id", ":instance_id", slot_scene_prop_linked_sail_off),
    (try_end),
    (try_begin),
      (gt, ":sail_instance_id", -1),
      (prop_instance_animate_to_position, ":sail_instance_id", pos20, ":animation_time"),
    (try_end),
    (scene_prop_get_slot, ":ramp_instance_id", ":instance_id", slot_scene_prop_linked_ramp),
    (try_begin),
      (gt, ":ramp_instance_id", -1),
      (prop_instance_animate_to_position, ":ramp_instance_id", pos20, ":animation_time"),
    (try_end),
    ]),

  ("cf_damage_ship",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_damage", 2),
    (store_script_param, ":full_hit_points", 3),
    (store_script_param, ":script_damage", 4),

    (scene_prop_get_hit_points, ":hit_points", ":instance_id"),
    (try_begin),
      (eq, ":script_damage", 1),
      (val_sub, ":hit_points", ":hit_damage"),
      (scene_prop_set_hit_points, ":instance_id", ":hit_points"),
      (assign, ":agent_id", -1),
    (else_try),
      (set_fixed_point_multiplier, 1),
      (position_get_x, ":agent_id", pos2),
    (try_end),
    (set_fixed_point_multiplier, 100),
    (call_script, "script_cf_hit_repairable_scene_prop", ":instance_id", ":hit_damage", ":full_hit_points", sink_ship_hit_points, item_class_wood, ":agent_id", 1, 0),
    (assign, ":result", reg0),
    (try_begin),
      (eq, ":result", repairable_hit),
      (try_begin),
        (eq, ":script_damage", 1),
        (particle_system_burst, "psys_dummy_smoke_big", pos1, 2),
        (particle_system_burst, "psys_dummy_straw_big", pos1, 2),
        (copy_position, pos0, pos1),
        (call_script, "script_play_sound_at_position", "snd_damage_ship"),
      (else_try),
        (particle_system_burst, "psys_dummy_straw", pos1, 10),
        (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood"),
      (try_end),
    (else_try),
      (eq, ":result", repairable_destroyed),
      (prop_instance_get_position, pos20, ":instance_id"),
      (position_get_distance_to_ground_level, ":ground_distance", pos20),
      (position_set_z_to_ground_level, pos20),
      (position_rotate_x, pos20, 40),
      (call_script, "script_animate_ship_parts", ":instance_id", ":ground_distance"),
      (store_mission_timer_a, ":time"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_destroyed),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_state_time, ":time"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_position, 0),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_target_position, 0),
      (call_script, "script_scene_prop_play_sound", ":instance_id", "snd_cut_wood_break"),
    (else_try),
      (eq, ":result", repairable_repairing),
      (call_script, "script_agent_play_sound", ":agent_id", "snd_repair_wood"),
    (else_try),
      (eq, ":result", repairable_repaired),
      (prop_instance_get_position, pos20, ":instance_id"),
      (prop_instance_get_starting_position, pos21, ":instance_id"),
      (position_get_z, ":sunk_z", pos20),
      (position_get_z, ":floating_z", pos21),
      (position_set_z, pos20, ":floating_z"),
      (position_get_rotation_around_z, ":z_angle", pos20),
      (init_position, pos22),
      (position_copy_rotation, pos20, pos22),
      (position_rotate_z, pos20, ":z_angle"),
      (store_sub, ":ground_distance", ":floating_z", ":sunk_z"),
      (call_script, "script_animate_ship_parts", ":instance_id", ":ground_distance"),
      (call_script, "script_agent_play_sound", ":agent_id", "snd_repair_wood"),
    (try_end),
    ]),

]
