from header_common import *
from header_operations import *
from module_constants import *
from header_parties import *
from header_skills import *
from header_mission_templates import *
from header_items import *
from header_triggers import *
from header_terrain_types import *
from header_music import *
from header_map_icons import *
from header_sounds import *
import header_debug as dbg
import math

####################################################################################################################
# scripts is a list of script records.
# Each script record contns the following two fields:
# 1) Script id: The prefix "script_" will be inserted when referencing scripts.
# 2) Operation block: This must be a valid operation block. See header_operations.py for reference.
####################################################################################################################

scripts = [
  ("game_start", []),

  ("game_get_use_string",
   [(store_script_param, ":instance_id", 1),

    (try_begin),
      (multiplayer_is_server),
      (get_player_agent_no, ":my_agent_id"),
      (assign, ":stack_count_update_time", 0),
    (else_try),
      (multiplayer_get_my_player, ":my_player_id"),
      (player_get_agent_id, ":my_agent_id", ":my_player_id"),
      (scene_prop_get_slot, ":stack_count_update_time", ":instance_id", slot_scene_prop_stack_count_update_time),
      (neq, ":stack_count_update_time", 0),
      (store_mission_timer_a, ":current_time"),
      (gt, ":current_time", ":stack_count_update_time"),
      (val_add, ":current_time", stack_count_check_interval),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_stack_count_update_time, ":current_time"),
      (multiplayer_send_int_to_server, client_event_request_stack_count, ":instance_id"),
    (try_end),

    (scene_prop_get_slot, ":item_id", ":instance_id", slot_scene_prop_item_id),
    (scene_prop_get_slot, ":use_string", ":instance_id", slot_scene_prop_use_string),
    (try_begin),
      (is_between, ":item_id", all_items_begin, all_items_end),
      (call_script, "script_scene_prop_get_gold_value", ":instance_id", ":item_id", 0),
      (assign, ":gold_value", reg0),
      (assign, ":gold_multiplier", reg1),

      (try_begin),
        (gt, ":use_string", 0),
        (try_begin),
          (eq, ":use_string", "str_buy_banner_faction"),
          (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
          (str_store_faction_name, s1, reg0),
          (str_store_string, s0, ":use_string"),
        (else_try),
          (str_store_item_name, s1, ":item_id"),
          (assign, reg1, ":gold_value"),
          (str_store_string, s0, ":use_string"),
        (try_end),
      (else_try),
        (neq, ":stack_count_update_time", 0),
        (str_store_string, s0, "str_buy_sell_craft"),
      (else_try),
        (str_store_string, s0, "str_buy"),
      (try_end),

      (try_begin),
        (neq, ":stack_count_update_time", 0),
        (scene_prop_get_slot, reg1, ":instance_id", slot_scene_prop_stack_count),
        (str_store_string, s0, "str_stack_count_reg1_s0"),
      (try_end),

      (agent_get_look_position, pos3, ":my_agent_id"),
      (position_get_screen_projection, pos4, pos3),
      (show_item_details, ":item_id", pos4, ":gold_multiplier"),

    (else_try),
      (scene_prop_get_slot, ":troop_id", ":instance_id", slot_scene_prop_troop_id),
      (is_between, ":troop_id", playable_troops_begin, playable_troops_end),
      (str_store_troop_name_plural, s1, ":troop_id"),
      (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
      (assign, ":faction_id", reg0),
      (str_store_faction_name, s2, ":faction_id"),
      (try_begin),
        (gt, ":use_string", 0),
        (str_store_string, s0, ":use_string"),
      (else_try),
        (str_store_string, s0, "str_troop_train"),
      (try_end),
      (multiplayer_get_my_player, ":player_id"),
      (try_begin),
        (call_script, "script_cf_can_change_faction", ":player_id", ":faction_id"),
        (call_script, "script_cf_player_can_use_troop", ":player_id", ":troop_id"),
      (else_try),
        (str_store_string, s0, "str_troop_not_available"),
      (try_end),
      (try_begin),
        (scene_prop_get_slot, ":gold_cost", ":instance_id", slot_scene_prop_gold_value),
        (gt, ":gold_cost", 0),
        (assign, reg10, ":gold_cost"),
        (str_store_string, s0, "str_troop_cost"),
      (try_end),
      (store_attribute_level, reg10, ":troop_id", ca_strength),
      (store_attribute_level, reg11, ":troop_id", ca_agility),
      (str_store_string, s0, "str_troop_strength_agility"),
      (call_script, "script_store_troop_skills_description", ":troop_id"),
      (store_proficiency_level, reg10, ":troop_id", wpt_one_handed_weapon),
      (store_proficiency_level, reg11, ":troop_id", wpt_two_handed_weapon),
      (store_proficiency_level, reg12, ":troop_id", wpt_polearm),
      (store_proficiency_level, reg13, ":troop_id", wpt_archery),
      (store_proficiency_level, reg14, ":troop_id", wpt_crossbow),
      (store_proficiency_level, reg15, ":troop_id", wpt_throwing),
      (str_store_string, s0, "str_troop_weapon_proficiencies"),

    (else_try),
      (this_or_next|eq, ":use_string", "str_winch_lower"),
      (eq, ":use_string", "str_winch_drop"),
      (call_script, "script_winch_get_direction", ":my_agent_id", ":instance_id"),
      (gt, reg0, 0),
      (str_store_string, s0, "str_winch_raise"),
    (else_try),
      (eq, ":use_string", "str_attach"),
      (call_script, "script_cart_choose_action", ":my_agent_id", ":instance_id"),
      (eq, reg0, 1),
      (str_store_string, s0, "str_access"),
    (else_try),
      (eq, ":use_string", "str_destroy_s1"),
      (agent_get_horse, ":attach_agent_id", ":my_agent_id"),
      (try_begin),
        (le, ":attach_agent_id", -1),
        (assign, ":attach_agent_id", ":my_agent_id"),
      (try_end),
      (agent_get_attached_scene_prop, ":attached_instance_id", ":attach_agent_id"),
      (try_begin),
        (prop_instance_is_valid, ":attached_instance_id"),
        (str_store_string, s0, "str_destroy_all_items_cart"),
      (else_try),
        (agent_get_wielded_item, ":wielded_item_id", ":my_agent_id", 0),
        (try_begin),
          (is_between, ":wielded_item_id", all_items_begin, all_items_end),
          (str_store_item_name, s1, ":wielded_item_id"),
        (else_try),
          (agent_get_wielded_item, ":shield_item_id", ":my_agent_id", 1),
          (is_between, ":shield_item_id", all_items_begin, all_items_end),
          (str_store_item_name, s1, ":shield_item_id"),
        (else_try),
          (str_clear, s1),
        (try_end),
        (str_store_string, s0, ":use_string"),
      (try_end),

    (else_try),
      (gt, ":use_string", 0),
      (scene_prop_get_slot, reg1, ":instance_id", slot_scene_prop_gold_value),
      (scene_prop_get_slot, reg2, ":instance_id", slot_scene_prop_stack_count),
      (str_store_string, s0, ":use_string"),

    (else_try),
      (prop_instance_get_scene_prop_kind, ":scene_prop_id", ":instance_id"),

      (eq, ":scene_prop_id", "spr_pw_castle_sign"),
      (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
      (try_begin),
        (gt, reg1, -1),
        (call_script, "script_str_store_castle_name", s0, reg1),
        (str_store_faction_name, s1, reg0),
        (str_store_string, s0, "str_s0__s1_"),
      (else_try),
        (prop_instance_get_variation_id_2, ":name_string_id", ":instance_id"),
        (val_add, ":name_string_id", castle_names_begin),
        (val_min, ":name_string_id", castle_names_end),
        (str_store_string, s0, ":name_string_id"),
      (try_end),

    (else_try),
      (eq, ":use_string", -1),
      (str_clear, s0),
    (else_try),
      (str_store_string, s0, "str_use"),
    (try_end),
    ]),

  ("store_troop_skills_description", []),
  ("initialize_item_slots", []),

  ("game_quick_start",
   [
    (call_script, "script_initialize_troop_equipment_slots"),
    (call_script, "script_initialize_item_slots"),
    (call_script, "script_initialize_banner_info"),
    (call_script, "script_initialize_game_rules"),
    (call_script, "script_store_profile_troop_equipment"),
    ]),

  ("game_set_multiplayer_mission_end",
   [
    (assign, "$g_game_ended", 1),
    (assign, "$g_stats_chart_opened_manually", 0),
    (neg|is_presentation_active, "prsnt_tabbed_stats_chart"),
    (start_presentation, "prsnt_tabbed_stats_chart"),
    ]),

  ("game_enable_cheat_menu", []),

  ("game_get_console_command",
   [(store_script_param, ":command", 1),
    (store_script_param, ":value", 2),
    (try_begin),
      (eq, ":command", command_set_bot_count),
      (store_script_param, ":value_2", 3),
      (try_begin),
        (eq, ":value_2", 1),
        (val_mul, ":value", 2),
      (try_end),
    (try_end),

    (try_begin),
      (call_script, "script_cf_execute_command", ":command", ":value"),
      (call_script, "script_store_command_string", ":command", reg1),
    (else_try),
      (str_store_string, s0, reg0),
    (try_end),
    ]),

  ("game_event_party_encounter", []),
  ("game_event_simulate_battle", []),
  ("game_event_battle_end", []),
  ("game_get_item_buy_price_factor", []),
  ("game_get_item_sell_price_factor", []),
  ("game_event_buy_item", []),
  ("game_event_sell_item", []),
  ("game_get_troop_wage", []),
  ("game_get_total_wage", []),
  ("game_get_join_cost", []),
  ("game_get_upgrade_xp", []),
  ("game_get_upgrade_cost", []),
  ("game_get_prisoner_price", []),
  ("game_check_prisoner_can_be_sold", []),
  ("game_get_morale_of_troops_from_faction", []),
  ("game_event_detect_party", []),
  ("game_event_undetect_party", []),
  ("game_get_statistics_line", []),
  ("game_get_date_text", []),
  ("game_get_money_text", []),
  ("game_get_party_companion_limit", []),
  ("game_reset_player_party_name", []),
  ("game_get_troop_note", []),
  ("game_get_center_note", []),
  ("game_get_faction_note", []),
  ("game_get_quest_note", []),
  ("game_get_info_page_note", []),

  ("game_get_scene_name",
   [(store_script_param, ":scene_no", 1),
    (try_begin),
      (is_between, ":scene_no", scenes_begin, scenes_end),
      (store_sub, ":string_id", ":scene_no", scenes_begin),
      (val_add, ":string_id", scene_names_begin),
      (str_store_string, s0, ":string_id"),
    (try_end),
    ]),

  ("game_get_mission_template_name",
   [(store_script_param, ":mission_template_no", 1),
    (try_begin),
      (is_between, ":mission_template_no", game_type_mission_templates_begin, game_type_mission_templates_end),
      (store_add, ":string_id", ":mission_template_no", game_type_names_begin),
      (str_store_string, s0, ":string_id"),
    (try_end),
    ]),

  ("game_receive_url_response",
   [(store_script_param, ":integer_count", 1),
    (store_script_param, ":string_count", 2),

    (assign, "$g_name_server_enabled", 1),
    (try_begin),
      (ge, ":integer_count", 1),
      (assign, ":return_code", reg0),
      (try_begin),
        (lt, ":return_code", 0),
        (server_add_message_to_log, "str_name_server_error_code_reg0"),
      (else_try),
        (eq, ":return_code", 0),
        (this_or_next|lt, ":integer_count", 4),
        (eq, reg3, -1),
      (else_try),
        (ge, ":integer_count", 3),
        (ge, ":string_count", 1),
        (assign, ":player_id", reg1),
        (assign, ":unique_id", reg2),
        (player_is_active, ":player_id"),
        (player_get_unique_id, ":player_unique_id", ":player_id"),
        (eq, ":player_unique_id", ":unique_id"),
        (try_begin),
          (gt, ":return_code", 0),
          (try_begin),
            (eq, ":return_code", 3),
            (assign, ":rejection_string_id", "str_kicked_using_invalid_name"),
          (else_try),
            (eq, ":return_code", 2),
            (assign, ":rejection_string_id", "str_kicked_using_other_clan_tag"),
          (else_try),
            (assign, ":rejection_string_id", "str_kicked_using_other_players_name"),
          (try_end),
          (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, ":rejection_string_id", preset_message_error|preset_message_log),
          (kick_player, ":player_id"),
          (str_store_string, s10, ":rejection_string_id"),
          (server_add_message_to_log, "str_name_server_log_s10"),
        (try_end),
        (try_begin),
          (ge, ":integer_count", 4),
          (player_is_admin, ":player_id"),
          (assign, ":admin_permissions", reg3),
          (val_max, ":admin_permissions", 0),
          (call_script, "script_player_set_admin_permissions", ":player_id", ":admin_permissions"),
          (multiplayer_send_int_to_player, ":player_id", server_event_admin_set_permissions, ":admin_permissions"),
        (try_end),
      (else_try),
        (server_add_message_to_log, "str_name_server_invalid_response"),
      (try_end),
    (try_end),
    ]),

  ("game_get_cheat_mode", []),

  ("game_receive_network_message",
   [(store_script_param, ":sender_player_id", 1),
    (store_script_param, ":event_type", 2),

    (try_begin),
      (neg|multiplayer_is_server),
      (try_begin),
        (eq, ":event_type", server_event_preset_message),
        (store_script_param, ":string_id", 3),
        (store_script_param, ":flags", 4),
        (store_script_param, ":value_1", 5),
        (store_script_param, ":value_2", 6),
        (call_script, "script_preset_message", ":string_id", ":flags", ":value_1", ":value_2"),
      (else_try),
        (eq, ":event_type", server_event_play_sound),
        (store_script_param, ":sound_id", 3),
        (try_begin),
          (is_between, ":sound_id", 0, "snd_sounds_end"),
          (play_sound, ":sound_id"),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_scene_prop_play_sound),
        (store_script_param, ":instance_id", 3),
        (assign, ":sound_id", ":instance_id"),
        (val_rshift, ":sound_id", net_sound_shift),
        (val_and, ":instance_id", net_sound_mask),
        (try_begin),
          (is_between, ":sound_id", 0, "snd_sounds_end"),
          (prop_instance_is_valid, ":instance_id"),
          (prop_instance_get_position, pos1, ":instance_id"),
          (play_sound_at_position, ":sound_id", pos1),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_play_sound_at_position),
        (store_script_param, ":sound_id", 3),
        (store_script_param, ":packed_position", 4),
        (try_begin),
          (is_between, ":sound_id", 0, "snd_sounds_end"),
          (assign, ":pos_x", ":packed_position"),
          (val_and, ":pos_x", net_pack_3_mask_1),
          (assign, ":pos_y", ":packed_position"),
          (val_and, ":pos_y", net_pack_3_mask_2),
          (val_rshift, ":pos_y", net_pack_3_shift_2),
          (assign, ":pos_z", ":packed_position"),
          (val_and, ":pos_z", net_pack_3_mask_3),
          (val_rshift, ":pos_z", net_pack_3_shift_3),
          (val_sub, ":pos_z", net_pack_3_value_upper_bound / 2),
          (set_fixed_point_multiplier, 1),
          (position_set_x, pos1, ":pos_x"),
          (position_set_y, pos1, ":pos_y"),
          (position_set_z, pos1, ":pos_z"),
          (set_fixed_point_multiplier, 100),
          (play_sound_at_position, ":sound_id", pos1),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_agent_equip_armor),
        (store_script_param, ":agent_id", 3),
        (store_script_param, ":item_id", 4),
        (try_begin),
          (agent_is_active, ":agent_id"),
          (agent_is_alive, ":agent_id"),
          (try_begin),
            (gt, ":item_id", -1),
            (call_script, "script_agent_equip_armor", ":agent_id", ":item_id"),
          (else_try),
            (call_script, "script_agent_clean_blood", ":agent_id"),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_player_set_slot),
        (store_script_param, ":player_id", 3),
        (store_script_param, ":slot_no", 4),
        (store_script_param, ":value", 5),
        (try_begin),
          (player_is_active, ":player_id"),
          (player_set_slot, ":player_id", ":slot_no", ":value"),
          (multiplayer_get_my_player, ":my_player_id"),
          (try_begin),
            (eq, ":slot_no", slot_player_faction_id),
            (player_set_slot, ":player_id", slot_player_is_lord, 0),
            (player_set_slot, ":player_id", slot_player_has_faction_door_key, 0),
            (player_set_slot, ":player_id", slot_player_has_faction_money_key, 0),
            (player_set_slot, ":player_id", slot_player_has_faction_item_key, 0),
            (store_script_param, ":change_faction_type", 6),
            (try_begin),
              (eq, ":change_faction_type", change_faction_type_outlawed),
              (try_begin),
                (eq, ":player_id", ":my_player_id"),
                (call_script, "script_preset_message", "str_you_have_been_outlawed", preset_message_faction|preset_message_log, ":value", 0),
              (else_try),
                (str_store_player_username, s0, ":player_id"),
                (faction_get_color, ":color", "fac_outlaws"),
                (display_message, "str_s0_has_been_outlawed", ":color"),
              (try_end),
            (else_try),
              (eq, ":player_id", ":my_player_id"),
              (call_script, "script_preset_message", "str_joined_the_s1", preset_message_faction|preset_message_log, ":value", 0),
            (try_end),
            (try_begin),
              (eq, ":change_faction_type", change_faction_type_no_respawn),
              (call_script, "script_player_redraw_heraldic_items", ":player_id"),
            (try_end),
          (else_try),
            (eq, ":slot_no", slot_player_outlaw_rating),
            (eq, ":player_id", ":my_player_id"),
            (faction_get_color, ":color", "fac_outlaws"),
            (assign, reg1, ":value"),
            (display_message, "str_your_outlaw_rating_now_reg1", ":color"),
          (else_try),
            (eq, ":slot_no", slot_player_is_lord),
            (eq, ":value", 1),
            (player_get_slot, ":faction_id", ":player_id", slot_player_faction_id),
            (get_max_players, ":max_players"),
            (try_for_range, ":other_player_id", 1, ":max_players"),
              (neq, ":other_player_id", ":player_id"),
              (player_is_active, ":other_player_id"),
              (player_slot_eq, ":other_player_id", slot_player_faction_id, ":faction_id"),
              (player_set_slot, ":other_player_id", slot_player_is_lord, 0),
            (try_end),
            (try_begin),
              (eq, ":player_id", ":my_player_id"),
              (call_script, "script_preset_message", "str_you_are_now_lord_of_s1", preset_message_faction|preset_message_log|preset_message_big, ":faction_id", 0),
              (player_set_slot, ":my_player_id", slot_player_has_faction_door_key, 1),
              (player_set_slot, ":player_id", slot_player_has_faction_money_key, 1),
              (player_set_slot, ":player_id", slot_player_has_faction_item_key, 1),
            (else_try),
              (str_store_player_username, s10, ":player_id"),
              (call_script, "script_preset_message", "str_s10_now_lord_of_s1", preset_message_faction|preset_message_log|preset_message_big, ":faction_id", 0),
            (try_end),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_troop_set_slot),
        (store_script_param, ":troop_id", 3),
        (store_script_param, ":slot_no", 4),
        (store_script_param, ":value", 5),
        (troop_set_slot, ":troop_id", ":slot_no", ":value"),
        (try_begin),
          (eq, ":troop_id", "trp_mission_data"),
          (multiplayer_get_my_player, ":my_player_id"),
          (player_get_agent_id, ":my_agent_id", ":my_player_id"),
          (ge, ":my_agent_id", 0),
          (is_between, ":slot_no", slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
          (call_script, "script_preset_message", "str_s1_captured_s2", preset_message_faction_castle|preset_message_big|preset_message_log, ":value", ":slot_no"),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_scene_prop_set_slot),
        (store_script_param, ":instance_id", 3),
        (store_script_param, ":slot_no", 4),
        (store_script_param, ":value", 5),
        (store_script_param, ":slot_range_end", 6),
        (try_begin),
          (prop_instance_is_valid, ":instance_id"),
          (try_begin),
            (ge, ":slot_no", 0),
            (scene_prop_set_slot, ":instance_id", ":slot_no", ":value"),
            (is_between, ":slot_range_end", slot_scene_prop_inventory_begin, slot_scene_prop_inventory_end),
            (store_add, ":slot_range_begin", ":slot_no", 1),
            (ge, ":slot_range_begin", slot_scene_prop_inventory_begin),
            (try_for_range, ":current_slot_no", ":slot_range_begin", ":slot_range_end"),
              (scene_prop_set_slot, ":instance_id", ":current_slot_no", ":value"),
            (try_end),
          (try_end),
          (eq, ":instance_id", "$g_show_inventory_instance_id"),
          (try_begin),
            (le, ":slot_range_end", -1),
            (store_mul, ":slot_moved_from", ":slot_range_end", -1),
            (is_between, ":slot_moved_from", slot_scene_prop_inventory_mod_begin, slot_scene_prop_inventory_mod_end),
            (scene_prop_set_slot, ":instance_id", ":slot_moved_from", -1),
            (assign, "$g_show_inventory_update_needed", 1),
          (else_try),
            (is_between, ":slot_no", slot_scene_prop_inventory_mod_begin, slot_scene_prop_inventory_mod_end),
            (assign, "$g_show_inventory_update_needed", 1),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_faction_set_slot),
        (store_script_param, ":faction_id", 3),
        (store_script_param, ":slot_no", 4),
        (store_script_param, ":value", 5),
        (try_begin),
          (is_between, ":faction_id", factions_begin, factions_end),
          (faction_get_slot, ":previous_value", ":faction_id", ":slot_no"),
          (faction_set_slot, ":faction_id", ":slot_no", ":value"),
          (try_begin),
            (eq, ":slot_no", slot_faction_banner_mesh),
            (call_script, "script_faction_set_color_from_banner", ":faction_id", ":value"),
            (call_script, "script_faction_redraw_heraldic_items", ":faction_id"),
          (else_try),
            (ge, ":slot_no", slot_faction_relations_begin),
            (store_sub, ":other_faction_id", ":slot_no", slot_faction_relations_begin),
            (lt, ":other_faction_id", factions_end),
            (assign, ":string_id", -1),
            (try_begin),
              (eq, ":value", ":previous_value"),
            (else_try),
              (lt, ":value", 1),
              (ge, ":previous_value", 1),
              (assign, ":string_id", "str_s1_now_hostile_towards_s10"),
            (else_try),
              (lt, ":previous_value", 1),
              (ge, ":value", 1),
              (assign, ":string_id", "str_s1_and_s10_made_peace"),
            (try_end),
            (try_begin),
              (gt, ":string_id", -1),
              (store_add, ":other_relation_slot", slot_faction_relations_begin, ":faction_id"),
              (try_begin),
                (faction_slot_ge, ":other_faction_id", ":other_relation_slot", 1),
                (str_store_faction_name, s10, ":other_faction_id"),
                (call_script, "script_preset_message", ":string_id", preset_message_faction|preset_message_log|preset_message_big, ":faction_id", 0),
              (else_try),
                (multiplayer_get_my_player, ":my_player_id"),
                (player_slot_eq, ":my_player_id", slot_player_is_lord, 1),
                (player_slot_eq, ":my_player_id", slot_player_faction_id, ":other_faction_id"),
                (faction_get_color, ":faction_color", ":faction_id"),
                (try_begin),
                  (eq, ":string_id", "str_s1_now_hostile_towards_s10"),
                  (assign, ":string_id", "str_lord_of_s1_withdraws_offer_of_peace"),
                (else_try),
                  (eq, ":string_id", "str_s1_and_s10_made_peace"),
                  (assign, ":string_id", "str_lord_of_s1_offers_peace"),
                (try_end),
                (str_store_faction_name, s1, ":faction_id"),
                (display_message, ":string_id", ":faction_color"),
              (try_end),
            (try_end),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_agent_set_slot),
        (store_script_param, ":agent_id", 3),
        (store_script_param, ":slot_no", 4),
        (store_script_param, ":value", 5),
        (try_begin),
          (agent_is_active, ":agent_id"),
          (agent_set_slot, ":agent_id", ":slot_no", ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_set_attached_scene_prop),
        (store_script_param, ":agent_id", 3),
        (store_script_param, ":instance_id", 4),
        (try_begin),
          (agent_is_active, ":agent_id"),
          (agent_set_attached_scene_prop, ":agent_id", ":instance_id"),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_show_inventory),
        (store_script_param, ":instance_id", 3),
        (try_begin),
          (gt, ":instance_id", 0),
          (prop_instance_is_valid, ":instance_id"),
          (assign, "$g_show_inventory_instance_id", ":instance_id"),
          (try_for_range, ":mod_slot", slot_scene_prop_inventory_mod_begin, slot_scene_prop_inventory_obj_begin),
            (scene_prop_set_slot, ":instance_id", ":mod_slot", 0),
          (try_end),
          (start_presentation, "prsnt_show_inventory"),
        (else_try),
          (eq, ":instance_id", -1),
          (is_presentation_active, "prsnt_show_inventory"),
          (assign, "$g_show_inventory_update_needed", -1),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_chat_message_recieved),
        (store_script_param, ":chat_event_type", 3),
        (try_begin),
          (troop_get_slot, ":last_chat_event_type", "trp_last_chat_message", slot_last_chat_message_event_type),
          (val_and, ":last_chat_event_type", net_chat_event_mask),
          (val_and, ":chat_event_type", net_chat_event_mask),
          (eq, ":chat_event_type", ":last_chat_event_type"),
          (troop_set_slot, "trp_last_chat_message", slot_last_chat_message_not_recieved, 0),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_local_chat),
        (neg|str_is_empty, s0),
        (display_message, s0, local_chat_color),
        (call_script, "script_chat_overlay_add_to_local_buffer", local_chat_color),
      (else_try),
        (eq, ":event_type", server_event_local_chat_shout),
        (neg|str_is_empty, s0),
        (display_message, s0, local_chat_shout_color),
        (call_script, "script_chat_overlay_add_to_local_buffer", local_chat_shout_color),
      (else_try),
        (eq, ":event_type", server_event_faction_set_name),
        (try_begin),
          (neg|str_is_empty, s0),
          (troop_get_slot, ":faction_id", "trp_mission_data", slot_mission_data_faction_to_change_name_of),
          (troop_set_slot, "trp_mission_data", slot_mission_data_faction_to_change_name_of, 0),
          (is_between, ":faction_id", castle_factions_begin, factions_end),
          (str_store_faction_name, s10, ":faction_id"),
          (faction_set_name, ":faction_id", s0),
          (call_script, "script_preset_message", "str_s10_now_known_as_s1", preset_message_faction|preset_message_log|preset_message_big, ":faction_id", 0),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_return_game_rules),
        (store_script_param, ":command", 3),
        (store_script_param, ":value", 4),
        (store_mod, ":is_get_command", ":command", 2),
        (try_begin),
          (eq, ":is_get_command", 0),
          (call_script, "script_cf_execute_command", ":command", ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_return_server_name),
        (server_set_name, s0),
      (else_try),
        (eq, ":event_type", server_event_return_password),
        (server_set_password, s0),
      (else_try),
        (eq, ":event_type", server_event_set_player_score_kill_death),
        (store_script_param, ":player_id", 3),
        (store_script_param, ":score", 4),
        (store_script_param, ":kills", 5),
        (store_script_param, ":deaths", 6),
        (try_begin),
          (player_is_active, ":player_id"),
          (player_set_score, ":player_id", ":score"),
          (player_set_kill_count, ":player_id", ":kills"),
          (player_set_death_count, ":player_id", ":deaths"),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_show_poll),
        (store_script_param, ":poll_type", 3),
        (store_script_param, ":requester_player_id", 4),
        (store_script_param, ":value_1", 5),
        (store_script_param, ":value_2", 6),
        (call_script, "script_show_poll", ":poll_type", ":requester_player_id", ":value_1", ":value_2"),
      (else_try),
        (eq, ":event_type", server_event_set_overflow_gold),
        (store_script_param, ":gold_value", 3),
        (try_begin),
          (is_between, ":gold_value", 0, max_possible_gold),
          (assign, "$g_overflow_gold_value", ":gold_value"),
        (try_end),
      (else_try),
        (is_between, ":event_type", server_event_faction_chat, server_event_faction_lord_chat + 1),
        (try_begin),
          (neg|str_is_empty, s0),
          (multiplayer_get_my_player, ":player_id"),
          (player_is_active, ":player_id"),
          (player_get_slot, ":faction_id", ":player_id", slot_player_faction_id),
          (is_between, ":faction_id", castle_factions_begin, factions_end),
          (faction_get_color, ":color", ":faction_id"),
          (display_message, s0, ":color"),
          (try_begin),
            (eq, ":event_type", server_event_faction_lord_chat),
            (str_store_string_reg, s11, s0),
            (start_presentation, "prsnt_faction_lord_message"),
          (try_end),
          (val_add, "$g_chat_overlay_faction_buffer_stored", 1),
          (try_begin),
            (neg|is_between, "$g_chat_overlay_faction_buffer_stored", chat_overlay_ring_buffer_begin, chat_overlay_ring_buffer_end),
            (assign, "$g_chat_overlay_faction_buffer_stored", chat_overlay_ring_buffer_begin),
          (try_end),
          (troop_set_plural_name, "$g_chat_overlay_faction_buffer_stored", s0),
          (troop_set_slot, "$g_chat_overlay_faction_buffer_stored", slot_chat_overlay_faction_color, ":color"),
        (try_end),
      (else_try),
        (is_between, ":event_type", server_event_admin_chat, server_event_admin_chat_shout + 1),
        (neg|str_is_empty, s0),
        (display_message, s0, admin_chat_color),
        (try_begin),
          (eq, ":event_type", server_event_admin_chat_shout),
          (str_store_string_reg, s12, s0),
          (start_presentation, "prsnt_admin_message"),
        (try_end),
      (else_try),
        (eq, ":event_type", server_event_admin_set_permissions),
        (store_script_param, ":permissions", 3),
        (multiplayer_get_my_player, ":player_id"),
        (player_is_active, ":player_id"),
        (call_script, "script_player_set_admin_permissions", ":player_id", ":permissions"),
      (try_end),

    (else_try),
      (multiplayer_is_server),
      (try_begin),
        (eq, ":event_type", client_event_attach_scene_prop),
        (store_script_param, ":instance_id", 3),
        (player_get_agent_id, ":agent_id", ":sender_player_id"),
        (try_begin),
          (agent_is_active, ":agent_id"),
          (agent_is_alive, ":agent_id"),
          (try_begin),
            (eq, ":instance_id", 0),
            (agent_get_horse, ":horse_agent_id", ":agent_id"),
            (try_begin),
              (eq, ":horse_agent_id", -1),
              (assign, ":attach_agent_id", ":agent_id"),
            (else_try),
              (assign, ":attach_agent_id", ":horse_agent_id"),
            (try_end),
            (call_script, "script_cf_attach_cart", ":attach_agent_id", -1, ":agent_id"),
          (else_try),
            (prop_instance_is_valid, ":instance_id"),
            (agent_get_position, pos1, ":agent_id"),
            (prop_instance_get_position, pos2, ":instance_id"),
            (get_distance_between_positions, ":distance", pos1, pos2),
            (le, ":distance", max_distance_to_use),
            (call_script, "script_cf_use_cart", ":agent_id", ":instance_id", -1),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", client_event_control_scene_prop),
        (store_script_param, ":instance_id", 3),
        (store_script_param, ":forwards", 4),
        (store_script_param, ":rotation", 5),
        (try_begin),
          (prop_instance_is_valid, ":instance_id"),
          (call_script, "script_cf_control_ship", ":sender_player_id", ":instance_id", ":forwards", ":rotation"),
        (try_end),
      (else_try),
        (eq, ":event_type", client_event_request_stack_count),
        (store_script_param, ":instance_id", 3),
        (try_begin),
          (prop_instance_is_valid, ":instance_id"),
          (scene_prop_get_slot, ":stack_count", ":instance_id", slot_scene_prop_stack_count),
          (multiplayer_send_3_int_to_player, ":sender_player_id", server_event_scene_prop_set_slot, ":instance_id", slot_scene_prop_stack_count, ":stack_count"),
        (try_end),
      (else_try),
        (eq, ":event_type", client_event_transfer_inventory),
        (store_script_param, ":instance_id", 3),
        (store_script_param, ":from_slot", 4),
        (store_script_param, ":to_slot", 5),
        (store_script_param, ":item_id", 6),
        (call_script, "script_transfer_inventory", ":sender_player_id", ":instance_id", ":from_slot", ":to_slot", ":item_id"),
      (else_try),
        (eq, ":event_type", client_event_transfer_gold),
        (store_script_param, ":instance_id", 3),
        (store_script_param, ":gold_value", 4),
        (call_script, "script_cf_use_castle_money_chest", ":sender_player_id", ":instance_id", ":gold_value"),
      (else_try),
        (eq, ":event_type", client_event_chat_message_type),
        (store_script_param, ":chat_event_type", 3),
        (try_begin),
          (player_is_active, ":sender_player_id"),
          (call_script, "script_cf_chat_event_is_new", ":chat_event_type", ":sender_player_id"),
          (player_set_slot, ":sender_player_id", slot_player_next_chat_event_type, ":chat_event_type"),
        (try_end),
      (else_try),
        (is_between, ":event_type", client_event_chat_message_begin, client_event_chat_message_end),
        (try_begin),
          (player_is_active, ":sender_player_id"),
          (multiplayer_send_int_to_player, ":sender_player_id", server_event_chat_message_recieved, ":event_type"),
          (call_script, "script_cf_chat_event_is_new", ":event_type", ":sender_player_id"),
          (try_begin),
            (eq, reg0, 1),
            (player_get_slot, ":chat_event_type", ":sender_player_id", slot_player_next_chat_event_type),
            (assign, ":chat_event_param_1", ":chat_event_type"),
            (val_rshift, ":chat_event_param_1", net_chat_param_1_shift),
            (val_rshift, ":chat_event_type", net_chat_type_shift),
            (val_and, ":chat_event_type", net_chat_event_mask),
          (else_try),
            (assign, ":chat_event_type", chat_event_type_local),
          (try_end),
          (call_script, "script_chat_event_increment", ":event_type"),
          (player_set_slot, ":sender_player_id", slot_player_next_chat_event_type, reg0),
          (neg|str_is_empty, s0),
          (try_begin),
            (is_between, ":chat_event_type", chat_event_type_local, chat_event_type_local_shout + 1),
            (player_get_agent_id, ":agent_id", ":sender_player_id"),
            (gt, ":agent_id", -1),
            (agent_is_alive, ":agent_id"),
            (str_store_player_username, s1, ":sender_player_id"),
            (str_store_string, s0, "str_chat_format"),
            (server_add_message_to_log, s0),
            (try_begin),
              (eq, ":chat_event_type", chat_event_type_local_shout),
              (assign, ":max_distance", max_distance_local_chat_shout),
              (assign, ":ambient_distance", ambient_distance_local_chat_shout),
              (assign, ":server_event", server_event_local_chat_shout),
            (else_try),
              (assign, ":max_distance", max_distance_local_chat),
              (assign, ":ambient_distance", ambient_distance_local_chat),
              (assign, ":server_event", server_event_local_chat),
            (try_end),
            (agent_get_position, pos1, ":agent_id"),
            (position_move_z, pos1, 160),
            (try_for_agents, ":other_agent_id"),
              (agent_is_alive, ":other_agent_id"),
              (neg|agent_is_non_player, ":other_agent_id"),
              (agent_get_player_id, ":other_player_id", ":other_agent_id"),
              (player_is_active, ":other_player_id"),
              (agent_get_position, pos2, ":other_agent_id"),
              (position_move_z, pos2, 160),
              (get_distance_between_positions, ":distance", pos1, pos2),
              (le, ":distance", ":max_distance"),
              (this_or_next|le, ":distance", ":ambient_distance"),
              (position_has_line_of_sight_to_position, pos1, pos2),
              (multiplayer_send_string_to_player, ":other_player_id", ":server_event", s0),
            (try_end),
          (else_try),
            (eq, ":chat_event_type", chat_event_type_set_faction_name),
            (player_get_slot, ":faction_id", ":sender_player_id", slot_player_faction_id),
            (player_get_unique_id, ":unique_id", ":sender_player_id"),
            (try_begin),
              (faction_slot_eq, ":faction_id", slot_faction_lord_player_uid, ":unique_id"),
              (call_script, "script_cf_check_enough_gold", ":sender_player_id", faction_cost_change_name),
              (call_script, "script_player_adjust_gold", ":sender_player_id", faction_cost_change_name, -1),
              (faction_set_name, ":faction_id", s0),
              (faction_set_slot, ":faction_id", slot_faction_name_is_custom, 1),
              (get_max_players, ":max_players"),
              (try_for_range, ":player_id", 1, ":max_players"),
                (player_is_active, ":player_id"),
                (multiplayer_send_3_int_to_player, ":player_id", server_event_troop_set_slot, "trp_mission_data", slot_mission_data_faction_to_change_name_of, ":faction_id"),
                (multiplayer_send_string_to_player, ":player_id", server_event_faction_set_name, s0),
              (try_end),
            (try_end),
          (else_try),
            (is_between, ":chat_event_type", chat_event_type_faction, chat_event_type_faction_lord + 1),
            (player_get_slot, ":faction_id", ":sender_player_id", slot_player_faction_id),
            (is_between, ":faction_id", castle_factions_begin, factions_end),
            (str_store_player_username, s1, ":sender_player_id"),
            (str_store_string, s0, "str_chat_format"),
            (server_add_message_to_log, s0),
            (try_begin),
              (eq, ":chat_event_type", chat_event_type_faction_lord),
              (player_get_unique_id, ":unique_id", ":sender_player_id"),
              (faction_slot_eq, ":faction_id", slot_faction_lord_player_uid, ":unique_id"),
              (assign, ":server_event", server_event_faction_lord_chat),
            (else_try),
              (assign, ":server_event", server_event_faction_chat),
            (try_end),
            (get_max_players, ":max_players"),
            (try_for_range, ":other_player_id", 1, ":max_players"),
              (player_is_active, ":other_player_id"),
              (player_slot_eq, ":other_player_id", slot_player_faction_id, ":faction_id"),
              (multiplayer_send_string_to_player, ":other_player_id", ":server_event", s0),
            (try_end),
          (else_try),
            (is_between, ":chat_event_type", chat_event_type_admin, chat_event_type_admin_shout + 1),
            (assign, ":target_player_id", ":chat_event_param_1"),
            (assign, ":chat_string_id", -1),
            (try_begin),
              (player_is_admin, ":sender_player_id"),
              (try_begin),
                (eq, ":target_player_id", 0),
                (try_begin),
                  (eq, ":chat_event_type", chat_event_type_admin_shout),
                  (player_slot_eq, ":sender_player_id", slot_player_admin_no_announce, 0),
                  (assign, ":chat_string_id", "str_admin_announcement_format"),
                (else_try),
                  (eq, ":target_player_id", 0),
                  (assign, ":chat_string_id", "str_admin_chat_format"),
                (try_end),
              (else_try),
                (player_is_active, ":target_player_id"),
                (str_store_player_username, s2, ":target_player_id"),
                (assign, ":chat_string_id", "str_admin_chat_to_player_format"),
              (try_end),
            (else_try),
              (assign, ":chat_string_id", "str_admin_chat_player_format"),
              (assign, ":target_player_id", 0),
            (try_end),
            (try_begin),
              (gt, ":chat_string_id", -1),
              (str_store_player_username, s1, ":sender_player_id"),
              (str_store_string, s10, ":chat_string_id"),
              (server_add_message_to_log, s10),
              (get_max_players, ":max_players"),
              (try_for_range, ":other_player_id", 1, ":max_players"),
                (player_is_active, ":other_player_id"),
                (assign, ":server_event", server_event_admin_chat),
                (assign, ":swapped", 0),
                (try_begin),
                  (eq, ":chat_string_id", "str_admin_announcement_format"),
                  (assign, ":server_event", server_event_admin_chat_shout),
                (else_try),
                  (eq, ":other_player_id", ":sender_player_id"),
                (else_try),
                  (player_is_admin, ":other_player_id"),
                (else_try),
                  (eq, ":other_player_id", ":target_player_id"),
                  (str_store_string_reg, s11, s10),
                  (assign, ":swapped", 1),
                  (str_store_string, s10, "str_admin_chat_format"),
                  (try_begin),
                    (eq, ":chat_event_type", chat_event_type_admin_shout),
                    (assign, ":server_event", server_event_admin_chat_shout),
                  (try_end),
                (else_try),
                  (assign, ":server_event", -1),
                (try_end),
                (gt, ":server_event", -1),
                (multiplayer_send_string_to_player, ":other_player_id", ":server_event", s10),
                (try_begin),
                  (eq, ":swapped", 1),
                  (str_store_string_reg, s10, s11),
                (try_end),
              (try_end),
            (try_end),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", client_event_faction_admin_action),
        (store_script_param, ":action", 3),
        (store_script_param, ":value_1", 4),
        (try_begin),
          (call_script, "script_cf_faction_admin_action", ":action", ":sender_player_id", ":value_1"),
        (try_end),
      (else_try),
        (eq, ":event_type", client_event_drop_money_bag),
        (store_script_param, ":gold_amount", 3),
        (try_begin),
          (gt, ":gold_amount", 0),
          (call_script, "script_cf_drop_money_bag_item", ":sender_player_id", ":gold_amount"),
        (else_try),
          (player_is_admin, ":sender_player_id"),
          (player_slot_eq, ":sender_player_id", slot_player_admin_no_gold, 0),
          (eq, "$g_admin_gold_disabled", 0),
          (val_mul, ":gold_amount", -1),
          (call_script, "script_player_adjust_gold", ":sender_player_id", ":gold_amount", 1),
          (assign, reg0, ":gold_amount"),
          (str_store_string, s3, "str_log_admin_cheat_money"),
          (str_store_player_username, s0, ":sender_player_id"),
          (player_get_unique_id, reg0, ":sender_player_id"),
          (server_add_message_to_log, "str_log_admin_target_self"),
        (try_end),
      (else_try),
        (eq, ":event_type", client_event_request_spawn_point),
        (store_script_param, ":spawn_point", 3),
        (try_begin),
          (gt, ":spawn_point", 0),
          (player_set_slot, ":sender_player_id", slot_player_requested_spawn_point, ":spawn_point"),
        (else_try),
          (player_get_team_no, ":player_team", ":sender_player_id"),
          (try_begin),
            (eq, ":player_team", team_spectators),
            (player_set_team_no, ":sender_player_id", team_default),
          (else_try),
            (player_set_team_no, ":sender_player_id", team_spectators),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", client_event_request_game_rules),
        (store_script_param, ":admin_request", 3),
        (call_script, "script_player_return_game_rules", ":sender_player_id", ":admin_request"),
      (else_try),
        (eq, ":event_type", client_event_admin_set_game_rule),
        (try_begin),
          (player_is_admin, ":sender_player_id"),
          (player_slot_eq, ":sender_player_id", slot_player_admin_no_panel, 0),
          (store_script_param, ":command", 3),
          (store_script_param, ":value", 4),
          (store_mod, ":is_get_command", ":command", 2),
          (eq, ":is_get_command", 0),
          (call_script, "script_cf_execute_command", ":command", ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", client_event_admin_set_server_name),
        (try_begin),
          (player_is_admin, ":sender_player_id"),
          (player_slot_eq, ":sender_player_id", slot_player_admin_no_panel, 0),
          (server_get_renaming_server_allowed, ":renaming_allowed"),
          (eq, ":renaming_allowed", 1),
          (server_set_name, s0),
        (try_end),
      (else_try),
        (eq, ":event_type", client_event_admin_set_password),
        (try_begin),
          (player_is_admin, ":sender_player_id"),
          (player_slot_eq, ":sender_player_id", slot_player_admin_no_panel, 0),
          (server_set_password, s0),
        (try_end),
      (else_try),
        (eq, ":event_type", client_event_admin_set_welcome_message),
        (try_begin),
          (player_is_admin, ":sender_player_id"),
          (player_slot_eq, ":sender_player_id", slot_player_admin_no_panel, 0),
          (server_set_welcome_message, s0),
        (try_end),
      (else_try),
        (eq, ":event_type", client_event_admin_action),
        (store_script_param, ":admin_action", 3),
        (store_script_param, ":target_player_id", 4),
        (try_begin),
          (call_script, "script_cf_admin_action", ":admin_action", ":sender_player_id", ":target_player_id"),
        (try_end),
      (else_try),
        (eq, ":event_type", client_event_request_poll),
        (store_script_param, ":poll_type", 3),
        (store_script_param, ":value_1", 4),
        (store_script_param, ":value_2", 5),
        (call_script, "script_request_poll", ":poll_type", ":sender_player_id", ":value_1", ":value_2"),
      (else_try),
        (eq, ":event_type", client_event_poll_vote),
        (store_script_param, ":vote", 3),
        (call_script, "script_poll_vote", ":sender_player_id", ":vote"),
      (else_try),
        (eq, ":event_type", client_event_admin_equip_item),
        (store_script_param, ":item_id", 3),
        (try_begin),
          (player_is_admin, ":sender_player_id"),
          (player_slot_eq, ":sender_player_id", slot_player_admin_no_all_items, 0),
          (player_get_agent_id, ":agent_id", ":sender_player_id"),
          (agent_is_active, ":agent_id"),
          (agent_is_alive, ":agent_id"),
          (is_between, ":item_id", all_items_begin, all_items_end),
          (item_get_type, ":item_type", ":item_id"),
          (try_begin),
            (eq, ":item_type", itp_type_horse),
            (agent_get_position, pos1, ":agent_id"),
            (position_move_x, pos1, 50),
            (set_spawn_position, pos1),
            (spawn_horse, ":item_id"),
          (else_try),
            (is_between, ":item_type", itp_type_head_armor, itp_type_hand_armor + 1),
            (store_sub, ":player_slot", ":item_type", itp_type_head_armor),
            (val_add, ":player_slot", slot_player_equip_head),
            (player_set_slot, ":sender_player_id", ":player_slot", ":item_id"),
            (call_script, "script_change_armor", ":agent_id", ":item_id"),
          (else_try),
            (agent_equip_item, ":agent_id", ":item_id"),
          (try_end),
          (str_store_item_name, s4, ":item_id"),
          (str_store_string, s3, "str_log_admin_cheat_item"),
          (str_store_player_username, s0, ":sender_player_id"),
          (player_get_unique_id, reg0, ":sender_player_id"),
          (server_add_message_to_log, "str_log_admin_target_self"),
        (try_end),
      (else_try),
        (eq, ":event_type", client_event_toggle_drop_armor),
        (store_script_param, ":equip_slot", 3),
        (try_begin),
          (player_get_agent_id, ":agent_id", ":sender_player_id"),
          (agent_is_active, ":agent_id"),
          (agent_is_alive, ":agent_id"),
          (is_between, ":equip_slot", ek_head, ek_gloves + 1),
          (store_sub, ":item_id", ":equip_slot", ek_head),
          (val_add, ":item_id", "itm_no_head"),
          (store_add, ":player_slot", ":equip_slot", slot_player_equip_head - ek_head),
          (agent_get_item_slot, ":equipped_item_id", ":agent_id", ":equip_slot"),
          (try_begin),
            (lt, ":equipped_item_id", all_items_begin),
            (try_begin),
              (neq, ":equip_slot", ek_head),
              (neq, ":equip_slot", ek_gloves),
              (assign, ":item_id", -1),
            (else_try),
              (player_get_slot, ":item_id", ":sender_player_id", ":player_slot"),
              (val_abs, ":item_id"),
              (lt, ":item_id", all_items_begin),
              (assign, ":item_id", -1),
            (try_end),
          (else_try),
            (neq, ":equip_slot", ek_head),
            (neq, ":equip_slot", ek_gloves),
            (player_set_slot, ":sender_player_id", ":player_slot", 0),
          (try_end),
          (try_begin),
            (gt, ":item_id", -1),
            (call_script, "script_change_armor", ":agent_id", ":item_id"),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", client_event_agent_loot_armor),
        (store_script_param, ":target_agent_id", 3),
        (store_script_param, ":equip_slot", 4),
        (try_begin),
          (agent_is_active, ":target_agent_id"),
          (neg|agent_is_alive, ":target_agent_id"),
          (player_get_agent_id, ":agent_id", ":sender_player_id"),
          (agent_is_active, ":agent_id"),
          (agent_is_alive, ":agent_id"),
          (agent_get_player_id, ":target_player_id", ":target_agent_id"),
          (neq, ":target_player_id", ":sender_player_id"),
          (agent_get_position, pos1, ":agent_id"),
          (agent_get_position, pos2, ":target_agent_id"),
          (get_distance_between_positions, ":distance", pos1, pos2),
          (lt, ":distance", max_distance_to_loot),
          (agent_get_item_slot, ":item_id", ":target_agent_id", ":equip_slot"),
          (ge, ":item_id", all_items_begin),
          (agent_unequip_item, ":target_agent_id", ":item_id"),
          (call_script, "script_cf_change_armor", ":agent_id", ":item_id"),
        (try_end),
      (try_end),
    (try_end),
    ]),

  ("game_get_multiplayer_server_option_for_mission_template",
   [#(store_script_param, ":mission_template_id", 1),
    (store_script_param, ":option_index", 2),

    (try_begin),
      (eq, ":option_index", 0),
      (server_get_ghost_mode, reg0),
      (set_trigger_result, 1),
    (else_try),
      (eq, ":option_index", 1),
      (server_get_control_block_dir, reg0),
      (set_trigger_result, 1),
    (else_try),
      (eq, ":option_index", 2),
      (server_get_combat_speed, reg0),
      (set_trigger_result, 1),
    (else_try),
      (eq, ":option_index", 3),
      (assign, reg0, "$g_map_time_limit"),
      (set_trigger_result, 1),
    (else_try),
      (eq, ":option_index", 4),
      (assign, reg0, "$g_respawn_period"),
      (set_trigger_result, 1),
    (else_try),
      (eq, ":option_index", 5),
      (assign, reg0, "$g_starting_gold_multiplier"),
      (set_trigger_result, 1),
    (else_try),
      (eq, ":option_index", 6),
      (assign, reg0, "$g_combat_gold_multiplier"),
      (set_trigger_result, 1),
    (else_try),
      (eq, ":option_index", 7),
      (assign, reg0, "$g_scene_num_castle_factions"),
      (set_trigger_result, 1),
    (else_try),
      (eq, ":option_index", 8),
      (assign, reg0, "$g_victory_condition"),
      (set_trigger_result, 1),
    (else_try),
      (eq, ":option_index", 9),
      (assign, reg0, "$g_commoner_outlaw_loot"),
      (set_trigger_result, 1),
    (try_end),
    ]),

  ("game_multiplayer_server_option_for_mission_template_to_string",
   [#(store_script_param, ":mission_template_id", 1),
    (store_script_param, ":option_index", 2),
    (store_script_param, ":option_value", 3),

    (str_clear, s0),
    (try_begin),
      (eq, ":option_index", 0),
      (str_store_string, s0, "str_ghost_mode"),
      (try_begin),
        (eq, ":option_value", 0),
        (str_store_string, s1, "str_free"),
      (else_try),
        (eq, ":option_value", 1),
        (str_store_string, s1, "str_stick_to_any_player"),
      (else_try),
        (eq, ":option_value", 2),
        (str_store_string, s1, "str_stick_to_team_members"),
      (else_try),
        (str_store_string, s1, "str_stick_to_team_members_view"),
      (try_end),
      (str_store_string, s0, "str_s0_s1"),
    (else_try),
      (eq, ":option_index", 1),
      (str_store_string, s0, "str_control_block_direction"),
      (try_begin),
        (eq, ":option_value", 0),
        (str_store_string, s1, "str_automatic"),
      (else_try),
        (str_store_string, s1, "str_by_mouse_movement"),
      (try_end),
      (str_store_string, s0, "str_s0_s1"),
    (else_try),
      (eq, ":option_index", 2),
      (str_store_string, s0, "str_combat_speed"),
      (try_begin),
        (eq, ":option_value", 0),
        (str_store_string, s1, "str_combat_speed_0"),
      (else_try),
        (eq, ":option_value", 1),
        (str_store_string, s1, "str_combat_speed_1"),
      (else_try),
        (eq, ":option_value", 2),
        (str_store_string, s1, "str_combat_speed_2"),
      (else_try),
        (eq, ":option_value", 3),
        (str_store_string, s1, "str_combat_speed_3"),
      (else_try),
        (str_store_string, s1, "str_combat_speed_4"),
      (try_end),
      (str_store_string, s0, "str_s0_s1"),
    (else_try),
      (eq, ":option_index", 3),
      (str_store_string, s0, "str_map_time_limit"),
      (assign, reg0, ":option_value"),
      (str_store_string, s0, "str_s0_reg0"),
    (else_try),
      (eq, ":option_index", 4),
      (str_store_string, s0, "str_respawn_period"),
      (assign, reg0, ":option_value"),
      (str_store_string, s0, "str_s0_reg0"),
    (else_try),
      (eq, ":option_index", 5),
      (str_store_string, s0, "str_starting_gold"),
      (assign, reg0, ":option_value"),
      (str_store_string, s0, "str_s0_reg0"),
    (else_try),
      (eq, ":option_index", 6),
      (str_store_string, s0, "str_combat_gold_bonus"),
      (assign, reg0, ":option_value"),
      (str_store_string, s0, "str_s0_reg0"),
    (else_try),
      (eq, ":option_index", 7),
      (assign, reg0, ":option_value"),
      (str_store_string, s0, "str_number_of_factions_reg0"),
    (else_try),
      (eq, ":option_index", 8),
      (try_begin),
        (ge, ":option_value", 1),
        (assign, reg0, ":option_value"),
        (str_store_string, s0, "str_victory_condition_castles"),
      (else_try),
        (str_store_string, s0, "str_victory_condition_none"),
      (try_end),
    (else_try),
      (eq, ":option_index", 9),
      (try_begin),
        (eq, ":option_value", 2),
        (str_store_string, s0, "str_loot_independent"),
      (else_try),
        (eq, ":option_value", 1),
        (str_store_string, s0, "str_loot_never_commoners"),
      (else_try),
        (str_store_string, s0, "str_loot_as_factions"),
      (try_end),
    (else_try),
      (val_add, ":option_index", 1),
    (try_end),
    ]),

  ("game_multiplayer_event_duel_offered", []),

  ("game_get_multiplayer_game_type_enum",
   [(assign, reg0, game_type_mission_templates_begin),
    (store_sub, reg1, game_type_mission_templates_begin, game_type_mission_templates_end),
    ]),

  ("game_multiplayer_get_game_type_mission_template",
   [(store_script_param, ":game_type", 1),
    (try_begin),
      (is_between, ":game_type", game_type_mission_templates_begin, game_type_mission_templates_end),
      (assign, reg0, ":game_type"),
    (else_try),
      (assign, reg0, -1),
    (try_end),
    ]),

  ("game_get_party_prisoner_limit", []),

  ("game_get_item_extra_text",
   [(store_script_param, ":item_id", 1),
    (store_script_param, ":extra_text_id", 2),
    #(store_script_param, ":item_modifier", 3),

    (try_begin),
      (eq, ":extra_text_id", 0),
      (item_get_slot, reg1, ":item_id", slot_item_difficulty),
      (try_begin),
        (gt, reg1, 0),
        (try_begin),
          (multiplayer_is_server),
          (get_player_agent_no, ":agent_id"),
        (else_try),
          (multiplayer_get_my_player, ":my_player"),
          (player_get_agent_id, ":agent_id", ":my_player"),
        (try_end),
        (agent_get_troop_id, ":troop_id", ":agent_id"),
        (item_get_type, ":item_type", ":item_id"),
        (try_begin),
          (eq, ":item_type", itp_type_bow),
          (set_result_string, "str_requires_power_draw_reg1"),
          (store_skill_level, ":troop_level", "skl_power_draw", ":troop_id"),
        (else_try),
          (eq, ":item_type", itp_type_thrown),
          (set_result_string, "str_requires_power_throw_reg1"),
          (store_skill_level, ":troop_level", "skl_power_throw", ":troop_id"),
        (else_try),
          (eq, ":item_type", itp_type_shield),
          (set_result_string, "str_requires_shield_reg1"),
          (assign, ":troop_level", 0),
        (else_try),
          (eq, ":item_type", itp_type_horse),
          (set_result_string, "str_requires_riding_reg1"),
          (store_skill_level, ":troop_level", "skl_riding", ":troop_id"),
        (else_try),
          (set_result_string, "str_requires_strength_reg1"),
          (store_attribute_level, ":troop_level", ":troop_id", ca_strength),
        (try_end),
        (try_begin),
          (ge, ":troop_level", reg1),
          (set_trigger_result, 0xFF33DD11),
        (else_try),
          (set_trigger_result, 0xFFFF4422),
        (try_end),
      (try_end),
    (else_try),
      (eq, ":extra_text_id", 1),
      (item_get_slot, ":item_gender", ":item_id", slot_item_gender),
      (try_begin),
        (eq, ":item_gender", tf_female),
        (set_result_string, "str_womens_clothes"),
        (try_begin),
          (neg|multiplayer_is_server),
          (multiplayer_get_my_player, ":my_player"),
          (player_get_gender, ":my_gender", ":my_player"),
          (eq, ":my_gender", ":item_gender"),
          (set_trigger_result, 0xFF33DD11),
        (else_try),
          (set_trigger_result, 0xFFFF4422),
        (try_end),
      (try_end),
    (try_end),
    ]),

  ("game_on_disembark", []),
  ("game_context_menu_get_buttons", []),
  ("game_event_context_menu_button_clicked", []),
  ("game_get_skill_modifier_for_troop", []),
  ("game_check_party_sees_party", []),
  ("game_get_party_speed_multiplier", []),

  ("get_random_equipment",
   [(store_script_param, ":begin_item_id", 1),
    (store_script_param, ":end_item_id", 2),

    (assign, ":end_slot", 0),
    (try_for_range, ":item_id", ":begin_item_id", ":end_item_id"),
      (item_slot_eq, ":item_id", slot_item_gender, 0),
      (troop_set_slot, "trp_temp_array", ":end_slot", ":item_id"),
      (val_add, ":end_slot", 1),
    (try_end),
    (store_random_in_range, ":random_slot", 0, ":end_slot"),
    (troop_get_slot, reg0, "trp_temp_array", ":random_slot"),
    ]),

  ("store_profile_troop_equipment",
   [
    (call_script, "script_get_random_equipment", "itm_linen_tunic", "itm_tribal_warrior_outfit"),
    (assign, "$g_profile_troop_body_item", reg0),
    (call_script, "script_get_random_equipment", "itm_sarranid_boots_a", "itm_khergit_leather_boots"),
    (assign, "$g_profile_troop_foot_item", reg0),
    ]),

  ("add_troop_to_cur_tableau_for_profile",
   [(store_script_param, ":troop_no",1),
    (set_fixed_point_multiplier, 100),

    (cur_tableau_clear_override_items),
    (cur_tableau_set_camera_parameters, 1, 4, 6, 10, 10000),

    (init_position, pos5),
    (assign, ":cam_height", 105),
    (assign, ":camera_distance", 380),
    (assign, ":camera_yaw", -15),
    (assign, ":camera_pitch", -18),
    (assign, ":animation", "anim_stand_man"),

    (position_set_z, pos5, ":cam_height"),
    (position_rotate_x, pos5, -90),
    (position_rotate_z, pos5, 180),
    (position_rotate_y, pos5, ":camera_yaw"),
    (position_rotate_x, pos5, ":camera_pitch"),
    (position_move_z, pos5, ":camera_distance", 0),
    (position_move_x, pos5, 5, 0),

    (profile_get_banner_id, ":profile_banner"),
    (try_begin),
      (ge, ":profile_banner", 0),
      (init_position, pos2),
      (val_add, ":profile_banner", banner_meshes_begin),
      (position_set_x, pos2, -175),
      (position_set_y, pos2, -300),
      (position_set_z, pos2, 180),
      (position_rotate_x, pos2, 90),
      (position_rotate_y, pos2, -15),
      (cur_tableau_add_mesh, ":profile_banner", pos2, 0, 0),
    (try_end),

    (troop_clear_inventory, ":troop_no"),
    (troop_add_item, ":troop_no", "$g_profile_troop_body_item"),
    (troop_add_item, ":troop_no", "$g_profile_troop_foot_item"),
    (troop_equip_items, ":troop_no"),

    (init_position, pos2),
    (try_begin),
      (troop_is_hero, ":troop_no"),
      (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
    (else_try),
      (store_mul, ":random_seed", ":troop_no", 126233),
      (val_mod, ":random_seed", 1000),
      (val_add, ":random_seed", 1),
      (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
    (try_end),
    (cur_tableau_set_camera_position, pos5),

    (copy_position, pos8, pos5),
    (position_rotate_x, pos8, -90),
    (position_rotate_z, pos8, 30),
    (position_rotate_x, pos8, -60),
    (cur_tableau_add_sun_light, pos8, 175,150,125),
    ]),

  ("store_command_string",
   [(store_script_param, ":command", 1),
    (store_script_param, reg1, 2),

    (try_begin),
      (is_between, ":command", commands_module_system_begin, commands_module_system_end),
      (store_sub, ":command_string_id", ":command", commands_module_system_begin),
      (store_mod, ":get_or_set", ":command_string_id", 2),
      (val_div, ":command_string_id", 2),
      (val_add, ":command_string_id", commands_module_system_names_begin),
      (str_store_string, s0, ":command_string_id"),
      (try_begin),
        (eq, ":get_or_set", 1),
        (str_store_string, s0, "str_set_s0"),
      (try_end),
      (str_store_string, s0, "str_s0_reg1"),
    (else_try),
      (str_store_string, s0, "str_no_string"),
    (try_end),
    ]),

  ("cf_execute_command",
   [(store_script_param, ":command", 1),
    (store_script_param, ":value", 2),

    (assign, ":error_string_id", 0),
    (try_begin),
      (eq, ":command", command_get_bot_count),
      (assign, ":value", "$g_bot_count"),
    (else_try),
      (eq, ":command", command_set_bot_count),
      (val_max, ":value", 0),
      (assign, "$g_bot_count", ":value"),
      (call_script, "script_check_spawn_bots", -1),
    (else_try),
      (eq, ":command", command_get_round_max_seconds),
      (assign, ":value", "$g_spawn_item_prune_time"),
    (else_try),
      (eq, ":command", command_set_round_max_seconds),
      (val_clamp, ":value", 0, 86401),
      (assign, "$g_spawn_item_prune_time", ":value"),
    (else_try),
      (eq, ":command", command_get_respawn_period),
      (assign, ":value", "$g_respawn_period"),
    (else_try),
      (eq, ":command", command_set_respawn_period),
      (try_begin),
        (is_between, ":value", min_respawn_period, max_respawn_period),
        (assign, "$g_respawn_period", ":value"),
      (else_try),
        (assign, ":error_string_id", "str_invalid_respawn_period"),
      (try_end),
    (else_try),
      (eq, ":command", command_get_maps_voteable),
      (assign, ":value", "$g_maps_voteable"),
    (else_try),
      (eq, ":command", command_set_maps_voteable),
      (val_clamp, ":value", 0, 2),
      (assign, "$g_maps_voteable", ":value"),
    (else_try),
      (eq, ":command", command_get_kick_voteable),
      (assign, ":value", "$g_kick_voteable"),
    (else_try),
      (eq, ":command", command_set_kick_voteable),
      (val_clamp, ":value", 0, 2),
      (assign, "$g_kick_voteable", ":value"),
    (else_try),
      (eq, ":command", command_get_ban_voteable),
      (assign, ":value", "$g_ban_voteable"),
    (else_try),
      (eq, ":command", command_set_ban_voteable),
      (val_clamp, ":value", 0, 2),
      (assign, "$g_ban_voteable", ":value"),
    (else_try),
      (eq, ":command", command_get_valid_vote_ratio),
      (assign, ":value", "$g_valid_vote_ratio"),
    (else_try),
      (eq, ":command", command_set_valid_vote_ratio),
      (val_clamp, ":value", 50, 101),
      (assign, "$g_valid_vote_ratio", ":value"),
    (else_try),
      (eq, ":command", command_get_starting_gold),
      (assign, ":value", "$g_starting_gold_multiplier"),
    (else_try),
      (eq, ":command", command_set_starting_gold),
      (val_clamp, ":value", 0, 10001),
      (assign, "$g_starting_gold_multiplier", ":value"),
    (else_try),
      (eq, ":command", command_get_combat_gold_bonus),
      (assign, ":value", "$g_combat_gold_multiplier"),
    (else_try),
      (eq, ":command", command_set_combat_gold_bonus),
      (val_clamp, ":value", 0, 10001),
      (assign, "$g_combat_gold_multiplier", ":value"),
    (else_try),
      (eq, ":command", command_get_force_default_armor),
      (assign, ":value", "$g_commoner_outlaw_loot"),
    (else_try),
      (eq, ":command", command_set_force_default_armor),
      (val_clamp, ":value", 0, 3),
      (assign, "$g_commoner_outlaw_loot", ":value"),
    (else_try),
      (eq, ":command", command_get_map_time_limit),
      (assign, ":value", "$g_map_time_limit"),
    (else_try),
      (eq, ":command", command_set_map_time_limit),
      (val_clamp, ":value", 5, 40321),
      (assign, "$g_map_time_limit", ":value"),
    (else_try),
      (eq, ":command", command_get_team_point_limit),
      (assign, ":value", "$g_victory_condition"),
    (else_try),
      (eq, ":command", command_set_team_point_limit),
      (val_clamp, ":value", 0, 1441),
      (assign, "$g_victory_condition", ":value"),
    (else_try),
      (eq, ":command", command_get_disallow_ranged_weapons),
      (assign, ":value", "$g_admin_gold_disabled"),
    (else_try),
      (eq, ":command", command_set_disallow_ranged_weapons),
      (val_clamp, ":value", 0, 2),
      (assign, "$g_admin_gold_disabled", ":value"),
    (else_try),
      (eq, ":command", command_get_max_players),
      (server_get_max_num_players, ":value"),
    (else_try),
      (eq, ":command", command_set_max_players),
      (try_begin),
        (is_between, ":value", min_num_players, max_num_players),
        (server_set_max_num_players, ":value"),
      (else_try),
        (assign, ":error_string_id", "str_invalid_max_players"),
      (try_end),
    (else_try),
      (eq, ":command", command_get_ghost_mode),
      (server_get_ghost_mode, ":value"),
    (else_try),
      (eq, ":command", command_set_ghost_mode),
      (val_clamp, ":value", 0, 2),
      (server_set_ghost_mode, ":value"),
    (else_try),
      (eq, ":command", command_get_control_block_direction),
      (server_get_control_block_dir, ":value"),
    (else_try),
      (eq, ":command", command_set_control_block_direction),
      (val_clamp, ":value", 0, 2),
      (server_set_control_block_dir, ":value"),
    (else_try),
      (eq, ":command", command_get_combat_speed),
      (server_get_combat_speed, ":value"),
    (else_try),
      (eq, ":command", command_set_combat_speed),
      (val_clamp, ":value", 0, 5),
      (server_set_combat_speed, ":value"),
    (else_try),
      (eq, ":command", command_get_add_to_game_servers_list),
      (server_get_add_to_game_servers_list, ":value"),
    (else_try),
      (eq, ":command", command_set_add_to_game_servers_list),
      (val_clamp, ":value", 0, 2),
      (server_set_add_to_game_servers_list, ":value"),
    (else_try),
      (eq, ":command", command_get_anti_cheat),
      (server_get_anti_cheat, ":value"),
    (else_try),
      (eq, ":command", command_set_anti_cheat),
      (val_clamp, ":value", 0, 2),
      (server_set_anti_cheat, ":value"),
    (else_try),
      (eq, ":command", command_get_renaming_server_allowed),
      (server_get_renaming_server_allowed, ":value"),
    (else_try),
      (eq, ":command", command_set_renaming_server_allowed),
      (val_clamp, ":value", 0, 2),
      (assign, "$g_renaming_server_allowed", ":value"),
    (else_try),
      (eq, ":command", command_get_changing_game_type_allowed),
      (server_get_changing_game_type_allowed, ":value"),
    (else_try),
      (eq, ":command", command_set_changing_game_type_allowed),
      (val_clamp, ":value", 0, 2),
      (assign, "$g_changing_game_type_allowed", ":value"),
    (else_try),
      (eq, ":command", command_start_map),
      (try_begin),
        (is_between, ":value", scenes_begin, scenes_end),
        (assign, "$g_next_scene", ":value"),
      (else_try),
        (assign, ":error_string_id", "str_invalid_scene"),
      (try_end),
    (else_try),
      (eq, ":command", command_open_admin_panel),
      (start_presentation, "prsnt_game_multiplayer_admin_panel"),
    (else_try),
      (eq, ":command", command_open_game_rules),
      (start_presentation, "prsnt_game_rules"),
    (else_try),
      (eq, ":command", command_set_server_mission_timer),
      (assign, "$g_server_mission_timer_when_player_joined", ":value"),
    (else_try),
      (assign, ":error_string_id", "str_command_not_implemented"),
    (try_end),
    (assign, reg0, ":error_string_id"),
    (assign, reg1, ":value"),
    (eq, ":error_string_id", 0),
    (try_begin),
      (call_script, "script_cf_command_should_update_clients", ":command"),
      (get_max_players, ":max_players"),
      (try_for_range, ":player_id", 1, ":max_players"),
        (player_is_active, ":player_id"),
        (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, ":command", ":value"),
      (try_end),
    (try_end),
    (eq, ":error_string_id", 0),
    ]),

  ("cf_command_should_update_clients",
   [(store_script_param, ":command", 1),

    (is_between, ":command", commands_module_system_begin, commands_module_system_end),
    (this_or_next|eq, ":command", command_set_force_default_armor),
    (this_or_next|eq, ":command", command_set_respawn_period),
    (this_or_next|eq, ":command", command_set_num_bots_voteable),
    (this_or_next|eq, ":command", command_set_maps_voteable),
    (this_or_next|eq, ":command", command_set_factions_voteable),
    (this_or_next|eq, ":command", command_set_kick_voteable),
    (eq, ":command", command_set_ban_voteable),
    ]),

  ("player_return_game_rules",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":admin_request", 2),

    (try_begin),
      (this_or_next|eq, ":admin_request", 0),
      (player_is_admin, ":player_id"),
      (this_or_next|eq, ":admin_request", 0),
      (player_slot_eq, ":player_id", slot_player_admin_no_panel, 0),
      (server_get_max_num_players, ":max_num_players"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_max_players, ":max_num_players"),
      (server_get_anti_cheat, ":anti_cheat"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_anti_cheat, ":anti_cheat"),
      (server_get_ghost_mode, ":ghost_mode"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_ghost_mode, ":ghost_mode"),
      (server_get_control_block_dir, ":control_block_dir"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_control_block_direction, ":control_block_dir"),
      (server_get_combat_speed, ":combat_speed"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_combat_speed, ":combat_speed"),
      (server_get_add_to_game_servers_list, ":add_to_servers_list"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_add_to_game_servers_list, ":add_to_servers_list"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_valid_vote_ratio, "$g_valid_vote_ratio"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_starting_gold, "$g_starting_gold_multiplier"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_combat_gold_bonus, "$g_combat_gold_multiplier"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_force_default_armor, "$g_commoner_outlaw_loot"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_map_time_limit, "$g_map_time_limit"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_team_point_limit, "$g_victory_condition"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_bot_count, "$g_bot_count"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_round_max_seconds, "$g_spawn_item_prune_time"),
      (str_store_server_name, s0),
      (multiplayer_send_string_to_player, ":player_id", server_event_return_server_name, s0),
      (try_begin),
        (eq, ":admin_request", 0),
        (multiplayer_send_int_to_player, ":player_id", server_event_return_game_rules, command_open_game_rules),
      (else_try),
        (server_get_renaming_server_allowed, "$g_renaming_server_allowed"),
        (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_renaming_server_allowed, "$g_renaming_server_allowed"),
        (server_get_changing_game_type_allowed, "$g_changing_game_type_allowed"),
        (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_changing_game_type_allowed, "$g_changing_game_type_allowed"),
        (str_store_server_password, s0),
        (multiplayer_send_string_to_player, ":player_id", server_event_return_password, s0),
        (multiplayer_send_int_to_player, ":player_id", server_event_return_game_rules, command_open_admin_panel),
      (try_end),
    (try_end),
    ]),

  ("initialize_game_rules",
   [(assign, "$g_respawn_period", 5),
    (assign, "$g_maps_voteable", 0),
    (assign, "$g_kick_voteable", 1),
    (assign, "$g_ban_voteable", 1),
    (assign, "$g_valid_vote_ratio", 51),
    (assign, "$g_starting_gold_multiplier", 100),
    (assign, "$g_combat_gold_multiplier", 100),
    (assign, "$g_commoner_outlaw_loot", 0),
    (assign, "$g_map_time_limit", 1440),
    (assign, "$g_victory_condition", 0),
    (assign, "$g_name_server_enabled", 0),
    (assign, "$g_spawn_item_prune_time", 600),
    (troop_set_slot, "trp_serf", slot_troop_ranking, 0),
    (troop_set_slot, "trp_peasant", slot_troop_ranking, 1),
    (troop_set_slot, "trp_militia", slot_troop_ranking, 2),
    (troop_set_slot, "trp_huntsman", slot_troop_ranking, 4),
    (troop_set_slot, "trp_craftsman", slot_troop_ranking, 6),
    (troop_set_slot, "trp_healer", slot_troop_ranking, 8),
    (troop_set_slot, "trp_traveler", slot_troop_ranking, 10),
    (troop_set_slot, "trp_ruffian", slot_troop_ranking, 12),
    (troop_set_slot, "trp_brigand", slot_troop_ranking, 14),
    (troop_set_slot, "trp_mercenary", slot_troop_ranking, 19),
    (troop_set_slot, "trp_footman", slot_troop_ranking, 20),
    (troop_set_slot, "trp_archer", slot_troop_ranking, 21),
    (troop_set_slot, "trp_crossbowman", slot_troop_ranking, 22),
    (troop_set_slot, "trp_lancer", slot_troop_ranking, 23),
    (troop_set_slot, "trp_sailor", slot_troop_ranking, 24),
    (troop_set_slot, "trp_engineer", slot_troop_ranking, 30),
    (troop_set_slot, "trp_doctor", slot_troop_ranking, 35),
    (troop_set_slot, "trp_sergeant", slot_troop_ranking, 40),
    (troop_set_slot, "trp_man_at_arms", slot_troop_ranking, 41),
    (troop_set_slot, "trp_lord", slot_troop_ranking, 99),
    (troop_set_slot, "trp_godlike_hero", slot_troop_ranking, 100),
    ]),

  ("initialize_scene_globals",
   [
    (assign, "$g_game_ended", 0),
    (assign, "$g_victory_condition_time", 0),
    (assign, "$g_spawn_marker_count", 0),
    (assign, "$g_spawned_bot_count", 0),
    (assign, "$g_overflow_gold_value", 0),
    (assign, "$g_loop_player_id", 0),
    (assign, "$g_loop_player_check_outlaw", 0),
    (assign, "$g_loop_player_check_outlaw_time", 0),
    (assign, "$g_loop_agent_last_checked", 0),
    (assign, "$g_loop_agent_check_time", 0),
    (assign, "$g_loop_horse_check", 0),
    (assign, "$g_loop_horse_check_time", 0),
    (assign, "$g_loop_health_check", 0),
    (assign, "$g_loop_health_check_time", 0),
    (troop_set_slot, "trp_ship_array", 0, 0),
    (troop_set_slot, "trp_ship_array", slot_ship_array_collision_props_count, 0),
    (assign, "$g_loop_ship_to_check", 0),
    (assign, "$g_loop_ship_check_time", 0),
    (assign, "$g_ambient_sound_instance_no", 0),
    (assign, "$g_show_inventory_instance_id", 0),
    (faction_set_slot, "fac_1", slot_faction_banner_mesh, "mesh_banner_kingdom_f"),
    (faction_set_slot, "fac_2", slot_faction_banner_mesh, "mesh_banner_kingdom_b"),
    (faction_set_slot, "fac_3", slot_faction_banner_mesh, "mesh_banner_kingdom_a"),
    (faction_set_slot, "fac_4", slot_faction_banner_mesh, "mesh_banner_kingdom_d"),
    (faction_set_slot, "fac_5", slot_faction_banner_mesh, "mesh_banner_kingdom_e"),
    (faction_set_slot, "fac_6", slot_faction_banner_mesh, "mesh_banner_kingdom_c"),
    (faction_set_slot, "fac_7", slot_faction_banner_mesh, "mesh_banner_kingdom_g"),
    (faction_set_slot, "fac_8", slot_faction_banner_mesh, "mesh_banner_a03"),
    (faction_set_name, "fac_1", "str_fac_1_default_name"),
    (faction_set_name, "fac_2", "str_fac_2_default_name"),
    (faction_set_name, "fac_3", "str_fac_3_default_name"),
    (faction_set_name, "fac_4", "str_fac_4_default_name"),
    (faction_set_name, "fac_5", "str_fac_5_default_name"),
    (faction_set_name, "fac_6", "str_fac_6_default_name"),
    (faction_set_name, "fac_7", "str_fac_7_default_name"),
    (faction_set_name, "fac_8", "str_fac_8_default_name"),
    (store_sub, ":slot_relations_end", factions_end, factions_begin),
    (val_add, ":slot_relations_end", slot_faction_relations_begin),
    (try_for_range, ":faction_id", factions_begin, factions_end),
      (faction_set_slot, ":faction_id", slot_faction_is_active, 0),
      (faction_set_slot, ":faction_id", slot_faction_name_is_custom, 0),
      (faction_set_slot, ":faction_id", slot_faction_lord_player_uid, 0),
      (faction_set_slot, ":faction_id", slot_faction_lord_last_seen_time, 0),
      (faction_set_slot, ":faction_id", slot_faction_poll_end_time, 0),
      (try_for_range, ":relations_slot", slot_faction_relations_begin, ":slot_relations_end"),
        (faction_set_slot, ":faction_id", ":relations_slot", 0),
      (try_end),
    (try_end),
    (faction_set_slot, factions_end, slot_faction_poll_end_time, 0),
    (troop_set_slot, "trp_inactive_players_array", slot_player_array_size, 0),
    (troop_set_slot, "trp_last_chat_message", slot_last_chat_message_event_type, 0),
    (troop_set_slot, "trp_last_chat_message", slot_last_chat_message_not_recieved, 0),
    (str_clear, s0),
    (try_for_range, ":chat_overlay_troop_id", chat_overlay_ring_buffer_begin, chat_overlay_ring_buffer_end),
      (troop_set_name, ":chat_overlay_troop_id", s0),
      (troop_set_plural_name, ":chat_overlay_troop_id", s0),
    (try_end),
    (assign, "$g_chat_overlay_ring_buffer_stored", chat_overlay_ring_buffer_begin),
    ]),

  ("preset_message",
   [(store_script_param, "$g_preset_message_string_id", 1),
    (store_script_param, ":flags", 2),
    (store_script_param, "$g_preset_message_value_1", 3),
    (store_script_param, "$g_preset_message_value_2", 4),

    (assign, ":color", ":flags"),
    (val_and, ":color", preset_message_color_mask),
    (try_begin),
      (eq, ":color", preset_message_white),
      (assign, "$g_preset_message_color", 0xFFFFFFFF),
    (else_try),
      (eq, ":color", preset_message_red),
      (assign, "$g_preset_message_color", 0xFFFF4422),
    (else_try),
      (eq, ":color", preset_message_green),
      (assign, "$g_preset_message_color", 0xFF33DD11),
    (else_try),
      (eq, ":color", preset_message_blue),
      (assign, "$g_preset_message_color", 0xFFFF4422),
    (else_try),
      (eq, ":color", preset_message_yellow),
      (assign, "$g_preset_message_color", 0xFFFFEE11),
    (try_end),

    (assign, "$g_preset_message_type", ":flags"),
    (val_and, "$g_preset_message_type", preset_message_type_mask),
    (try_begin),
      (eq, "$g_preset_message_type", preset_message_read_object),
      (start_presentation, "prsnt_read_object"),
    (else_try),
      (assign, "$g_preset_message_params", ":flags"),
      (val_and, "$g_preset_message_params", preset_message_params_mask),

      # keep the same as in prsnt_preset_message_* - unfortunately scripts and presentations are not run in order
      (try_begin),
        (eq, "$g_preset_message_params", preset_message_item),
        (is_between, "$g_preset_message_value_1", 1, all_items_end),
        (str_store_item_name, s1, "$g_preset_message_value_1"),
      (else_try),
        (eq, "$g_preset_message_params", preset_message_agent),
        (agent_is_active, "$g_preset_message_value_1"),
        (str_store_agent_name, s1, "$g_preset_message_value_1"),
      (else_try),
        (eq, "$g_preset_message_params", preset_message_player),
        (player_is_active, "$g_preset_message_value_1"),
        (str_store_player_username, s1, "$g_preset_message_value_1"),
      (else_try),
        (is_between, "$g_preset_message_params", preset_message_faction, preset_message_faction_castle + 1),
        (is_between, "$g_preset_message_value_1", factions_begin, factions_end),
        (str_store_faction_name, s1, "$g_preset_message_value_1"),
        (faction_get_color, "$g_preset_message_color", "$g_preset_message_value_1"),
        (eq, "$g_preset_message_params", preset_message_faction_castle),
        (call_script, "script_str_store_castle_name", s2, "$g_preset_message_value_2"),
      (else_try),
        (assign, reg1, "$g_preset_message_value_1"),
        (assign, reg2, "$g_preset_message_value_2"),
      (try_end),
      # end keep same

      (assign, ":log", ":flags"),
      (val_and, ":log", preset_message_log),
      (try_begin),
        (eq, ":log", preset_message_log),
        (display_message, "$g_preset_message_string_id", "$g_preset_message_color"),
      (try_end),

      (assign, ":fail_sound", ":flags"),
      (val_and, ":fail_sound", preset_message_fail_sound),
      (try_begin),
        (eq, ":fail_sound", preset_message_fail_sound),
        (play_sound, "snd_failure"),
      (try_end),

      (try_begin),
        (eq, "$g_preset_message_display_enabled", 0),
      (else_try),
        (eq, "$g_preset_message_type", preset_message_small),
        (start_presentation, "prsnt_preset_message_small"),
      (else_try),
        (eq, "$g_preset_message_type", preset_message_big),
        (start_presentation, "prsnt_preset_message_big"),
      (try_end),
    (try_end),
    ]),

  ("chat_event_increment",
   [(store_script_param, reg0, 1),

    (val_and, reg0, net_chat_event_mask),
    (try_begin),
      (this_or_next|ge, reg0, client_event_chat_message_end - 1),
      (lt, reg0, client_event_chat_message_begin),
      (assign, reg0, client_event_chat_message_begin),
    (else_try),
      (val_add, reg0, 1),
    (try_end),
    ]),

  ("cf_chat_event_is_new",
   [(store_script_param, ":event", 1),
    (store_script_param, ":player_id", 2),

    (val_and, ":event", net_chat_event_mask),
    (player_get_slot, ":next_event", ":player_id", slot_player_next_chat_event_type),
    (val_and, ":next_event", net_chat_event_mask),
    (try_begin),
      (eq, ":event", ":next_event"),
      (assign, ":continue", 1),
      (assign, ":type_valid", 1),
    (else_try),
      (assign, ":type_valid", 0),
      (store_sub, ":event_difference", ":event", ":next_event"),
      (try_begin),
        (lt, ":event_difference", 0),
        (val_add, ":event_difference", client_event_chat_message_end - client_event_chat_message_begin),
      (try_end),
      (lt, ":event_difference", (client_event_chat_message_end - client_event_chat_message_begin) / 2),
      (assign, ":continue", 1),
    (else_try),
      (assign, ":continue", 0),
    (try_end),
    (assign, reg0, ":type_valid"),
    (eq, ":continue", 1),
    ]),

  ("chat_overlay_add_to_local_buffer",
   [(store_script_param, ":color", 1),

    (val_add, "$g_chat_overlay_local_buffer_stored", 1),
    (try_begin),
      (neg|is_between, "$g_chat_overlay_local_buffer_stored", chat_overlay_ring_buffer_begin, chat_overlay_ring_buffer_end),
      (assign, "$g_chat_overlay_local_buffer_stored", chat_overlay_ring_buffer_begin),
    (try_end),
    (troop_set_name, "$g_chat_overlay_local_buffer_stored", s0),
    (troop_set_slot, "$g_chat_overlay_local_buffer_stored", slot_chat_overlay_local_color, ":color"),
    ]),

  ("cf_no_input_presentation_active",
   [(neg|is_presentation_active, "prsnt_chat_box"),
    (neg|is_presentation_active, "prsnt_show_inventory"),
    (neg|is_presentation_active, "prsnt_faction_banner_selection"),
    (neg|is_presentation_active, "prsnt_money_bag"),
    (neg|is_presentation_active, "prsnt_escape_menu"),
    (neg|is_presentation_active, "prsnt_poll_menu"),
    (neg|is_presentation_active, "prsnt_list_players"),
    (neg|is_presentation_active, "prsnt_list_scenes"),
    (neg|is_presentation_active, "prsnt_list_factions"),
    (neg|is_presentation_active, "prsnt_admin_menu"),
    (neg|is_presentation_active, "prsnt_faction_admin_menu"),
    (neg|is_presentation_active, "prsnt_game_multiplayer_admin_panel"),
    (neg|is_presentation_active, "prsnt_admin_item_select"),
    ]),

  ("initialize_banner_info",
   [
    (troop_set_slot, "trp_banner_background_color_array", 0, 0xFFAAAA99),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a01", 0xFF8f4531),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a02", 0xFFd9d7d1),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a03", 0xFF373736),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a04", 0xFFa48b28),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a05", 0xFF497735),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a06", 0xFF82362d),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a07", 0xFF793329),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a08", 0xFF262521),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a09", 0xFFd9dad1),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a10", 0xFF524563),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a11", 0xFF91312c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a12", 0xFFafa231),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a13", 0xFF706d3c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a14", 0xFFd6d3ce),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a15", 0xFFd6d3ce),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a16", 0xFF394584),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a17", 0xFF42662e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a18", 0xFFdfded6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a19", 0xFF292724),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a20", 0xFF58611b),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_a21", 0xFF313a67),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b01", 0xFF9c924a),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b02", 0xFF998b39),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b03", 0xFF365168),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b04", 0xFFd6d3ce),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b05", 0xFF94a642),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b06", 0xFF944131),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b07", 0xFF893b34),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b08", 0xFF425510),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b09", 0xFF94452e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b10", 0xFF475a94),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b11", 0xFFd1b231),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b12", 0xFFe1e2df),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b13", 0xFF997c1e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b14", 0xFFc6b74d),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b15", 0xFFad9a18),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b16", 0xFF212421),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b17", 0xFF8c2021),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b18", 0xFF4d7136),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b19", 0xFF395d84),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b20", 0xFF527539),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_b21", 0xFF9c3c39),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c01", 0xFF42518c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c02", 0xFFa46a2c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c03", 0xFF9f5141),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c04", 0xFF2c6189),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c05", 0xFF556421),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c06", 0xFF9d621e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c07", 0xFFdeded6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c08", 0xFF6e4891),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c09", 0xFF313031),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c10", 0xFFdedfd9),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c11", 0xFF865a29),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c12", 0xFF8c3821),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c13", 0xFF524273),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c14", 0xFFd1cec6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c15", 0xFF604283),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c16", 0xFF395584),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c17", 0xFF6b4139),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c18", 0xFF47620d),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c19", 0xFFd6d7d6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c20", 0xFF2e2f2c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_c21", 0xFF313031),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d01", 0xFF7e3f2e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d02", 0xFF343434),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d03", 0xFF3c496b),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d04", 0xFFd9d8d1),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d05", 0xFF99823c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d06", 0xFF9f822e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d07", 0xFF393839),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d08", 0xFFa54931),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d09", 0xFFdfdcd6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d10", 0xFF9f4a36),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d11", 0xFF8c7521),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d12", 0xFF9f4631),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d13", 0xFF793324),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d14", 0xFF395076),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d15", 0xFF2c2b2c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d16", 0xFF657121),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d17", 0xFF7e3121),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d18", 0xFF76512e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d19", 0xFFe7e3de),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d20", 0xFF947921),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_d21", 0xFF4d7b7c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e01", 0xFF343331),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e02", 0xFFa74d36),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e03", 0xFFe7e3de),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e04", 0xFFd6d8ce),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e05", 0xFF3e4d67),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e06", 0xFF9f842e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e07", 0xFF4d6994),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e08", 0xFF4a6118),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e09", 0xFF943c29),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e10", 0xFF394479),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e11", 0xFF343331),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e12", 0xFF3f4d5d),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e13", 0xFF4a6489),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e14", 0xFF313031),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e15", 0xFFd6d7ce),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e16", 0xFFc69e00),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e17", 0xFF638e52),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e18", 0xFFdcdbd3),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e19", 0xFFdbdcd3),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e20", 0xFF843831),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_e21", 0xFF8c3421),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f01", 0xFF8f4631),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f02", 0xFF672a29),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f03", 0xFF4f6d86),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f04", 0xFF978021),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f05", 0xFF5d6c29),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f06", 0xFFa55d4a),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f07", 0xFF315184),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f08", 0xFF3f4e9d),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f09", 0xFF525918),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f10", 0xFF52496b),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f11", 0xFF00928c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f12", 0xFF4a699c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f13", 0xFF76713f),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f14", 0xFF8f2e2c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f15", 0xFF60492e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f16", 0xFF735531),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f17", 0xFF315d84),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f18", 0xFF393c39),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f19", 0xFF42824a),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f20", 0xFF733829),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_f21", 0xFF9c5542),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g01", 0xFFc39d31),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g02", 0xFFcbb670),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g03", 0xFF394a18),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g04", 0xFF372708),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g05", 0xFF9a6810),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g06", 0xFFb27910),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g07", 0xFF8c8621),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g08", 0xFF975a03),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g09", 0xFF2c2924),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g10", 0xFFaa962c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g11", 0xFFa2822e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g12", 0xFF7b8a8c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g13", 0xFF3c0908),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g14", 0xFF24092c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g15", 0xFF671e14),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g16", 0xFF103042),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g17", 0xFF4a4500),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g18", 0xFF703324),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g19", 0xFF24293c),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g20", 0xFF5d6966),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_g21", 0xFF521c08),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h01", 0xFFbdae39),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h02", 0xFF5d689f),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h03", 0xFF526518),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h04", 0xFFdedede),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h05", 0xFFdedede),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h06", 0xFF38383a),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h07", 0xFF3a4273),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h08", 0xFF272727),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h09", 0xFFd82929),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h10", 0xFF313031),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h11", 0xFF9e3e35),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h12", 0xFF831119),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h13", 0xFF458fd6),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h14", 0xFFffffff),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h15", 0xFF586617),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h16", 0xFFbe3630),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h17", 0xFFbdbaad),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h18", 0xFF293052),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h19", 0xFFbdbaad),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_h20", 0xFF313031),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_a", 0xFF316184),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_b", 0xFFd6d3bd),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_c", 0xFF633039),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_d", 0xFF3f6c2e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_e", 0xFFc6a64a),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_f", 0xFF5a2421),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banner_kingdom_g", 0xFF86411e),
    (troop_set_slot, "trp_banner_background_color_array", "mesh_banners_default_a", 0xFF242424),
    ]),

  ("item_set_banner",
   [(store_script_param, ":tableau_id", 1),
    (store_script_param, ":agent_id", 2),
    #(store_script_param, ":troop_id", 3),

    (try_begin),
      (agent_is_active, ":agent_id"),
      (agent_get_player_id, ":player_id", ":agent_id"),
      (player_is_active, ":player_id"),
      (player_get_slot, ":player_faction_id", ":player_id", slot_player_faction_id),
      (ge, ":player_faction_id", castle_factions_begin),
      (faction_get_slot, ":banner_mesh", ":player_faction_id", slot_faction_banner_mesh),
      (gt, ":banner_mesh", 0),
    (else_try),
      (assign, ":banner_mesh", 0),
    (try_end),
    (cur_item_set_tableau_material, ":tableau_id", ":banner_mesh"),
    ]),

  ("cf_add_item_to_troop_equipment_slots",
   [(store_script_param, ":troop_id", 1),
    (store_script_param, ":item_id", 2),

    (item_get_type, ":item_type", ":item_id"),
    (try_begin),
      (eq, ":item_type", itp_type_one_handed_wpn),
      (assign, ":equipment_slot_begin", slot_troop_equipment_one_hand_begin),
    (else_try),
      (is_between, ":item_type", itp_type_two_handed_wpn, itp_type_polearm + 1),
      (assign, ":equipment_slot_begin", slot_troop_equipment_two_hand_begin),
    (else_try),
      (is_between, ":item_type", itp_type_bow, itp_type_thrown + 1),
      (assign, ":equipment_slot_begin", slot_troop_equipment_ranged_begin),
    (else_try),
      (is_between, ":item_type", itp_type_arrows, itp_type_bolts + 1),
      (assign, ":equipment_slot_begin", slot_troop_equipment_ammo_begin),
    (else_try),
      (eq, ":item_type", itp_type_shield),
      (assign, ":equipment_slot_begin", slot_troop_equipment_shield_begin),
    (else_try),
      (eq, ":item_type", itp_type_head_armor),
      (assign, ":equipment_slot_begin", slot_troop_equipment_head_begin),
    (else_try),
      (eq, ":item_type", itp_type_body_armor),
      (assign, ":equipment_slot_begin", slot_troop_equipment_body_begin),
    (else_try),
      (eq, ":item_type", itp_type_foot_armor),
      (assign, ":equipment_slot_begin", slot_troop_equipment_foot_begin),
    (else_try),
      (eq, ":item_type", itp_type_hand_armor),
      (assign, ":equipment_slot_begin", slot_troop_equipment_hand_begin),
    (else_try),
      (eq, ":item_type", itp_type_horse),
      (assign, ":equipment_slot_begin", slot_troop_equipment_horse_begin),
    (else_try),
      (assign, ":equipment_slot_begin", -1),
    (try_end),
    (neq, ":equipment_slot_begin", -1),

    (troop_get_slot, ":equipment_slot_count", ":troop_id", ":equipment_slot_begin"),
    (lt, ":equipment_slot_count", troop_slot_count_per_equipment_type - 1),
    (val_add, ":equipment_slot_count", 1),
    (troop_set_slot, ":troop_id", ":equipment_slot_begin", ":equipment_slot_count"),
    (val_add, ":equipment_slot_begin", ":equipment_slot_count"),
    (troop_set_slot, ":troop_id", ":equipment_slot_begin", ":item_id"),
    ]),

  ("initialize_troop_equipment_slots",
   [
    (try_begin),
      (multiplayer_is_server),
      (try_for_range, ":troop_id", playable_troops_begin, playable_troops_end),
        (troop_get_inventory_capacity, ":capacity", ":troop_id"),
        (try_for_range, ":inv_slot", 0, ":capacity"),
          (troop_get_inventory_slot, ":item_id", ":troop_id", ":inv_slot"),
          (gt, ":item_id", 0),
          (call_script, "script_cf_add_item_to_troop_equipment_slots", ":troop_id", ":item_id"),
        (try_end),
      (try_end),
    (try_end),
    ]),

  ("cf_troop_get_random_equipment",
   [(store_script_param, ":troop_id", 1),
    (store_script_param, ":slot_begin", 2),

    (troop_get_slot, ":item_count", ":troop_id", ":slot_begin"),
    (gt, ":item_count", 0),
    (val_add, ":slot_begin", 1),
    (store_add, ":slot_end", ":slot_begin", ":item_count"),
    (store_random_in_range, ":random_slot", ":slot_begin", ":slot_end"),
    (troop_get_slot, reg0, ":troop_id", ":random_slot"),
    ]),

  ("cf_player_add_default_troop_item",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":equip_slot", 2),
    (store_script_param, ":troop_id", 3),
    (store_script_param, ":troop_slot", 4),

    (store_add, ":player_slot", ":equip_slot", slot_player_equip_item_0),
    (player_get_slot, ":existing_item_id", ":player_id", ":player_slot"),
    (lt, ":existing_item_id", all_items_begin),
    (call_script, "script_cf_troop_get_random_equipment", ":troop_id", ":troop_slot"),
    (val_mul, reg0, -1),
    (player_set_slot, ":player_id", ":player_slot", reg0),
    ]),

  ("player_add_default_troop_items",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":troop_id", 2),

    (assign, ":free_slots", 0),
    (assign, ":free_slots_begin", slot_player_equip_end),
    (try_for_range, ":player_slot", slot_player_equip_item_0, slot_player_equip_head),
      (player_get_slot, ":existing_item_id", ":player_id", ":player_slot"),
      (lt, ":existing_item_id", all_items_begin),
      (val_min, ":free_slots_begin", ":player_slot"),
      (val_add, ":free_slots", 1),
    (try_end),
    (assign, ":ranged_count", 0),
    (try_begin),
      (ge, ":free_slots", 2),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_ranged_begin),
      (assign, ":ranged_item_id", reg0),
      (item_get_type, ":ranged_item_type", ":ranged_item_id"),
      (try_begin),
        (eq, ":ranged_item_type", itp_type_thrown),
        (assign, ":ranged_count", 1),
      (else_try),
        (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_ammo_begin),
        (assign, ":ammo_item_id", reg0),
        (val_sub, ":ranged_item_type", itp_type_bow - itp_type_arrows),
        (assign, ":ammo_slot_end", slot_troop_equipment_ammo_begin + troop_slot_count_per_equipment_type + 1),
        (try_for_range, ":ammo_slot", slot_troop_equipment_ammo_begin + 1, ":ammo_slot_end"),
          (item_get_type, ":ammo_item_type", ":ammo_item_id"),
          (try_begin),
            (eq, ":ammo_item_type", ":ranged_item_type"),
            (assign, ":ammo_slot_end", -1),
          (else_try),
            (troop_get_slot, ":ammo_item_id", ":troop_id", ":ammo_slot"),
          (try_end),
        (try_end),
        (try_begin),
          (eq, ":ammo_slot_end", -1),
          (assign, ":ranged_count", 2),
        (try_end),
      (try_end),
    (try_end),
    (store_sub, ":free_melee_slots", ":free_slots", ":ranged_count"),
    (assign, ":one_hand_added", 0),
    (assign, ":shield_added", 0),
    (assign, ":two_hand_added", 0),
    (assign, ":two_hand_item_id", 0),
    (assign, ":ranged_added", 0),
    (assign, ":ammo_added", 0),
    (try_for_range, ":slot_counter", 0, ":free_slots"),
      (try_begin),
        (lt, ":slot_counter", ":free_melee_slots"),
        (eq, ":one_hand_added", 0),
        (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_one_hand_begin),
        (val_add, ":one_hand_added", 1),
      (else_try),
        (lt, ":slot_counter", ":free_melee_slots"),
        (eq, ":shield_added", 0),
        (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_shield_begin),
        (val_add, ":shield_added", 1),
      (else_try),
        (lt, ":slot_counter", ":free_melee_slots"),
        (le, ":two_hand_added", 1),
        (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_two_hand_begin),
        (neq, reg0, ":two_hand_item_id"),
        (val_add, ":two_hand_added", 1),
        (assign, ":two_hand_item_id", reg0),
      (else_try),
        (ge, ":ranged_count", 1),
        (eq, ":ranged_added", 0),
        (assign, reg0, ":ranged_item_id"),
        (val_add, ":ranged_added", 1),
      (else_try),
        (ge, ":ranged_count", 2),
        (eq, ":ammo_added", 0),
        (assign, reg0, ":ammo_item_id"),
        (val_add, ":ammo_added", 1),
      (else_try),
        (assign, ":free_slots", -1),
      (try_end),
      (gt, ":free_slots", -1),
      (val_mul, reg0, -1),
      (player_set_slot, ":player_id", ":free_slots_begin", reg0),
      (val_add, ":free_slots_begin", 1),
      (assign, ":free_slots_end", slot_player_equip_head),
      (try_for_range, ":next_free_slot", ":free_slots_begin", ":free_slots_end"),
        (player_get_slot, ":existing_item_id", ":player_id", ":next_free_slot"),
        (lt, ":existing_item_id", all_items_begin),
        (assign, ":free_slots_begin", ":next_free_slot"),
        (assign, ":free_slots_end", -1),
      (try_end),
      (try_begin),
        (neq, ":free_slots_end", -1),
        (assign, ":free_slots", -1),
      (try_end),
    (try_end),
    (try_begin),
      (call_script, "script_cf_player_add_default_troop_item", ":player_id", ek_horse, ":troop_id", slot_troop_equipment_horse_begin),
    (try_end),
    ]),

  ("player_add_default_troop_armor",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":troop_id", 2),

    (assign, ":troop_slot", slot_troop_equipment_head_begin),
    (assign, ":player_slot", slot_player_equip_head),
    (try_for_range, ":equip_slot", ek_head, ek_gloves + 1),
      (try_begin),
        (call_script, "script_cf_player_add_default_troop_item", ":player_id", ":equip_slot", ":troop_id", ":troop_slot"),
      (try_end),
      (val_add, ":troop_slot", troop_slot_count_per_equipment_type),
      (val_add, ":player_slot", 1),
    (try_end),
    ]),

  ("set_random_spawn_position",
   [(store_script_param, ":range", 1),

    (store_mul, ":negative_range", ":range", -1),
    (init_position, pos10),
    (position_copy_origin, pos10, pos1),
    (store_random_in_range, ":offset", ":negative_range", ":range"),
    (position_move_x, pos10, ":offset"),
    (store_random_in_range, ":offset", ":negative_range", ":range"),
    (position_move_y, pos10, ":offset"),
    (store_random_in_range, ":offset", 0, 360),
    (position_rotate_z, pos10, ":offset"),
    (position_set_z_to_ground_level, pos10),
    (set_spawn_position, pos10),
    ]),

  ("player_add_equipped_items",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":troop_id", 2),

    (player_get_agent_id, ":agent_id", ":player_id"),
    (try_begin),
      (agent_is_active, ":agent_id"),
      (agent_is_alive, ":agent_id"),
      (agent_get_position, pos1, ":agent_id"),
      (assign, ":player_slot", slot_player_equip_item_0),
      (try_for_range, ":equip_slot", ek_item_0, ek_item_3 + 1),
        (assign, ":store_item_id", 0),
        (assign, ":store_item_ammo", 0),
        (agent_get_item_slot, ":item_id", ":agent_id", ":equip_slot"),
        (try_begin),
          (ge, ":item_id", all_items_begin),
          (item_get_type, ":item_type", ":item_id"),
          (try_begin),
            (neq, ":item_type", itp_type_arrows),
            (neq, ":item_type", itp_type_bolts),
            (neq, ":item_type", itp_type_thrown),
            (assign, ":max_ammo", 0),
            (assign, ":ammo", 0),
          (else_try),
            (item_get_slot, ":max_ammo", ":item_id", slot_item_max_ammo),
            (agent_get_ammo_for_slot, ":ammo", ":agent_id", ":equip_slot"),
          (try_end),
          (try_begin),
            (call_script, "script_cf_check_troop_can_equip_item", ":troop_id", ":item_id"),
            (try_begin),
              (eq, ":max_ammo", 0),
              (assign, ":store_item_id", ":item_id"),
            (else_try),
              (gt, ":ammo", 0),
              (assign, ":store_item_id", ":item_id"),
              (assign, ":store_item_ammo", ":ammo"),
            (try_end),
          (else_try),
            (ge, ":ammo", ":max_ammo"),
            (call_script, "script_set_random_spawn_position", 50),
            (spawn_item, ":item_id", 0, "$g_spawn_item_prune_time"),
            (call_script, "script_check_on_item_dropped", ":agent_id", ":item_id", reg0, 0),
          (try_end),
        (try_end),
        (player_set_slot, ":player_id", ":player_slot", ":store_item_id"),
        (store_add, ":ammo_slot", ":equip_slot", slot_player_equip_item_0_ammo),
        (player_set_slot, ":player_id", ":ammo_slot", ":store_item_ammo"),
        (val_add, ":player_slot", 1),
      (try_end),
      (try_begin),
        (agent_get_horse, ":horse_agent_id", ":agent_id"),
        (gt, ":horse_agent_id", -1),
        (agent_get_item_id, ":horse_item_id", ":horse_agent_id"),
        (store_agent_hit_points, ":hit_points", ":horse_agent_id", 1),
        (init_position, pos2),
        (position_move_x, pos2, 50),
        (position_transform_position_to_parent, pos3, pos1, pos2),
        (position_set_z_to_ground_level, pos3),
        (set_spawn_position, pos3),
        (spawn_horse, ":horse_item_id"),
        (agent_set_hit_points, reg0, ":hit_points", 1),
      (try_end),
      (assign, ":player_slot", slot_player_equip_head),
      (try_for_range, ":equip_slot", ek_head, ek_gloves + 1),
        (player_get_slot, ":item_id", ":player_id", ":player_slot"),
        (try_begin),
          (ge, ":item_id", all_items_begin),
          (try_begin),
            (call_script, "script_cf_check_troop_can_equip_item", ":troop_id", ":item_id"),
          (else_try),
            (player_set_slot, ":player_id", ":player_slot", 0),
          (try_end),
        (try_end),
        (val_add, ":player_slot", 1),
      (try_end),
    (try_end),
    (call_script, "script_player_add_default_troop_items", ":player_id", ":troop_id"),
    (call_script, "script_player_add_default_troop_armor", ":player_id", ":troop_id"),
    ]),

  ("player_add_spawn_items",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":add_weapons", 2),

    (assign, ":player_slot", slot_player_equip_item_0),
    (try_for_range, ":equip_slot", ek_item_0, ek_horse + 1),
      (player_get_slot, ":item_id", ":player_id", ":player_slot"),
      (val_abs, ":item_id"),
      (try_begin),
        (ge, ":item_id", all_items_begin),
        (item_get_type, ":item_type", ":item_id"),
        (this_or_next|eq, ":add_weapons", 1),
        (this_or_next|is_between, ":item_type", itp_type_head_armor, itp_type_hand_armor + 1),
        (eq, ":item_type", itp_type_shield),
        (player_add_spawn_item, ":player_id", ":equip_slot", ":item_id"),
      (try_end),
      (val_add, ":player_slot", 1),
    (try_end),
    ]),

  ("player_equip_stored_default_items",
   [(store_script_param, ":player_id", 1),

    (player_get_agent_id, ":agent_id", ":player_id"),
    (try_for_range, ":player_slot", slot_player_equip_item_0, slot_player_equip_item_3 + 1),
      (player_get_slot, ":item_id", ":player_id", ":player_slot"),
      (lt, ":item_id", 0),
      (val_abs, ":item_id"),
      (item_get_type, ":item_type", ":item_id"),
      (neq, ":item_type", itp_type_shield),
      (agent_equip_item, ":agent_id", ":item_id"),
    (try_end),
    ]),

  ("player_set_stored_ammo_counts",
   [(store_script_param, ":player_id", 1),

    (player_get_agent_id, ":agent_id", ":player_id"),
    (try_for_range, ":player_slot", slot_player_equip_item_0, slot_player_equip_item_3 + 1),
      (player_get_slot, ":item_id", ":player_id", ":player_slot"),
      (ge, ":item_id", all_items_begin),
      (store_add, ":ammo_slot", ":player_slot", slot_player_equip_item_0_ammo - slot_player_equip_item_0),
      (player_get_slot, ":item_ammo", ":player_id", ":ammo_slot"),
      (gt, ":item_ammo", 0),
      (assign, ":loop_end", slot_player_equip_item_3 + 1),
      (try_for_range, ":other_player_slot", slot_player_equip_item_0, ":loop_end"),
        (player_slot_eq, ":player_id", ":other_player_slot", ":item_id"),
        (try_begin),
          (lt, ":other_player_slot", ":player_slot"),
          (assign, ":loop_end", -1),
        (else_try),
          (gt, ":other_player_slot", ":player_slot"),
          (store_add, ":ammo_slot", ":other_player_slot", slot_player_equip_item_0_ammo - slot_player_equip_item_0),
          (player_get_slot, ":slot_ammo", ":player_id", ":ammo_slot"),
          (gt, ":slot_ammo", 0),
          (val_add, ":item_ammo", ":slot_ammo"),
        (try_end),
      (try_end),
      (neq, ":loop_end", -1),
      (gt, ":item_ammo", 0),
      (agent_set_ammo, ":agent_id", ":item_id", ":item_ammo"),
    (try_end),
    ]),

  ("player_get_spawn_point",
   [(store_script_param, ":player_id", 1),

    (player_get_slot, ":faction_id", ":player_id", slot_player_faction_id),
    (player_get_slot, ":spawn_point", ":player_id", slot_player_requested_spawn_point),
    (player_set_slot, ":player_id", slot_player_requested_spawn_point, 0),
    (try_begin),
      (gt, ":spawn_point", 0),
      (val_sub, ":spawn_point", 1),
      (try_begin),
        (is_between, ":faction_id", castle_factions_begin, factions_end),
        (store_mod, ":castle_spawn_no", ":spawn_point", 10),
        (is_between, ":castle_spawn_no", 0, 5),
        (store_div, ":castle_no", ":spawn_point", 10),
        (val_sub, ":castle_no", castle_factions_begin),
        (call_script, "script_cf_castle_is_active", ":castle_no"),
        (troop_slot_eq, "trp_mission_data", ":castle_no", ":faction_id"),
      (else_try),
        (is_between, ":faction_id", factions_begin, castle_factions_begin),
        (is_between, ":spawn_point", 0, 5),
        (store_mul, ":entry_point_begin", ":faction_id", 10),
        (val_add, ":spawn_point", ":entry_point_begin"),
      (else_try),
        (assign, ":spawn_point", -1),
      (try_end),
      (gt, ":spawn_point", -1),
    (else_try),
      (try_begin),
        (is_between, ":faction_id", castle_factions_begin, factions_end),
        (assign, ":owned_castles", 0),
        (assign, ":temp_slot", 0),
        (try_for_range, ":castle_no", slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
          (troop_get_slot, ":owner_faction", "trp_mission_data", ":castle_no"),
          (eq, ":owner_faction", ":faction_id"),
          (call_script, "script_cf_castle_is_active", ":castle_no"),
          (troop_set_slot, "trp_temp_array", ":temp_slot", ":castle_no"),
          (val_add, ":owned_castles", 1),
          (val_add, ":temp_slot", 1),
        (try_end),
        (gt, ":owned_castles", 0),
        (store_random_in_range, ":random_slot", 0, ":owned_castles"),
        (troop_get_slot, ":entry_point_begin", "trp_temp_array", ":random_slot"),
        (val_add, ":entry_point_begin", castle_factions_begin),
        (val_mul, ":entry_point_begin", 10),
      (else_try),
        (is_between, ":faction_id", factions_begin, castle_factions_begin),
        (store_mul, ":entry_point_begin", ":faction_id", 10),
      (else_try),
        (assign, ":entry_point_begin", 0),
      (try_end),
      (store_add, ":entry_point_end", ":entry_point_begin", 5),
      (store_random_in_range, ":spawn_point", ":entry_point_begin", ":entry_point_end"),
    (try_end),
    (assign, reg0, ":spawn_point"),
    ]),

  ("player_respawn_in_place",
   [(store_script_param, ":player_id", 1),

    (player_get_agent_id, ":agent_id", ":player_id"),
    (store_agent_hit_points, ":hit_points", ":agent_id", 1),
    (player_set_slot, ":player_id", slot_player_spawn_hit_points, ":hit_points"),
    (agent_get_slot, ":food_amount", ":agent_id", slot_agent_food_amount),
    (player_set_slot, ":player_id", slot_player_spawn_food_amount, ":food_amount"),
    (multiplayer_send_3_int_to_player, ":player_id", server_event_player_set_slot, ":player_id", slot_player_spawn_food_amount, ":food_amount"),
    (agent_get_position, pos1, ":agent_id"),
    (try_begin),
      (ge, ":player_id", "$g_spawn_marker_count"),
      (assign, ":start_count", "$g_spawn_marker_count"),
      (server_get_max_num_players, "$g_spawn_marker_count"),
      (val_add, "$g_spawn_marker_count", 1),
      (try_begin),
        (ge, ":player_id", "$g_spawn_marker_count"),
        (store_add, "$g_spawn_marker_count", ":player_id", 1),
      (try_end),
      (set_spawn_position, pos1),
      (try_for_range, ":unused", ":start_count", "$g_spawn_marker_count"),
        (spawn_scene_prop, "spr_code_spawn_marker"),
      (try_end),
    (try_end),
    (try_begin),
      (scene_prop_get_instance, ":instance_id", "spr_code_spawn_marker", ":player_id"),
      (prop_instance_set_position, ":instance_id", pos1, 1),
    (try_end),
    (player_set_slot, ":player_id", slot_player_spawn_state, player_spawn_state_at_marker),
    (agent_fade_out, ":agent_id"),
    (call_script, "script_player_get_spawn_point", ":player_id"),
    (player_spawn_new_agent, ":player_id", reg0),
    ]),

  ("cf_player_check_spawn_agent",
   [(store_script_param, ":player_id", 1),

    (assign, ":spawn", 0),
    (player_get_slot, ":spawn_state", ":player_id", slot_player_spawn_state),
    (try_begin),
      (eq, ":spawn_state", player_spawn_state_dead),
      (player_get_team_no, ":team_no", ":player_id"),
      (try_begin),
        (eq, ":team_no", team_spectators),
      (else_try),
        (player_get_agent_id, ":agent_id", ":player_id"),
        (neg|agent_is_active, ":agent_id"),
        (assign, ":spawn", 1),
      (else_try),
        (agent_is_alive, ":agent_id"),
        (player_set_slot, ":player_id", slot_player_spawn_state, player_spawn_state_alive),
      (else_try),
        (agent_get_time_elapsed_since_removed, ":elapsed_time", ":agent_id"),
        (gt, ":elapsed_time", "$g_respawn_period"),
        (assign, ":spawn", 1),
      (try_end),
      (try_begin),
        (eq, ":spawn", 1),
        (neg|player_is_busy_with_menus, ":player_id"),
        (player_get_troop_id, ":troop_id", ":player_id"),
        (is_between, ":troop_id", playable_troops_begin, playable_troops_end),
        (try_begin),
          (call_script, "script_cf_player_can_use_troop", ":player_id", ":troop_id"),
        (else_try),
          (player_get_slot, ":troop_id", ":player_id", slot_player_non_lord_troop_id),
          (is_between, ":troop_id", playable_troops_begin, playable_troops_end),
          (call_script, "script_cf_player_can_use_troop", ":player_id", ":troop_id"),
          (player_set_troop_id, ":player_id", ":troop_id"),
        (else_try),
          (assign, ":troop_id", playable_troops_begin),
          (player_set_troop_id, ":player_id", ":troop_id"),
        (try_end),
        (call_script, "script_player_add_default_troop_items", ":player_id", ":troop_id"),
        (call_script, "script_player_add_default_troop_armor", ":player_id", ":troop_id"),
        (call_script, "script_player_add_spawn_items", ":player_id", 0),
        (call_script, "script_player_get_spawn_point", ":player_id"),
        (player_set_slot, ":player_id", slot_player_spawn_entry_point, reg0),
        (player_spawn_new_agent, ":player_id", reg0),
        (player_set_slot, ":player_id", slot_player_spawn_state, player_spawn_state_invulnerable),
        (store_mission_timer_a, ":spawn_time"),
        (player_set_slot, ":player_id", slot_player_spawn_invulnerable_time, ":spawn_time"),
      (else_try),
        (assign, ":spawn", 0),
      (try_end),
    (else_try),
      (eq, ":spawn_state", player_spawn_state_invulnerable),
      (player_get_agent_id, ":agent_id", ":player_id"),
      (agent_is_active, ":agent_id"),
      (agent_is_alive, ":agent_id"),
      (player_get_slot, ":spawn_invulnerable_time", ":player_id", slot_player_spawn_invulnerable_time),
      (store_mission_timer_a, ":current_time"),
      (val_sub, ":current_time", ":spawn_invulnerable_time"),
      (try_begin),
        (ge, ":current_time", spawn_invulnerable_time),
        (player_set_slot, ":player_id", slot_player_spawn_state, player_spawn_state_alive),
        (player_set_slot, ":player_id", slot_player_spawn_invulnerable_time, 0),
        (agent_set_team, ":agent_id", team_default),
        (call_script, "script_player_equip_stored_default_items", ":player_id"),
      (try_end),
    (try_end),
    (eq, ":spawn", 1),
    ]),

  ("on_agent_spawned",
   [(store_script_param, ":agent_id", 1),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (try_begin),
      (player_is_active, ":player_id"),
      (player_get_slot, ":food_amount", ":player_id", slot_player_spawn_food_amount),
      (try_begin),
        (gt, ":food_amount", 0),
        (agent_set_slot, ":agent_id", slot_agent_food_amount, ":food_amount"),
        (player_set_slot, ":player_id", slot_player_spawn_food_amount, 0),
      (try_end),
      (multiplayer_is_server),
      (player_get_slot, ":spawn_state", ":player_id", slot_player_spawn_state),
      (try_begin),
        (eq, ":spawn_state", player_spawn_state_invulnerable),
        (agent_set_team, ":agent_id", team_spawn_invulnerable),
      (else_try),
        (player_set_slot, ":player_id", slot_player_spawn_state, player_spawn_state_alive),
        (eq, ":spawn_state", player_spawn_state_at_marker),
        (scene_prop_get_instance, ":instance_id", "spr_code_spawn_marker", ":player_id"),
        (prop_instance_get_position, pos1, ":instance_id"),
        (agent_set_position, ":agent_id", pos1),
        (player_get_slot, ":spawn_hit_points", ":player_id", slot_player_spawn_hit_points),
        (try_begin),
          (gt, ":spawn_hit_points", 0),
          (agent_set_hit_points, ":agent_id", ":spawn_hit_points", 1),
          (player_set_slot, ":player_id", slot_player_spawn_hit_points, 0),
        (try_end),
        (call_script, "script_player_set_stored_ammo_counts", ":player_id"),
      (try_end),
      (try_begin),
        (neq, ":spawn_state", player_spawn_state_invulnerable),
        (agent_set_team, ":agent_id", team_default),
      (try_end),
    (try_end),
    ]),

  ("setup_agent_for_respawn",
   [(store_script_param, ":agent_id", 1),

    (try_begin),
      (agent_is_active, ":agent_id"),
      (agent_get_attached_scene_prop, ":instance_id", ":agent_id"),
      (try_begin),
        (prop_instance_is_valid, ":instance_id"),
        (agent_set_attached_scene_prop, ":agent_id", -1),
        (call_script, "script_cart_set_detached_position", ":instance_id"),
      (try_end),
      (agent_get_player_id, ":player_id", ":agent_id"),
      (player_is_active, ":player_id"),
      (try_for_range, ":player_equip_slot", slot_player_equip_item_0, slot_player_equip_end),
        (player_set_slot, ":player_id", ":player_equip_slot", 0),
      (try_end),
      (agent_get_position, pos1, ":agent_id"),
      (agent_get_wielded_item, ":weapon_item_id", ":agent_id", 0),
      (agent_get_wielded_item, ":shield_item_id", ":agent_id", 1),
      (position_get_z, ":height", pos1),
      (try_for_range, ":equip_slot", ek_item_0, ek_item_3 + 1),
        (agent_get_item_slot, ":item_id", ":agent_id", ":equip_slot"),
        (ge, ":item_id", all_items_begin),
        (this_or_next|lt, ":height", -100),
        (this_or_next|neq, ":item_id", ":weapon_item_id"),
        (eq, ":item_id", "itm_money_bag"),
        (this_or_next|lt, ":height", -100),
        (neq, ":item_id", ":shield_item_id"),
        (call_script, "script_set_random_spawn_position", 50),
        (spawn_item, ":item_id", 0, "$g_spawn_item_prune_time"),
        (call_script, "script_check_on_item_dropped", ":agent_id", ":item_id", reg0, 1),
      (try_end),
      (agent_get_slot, ":freeze_instance_id", ":agent_id", slot_agent_freeze_instance_id),
      (try_begin),
        (prop_instance_is_valid, ":freeze_instance_id"),
        (call_script, "script_remove_scene_prop", ":freeze_instance_id"),
      (try_end),
      (player_get_slot, ":inactive_index", ":player_id", slot_player_inactive_index),
      (try_begin),
        (gt, ":inactive_index", 0),
        (player_get_unique_id, ":unique_id", ":player_id"),
        (troop_slot_eq, "trp_inactive_players_array", ":inactive_index", ":unique_id"),
        (call_script, "script_cf_player_store_inactive", ":player_id", ":inactive_index"),
      (try_end),
      (player_set_slot, ":player_id", slot_player_spawn_state, player_spawn_state_dead),
    (try_end),
    ]),

  ("setup_player_joined",
   [(store_script_param, ":player_id", 1),

    (player_set_team_no, ":player_id", team_default),
    (player_set_slot, ":player_id", slot_player_next_chat_event_type, client_event_chat_message_begin),
    (try_for_range, ":castle_owner_slot", slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
      (troop_get_slot, ":castle_owner", "trp_mission_data", ":castle_owner_slot"),
      (faction_slot_eq, ":castle_owner", slot_faction_is_active, 1),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_troop_set_slot, "trp_mission_data", ":castle_owner_slot", ":castle_owner"),
    (try_end),
    (try_for_range, ":faction_id", factions_begin, factions_end),
      (faction_slot_eq, ":faction_id", slot_faction_is_active, 1),
      (ge, ":faction_id", castle_factions_begin),
      (faction_get_slot, ":banner_mesh", ":faction_id", slot_faction_banner_mesh),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_faction_set_slot, ":faction_id", slot_faction_banner_mesh, ":banner_mesh"),
      (try_begin),
        (faction_slot_eq, ":faction_id", slot_faction_name_is_custom, 1),
        (multiplayer_send_3_int_to_player, ":player_id", server_event_troop_set_slot, "trp_mission_data", slot_mission_data_faction_to_change_name_of, ":faction_id"),
        (str_store_faction_name, s0, ":faction_id"),
        (multiplayer_send_string_to_player, ":player_id", server_event_faction_set_name, s0),
      (try_end),
      (try_for_range, ":other_faction_id", castle_factions_begin, factions_end),
        (faction_slot_eq, ":faction_id", slot_faction_is_active, 1),
        (store_add, ":relation_slot", slot_faction_relations_begin, ":other_faction_id"),
        (faction_get_slot, ":relation", ":faction_id", ":relation_slot"),
        (neq, ":relation", 0),
        (multiplayer_send_3_int_to_player, ":player_id", server_event_faction_set_slot, ":faction_id", ":relation_slot", ":relation"),
      (try_end),
    (try_end),
    (get_max_players, ":max_players"),
    (player_get_unique_id, ":player_unique_id", ":player_id"),
    (troop_get_slot, ":inactive_array_size", "trp_inactive_players_array", slot_player_array_size),
    (try_begin),
      (gt, ":inactive_array_size", 0),
      (store_sub, ":inactive_last_entry_number", ":inactive_array_size", 1),
      (store_mul, ":inactive_index", ":inactive_last_entry_number", player_array_entry_size),
      (val_add, ":inactive_index", slot_player_array_begin),
      (assign, ":loop_end", ":inactive_array_size"),
      (try_for_range, ":unused", 0, ":loop_end"),
        (troop_get_slot, ":inactive_unique_id", "trp_inactive_players_array", ":inactive_index"),
        (try_begin),
          (neq, ":inactive_unique_id", ":player_unique_id"),
          (val_sub, ":inactive_index", player_array_entry_size),
        (else_try),
          (troop_set_slot, "trp_inactive_players_array", ":inactive_index", 0),
          (assign, ":loop_end", -1),
        (try_end),
      (try_end),
      (eq, ":loop_end", -1),
      (store_add, ":temp_index", ":inactive_index", player_array_troop_id),
      (troop_get_slot, ":troop_id", "trp_inactive_players_array", ":temp_index"),
      (store_add, ":temp_index", ":inactive_index", player_array_faction_id),
      (troop_get_slot, ":faction_id", "trp_inactive_players_array", ":temp_index"),
      (store_add, ":temp_index", ":inactive_index", player_array_gold_value),
      (troop_get_slot, ":gold_value", "trp_inactive_players_array", ":temp_index"),
      (store_add, ":temp_index", ":inactive_index", player_array_outlaw_rating),
      (troop_get_slot, ":outlaw_rating", "trp_inactive_players_array", ":temp_index"),
      (try_begin),
        (gt, ":outlaw_rating", 0),
        (multiplayer_send_3_int_to_player, ":player_id", server_event_player_set_slot, ":player_id", slot_player_outlaw_rating, ":outlaw_rating"),
      (try_end),
      (try_begin),
        (neq, ":faction_id", 0),
        (try_for_range, ":other_player_id", 1, ":max_players"),
          (player_is_active, ":other_player_id"),
          (multiplayer_send_3_int_to_player, ":other_player_id", server_event_player_set_slot, ":player_id", slot_player_faction_id, ":faction_id"),
        (try_end),
        (try_begin),
          (faction_slot_eq, ":faction_id", slot_faction_lord_player_uid, ":player_unique_id"),
          (call_script, "script_player_set_lord", ":player_id", ":faction_id"),
        (try_end),
      (try_end),
    (else_try),
      (assign, ":troop_id", playable_troops_begin),
      (assign, ":faction_id", factions_begin),
      (store_random_in_range, ":gold_value", 30, 100),
      (val_mul, ":gold_value", "$g_starting_gold_multiplier"),
      (val_div, ":gold_value", 100),
      (assign, ":outlaw_rating", 0),
    (try_end),
    (player_set_troop_id, ":player_id", ":troop_id"),
    (player_set_slot, ":player_id", slot_player_faction_id, ":faction_id"),
    (call_script, "script_player_adjust_gold", ":player_id", ":gold_value", 0),
    (player_set_slot, ":player_id", slot_player_outlaw_rating, ":outlaw_rating"),
    (try_for_range, ":other_player_id", 1, ":max_players"),
      (neq, ":other_player_id", ":player_id"),
      (player_is_active, ":other_player_id"),
      (player_get_slot, ":other_faction_id", ":other_player_id", slot_player_faction_id),
      (try_begin),
        (neq, ":other_faction_id", 0),
        (multiplayer_send_4_int_to_player, ":player_id", server_event_player_set_slot, ":other_player_id", slot_player_faction_id, ":other_faction_id", change_faction_type_no_respawn),
      (try_end),
      (player_get_score, ":score", ":other_player_id"),
      (player_get_kill_count, ":kills", ":other_player_id"),
      (player_get_death_count, ":deaths", ":other_player_id"),
      (multiplayer_send_4_int_to_player, ":player_id", server_event_set_player_score_kill_death, ":other_player_id", ":score", ":kills", ":deaths"),
      (try_begin),
        (player_slot_eq, ":other_player_id", slot_player_is_lord, 1),
        (multiplayer_send_3_int_to_player, ":player_id", server_event_player_set_slot, ":other_player_id", slot_player_is_lord, 1),
      (try_end),
    (try_end),
    (try_for_agents, ":other_agent_id"),
      (agent_get_attached_scene_prop, ":attached_instance_id", ":other_agent_id"),
      (ge, ":attached_instance_id", 0),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_set_attached_scene_prop, ":other_agent_id", ":attached_instance_id"),
    (try_end),
    (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_respawn_period, "$g_respawn_period"),
    #(multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_num_bots_voteable, "$g_num_bots_voteable"),
    (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_maps_voteable, "$g_maps_voteable"),
    #(multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_factions_voteable, "$g_factions_voteable"),
    (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_kick_voteable, "$g_kick_voteable"),
    (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_ban_voteable, "$g_ban_voteable"),
    (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_force_default_armor, "$g_commoner_outlaw_loot"),
    (store_mission_timer_a, ":mission_timer"),
    (multiplayer_send_2_int_to_player, ":player_id", server_event_return_game_rules, command_set_server_mission_timer, ":mission_timer"),
    ]),

  ("cf_save_player_exit",
   [(store_script_param, ":player_id", 1),

    (player_get_troop_id, ":troop_id", ":player_id"),
    (is_between, ":troop_id", playable_troops_begin, playable_troops_end),
    (player_get_unique_id, ":player_unique_id", ":player_id"),
    (troop_get_slot, ":inactive_array_size", "trp_inactive_players_array", slot_player_array_size),
    (assign, ":loop_end", ":inactive_array_size"),
    (assign, ":inactive_index", slot_player_array_begin),
    (try_for_range, ":unused", 0, ":loop_end"),
      (try_begin),
        (this_or_next|troop_slot_eq, "trp_inactive_players_array", ":inactive_index", 0),
        (troop_slot_eq, "trp_inactive_players_array", ":inactive_index", ":player_unique_id"),
        (assign, ":loop_end", -1),
      (else_try),
        (val_add, ":inactive_index", player_array_entry_size),
      (try_end),
    (try_end),
    (try_begin),
      (call_script, "script_cf_player_store_inactive", ":player_id", ":inactive_index"),
      (troop_set_slot, "trp_inactive_players_array", ":inactive_index", ":player_unique_id"),
      (player_set_slot, ":player_id", slot_player_inactive_index, ":inactive_index"),
      (neq, ":loop_end", -1),
      (val_add, ":inactive_array_size", 1),
      (troop_set_slot, "trp_inactive_players_array", slot_player_array_size, ":inactive_array_size"),
    (try_end),
    (assign, ":loop_end", factions_end),
    (try_for_range, ":faction_id", castle_factions_begin, ":loop_end"),
      (faction_get_slot, ":lord_player_uid", ":faction_id", slot_faction_lord_player_uid),
      (eq, ":lord_player_uid", ":player_unique_id"),
      (assign, ":loop_end", -1),
      (store_mission_timer_a, ":current_time"),
      (faction_set_slot, ":faction_id", slot_faction_lord_last_seen_time, ":current_time"),
    (try_end),
    ]),

  ("cf_player_store_inactive",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":inactive_index", 2),

    (player_get_troop_id, ":troop_id", ":player_id"),
    (is_between, ":troop_id", playable_troops_begin, playable_troops_end),
    (store_add, ":temp_index", ":inactive_index", player_array_troop_id),
    (troop_set_slot, "trp_inactive_players_array", ":temp_index", ":troop_id"),
    (player_get_slot, ":faction_id", ":player_id", slot_player_faction_id),
    (store_add, ":temp_index", ":inactive_index", player_array_faction_id),
    (troop_set_slot, "trp_inactive_players_array", ":temp_index", ":faction_id"),
    (player_get_gold, ":gold_value", ":player_id"),
    (store_add, ":temp_index", ":inactive_index", player_array_gold_value),
    (troop_set_slot, "trp_inactive_players_array", ":temp_index", ":gold_value"),
    (player_get_slot, ":outlaw_rating", ":player_id", slot_player_outlaw_rating),
    (store_add, ":temp_index", ":inactive_index", player_array_outlaw_rating),
    (troop_set_slot, "trp_inactive_players_array", ":temp_index", ":outlaw_rating"),
    ]),

  ("apply_consequences_for_agent_death",
   [(store_script_param, ":dead_agent_id", 1),
    (store_script_param, ":killer_agent_id", 2),

    (try_begin),
      (gt, ":dead_agent_id", -1),
      (agent_get_player_id, ":dead_player_id", ":dead_agent_id"),
      (player_is_active, ":dead_player_id"),
      (try_begin),
        (gt, ":killer_agent_id", -1),
        (neq, ":killer_agent_id", ":dead_agent_id"),
        (agent_get_player_id, ":killer_player_id", ":killer_agent_id"),
        (player_is_active, ":killer_player_id"),
        (player_get_slot, ":dead_faction_id", ":dead_player_id", slot_player_faction_id),
        (player_get_slot, ":killer_faction_id", ":killer_player_id", slot_player_faction_id),
        (try_begin),
          (eq, "$g_commoner_outlaw_loot", 2),
          (lt, ":dead_faction_id", castle_factions_begin),
          (lt, ":killer_faction_id", castle_factions_begin),
          (assign, ":dead_player_add_score", -1),
          (assign, ":killer_player_add_score", 1),
        (else_try),
          (call_script, "script_cf_factions_are_hostile", ":dead_faction_id", ":killer_faction_id"),
          (assign, ":dead_player_add_score", -1),
          (assign, ":killer_player_add_score", 1),
        (else_try),
          (assign, ":dead_player_add_score", 0),
          (assign, ":killer_player_add_score", -1),
          (try_begin),
            (neg|multiplayer_is_server),
            (str_store_player_username, s0, ":killer_player_id"),
            (try_begin),
              (eq, ":dead_faction_id", ":killer_faction_id"),
              (assign, ":string_id", "str_s0_killed_faction_member"),
            (else_try),
              (assign, ":string_id", "str_s0_killed_friendly_faction_member"),
            (try_end),
            (display_message, ":string_id", 0xFFAA0000),
          (try_end),
        (try_end),
      (else_try),
        (assign, ":dead_player_add_score", -1),
        (assign, ":killer_player_add_score", 0),
      (try_end),
    (else_try),
      (assign, ":dead_player_add_score", 0),
      (assign, ":killer_player_add_score", 0),
    (try_end),
    (try_begin),
      (le, ":dead_player_add_score", -1),
      (player_get_score, ":dead_player_score", ":dead_player_id"),
      (val_add, ":dead_player_score", ":dead_player_add_score"),
      (player_set_score, ":dead_player_id", ":dead_player_score"),
      (player_get_death_count, ":dead_player_deaths", ":dead_player_id"),
      (val_add, ":dead_player_deaths", 1),
      (player_set_death_count, ":dead_player_id", ":dead_player_deaths"),
      (try_begin),
        (multiplayer_is_server),
        (this_or_next|neq, "$g_commoner_outlaw_loot", 1),
        (neg|player_slot_eq, ":dead_player_id", slot_player_faction_id, "fac_commoners"),
        (call_script, "script_player_drop_loot", ":dead_player_id"),
      (try_end),
    (try_end),
    (try_begin),
      (neq, ":killer_player_add_score", 0),
      (player_get_score, ":killer_player_score", ":killer_player_id"),
      (val_add, ":killer_player_score", ":killer_player_add_score"),
      (player_set_score, ":killer_player_id", ":killer_player_score"),
      (val_clamp, ":killer_player_add_score", -1, 2),
      (player_get_kill_count, ":killer_player_kills", ":killer_player_id"),
      (val_add, ":killer_player_kills", ":killer_player_add_score"),
      (player_set_kill_count, ":killer_player_id", ":killer_player_kills"),
    (try_end),
    (try_begin),
      (multiplayer_is_server),
      (try_begin),
        (le, ":killer_player_add_score", -1),
        (call_script, "script_player_change_check_outlaw_rating", ":killer_player_id", outlaw_rating_for_team_kill),
      (else_try),
        (player_is_active, ":killer_player_id"),
        (player_slot_eq, ":killer_player_id", slot_player_faction_id, "fac_outlaws"),
        (call_script, "script_player_change_check_outlaw_rating", ":killer_player_id", outlaw_rating_for_kill),
      (try_end),
    (try_end),
    ]),

  ("player_change_check_outlaw_rating",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":add_rating", 2),

    (player_get_slot, ":outlaw_rating", ":player_id", slot_player_outlaw_rating),
    (store_add, ":new_outlaw_rating", ":outlaw_rating", ":add_rating"),
    (val_min, ":new_outlaw_rating", outlaw_rating_maximum),
    (try_begin),
      (neq, ":new_outlaw_rating", ":outlaw_rating"),
      (player_set_slot, ":player_id", slot_player_outlaw_rating, ":new_outlaw_rating"),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_player_set_slot, ":player_id", slot_player_outlaw_rating, ":new_outlaw_rating"),
    (try_end),
    (try_begin),
      (lt, ":outlaw_rating", outlaw_rating_outlawed),
      (ge, ":new_outlaw_rating", outlaw_rating_outlawed),
      (neg|player_slot_eq, ":player_id", slot_player_faction_id, "fac_outlaws"),
      (call_script, "script_player_set_worse_respawn_troop", ":player_id", "trp_ruffian"),
      (call_script, "script_change_faction", ":player_id", "fac_outlaws", change_faction_type_outlawed),
    (try_end),
    ]),

  ("player_drop_loot",
   [(store_script_param, ":player_id", 1),

    (assign, ":gold_loot", 0),
    (player_get_gold, ":gold", ":player_id"),
    (try_begin),
      (gt, ":gold", 0),
      (store_random_in_range, ":loot_multiplier", 10, 21),
      (store_mul, ":gold_loot", ":loot_multiplier", "$g_combat_gold_multiplier"),
      (val_min, ":gold_loot", 10000),
      (val_mul, ":gold_loot", ":gold"),
      (val_div, ":gold_loot", 10000),
      (gt, ":gold_loot", 0),
      (val_sub, ":gold", ":gold_loot"),
      (call_script, "script_player_adjust_gold", ":player_id", ":gold", 0),
      (player_get_agent_id, ":agent_id", ":player_id"),
      (agent_get_position, pos1, ":agent_id"),
      (call_script, "script_set_random_spawn_position", 50),
      (spawn_item, "itm_money_bag", 0, "$g_spawn_item_prune_time"),
      (scene_prop_set_slot, reg0, slot_scene_prop_gold_value, ":gold_loot"),
    (try_end),
    ]),

  ("check_name_server",
   [
    (try_begin),
      (eq, "$g_name_server_enabled", 0),
      (str_store_string, s1, "str_name_server"),
      (neg|str_is_empty, s1),
      (str_store_string, s2, "str_name_server_password"),
      (neg|str_is_empty, s2),
      (assign, reg1, 0),
      (assign, reg2, 0),
      (str_clear, s3),
      (send_message_to_url, "str_http_s1_password_s2_id_reg1_uid_reg2_name_s3"),
    (try_end),
    ]),

  ("player_check_name",
   [(store_script_param, ":player_id", 1),

    (try_begin),
      (eq, "$g_name_server_enabled", 1),
      (str_store_string, s1, "str_name_server"),
      (str_store_string, s2, "str_name_server_password"),
      (assign, reg1, ":player_id"),
      (player_get_unique_id, reg2, ":player_id"),
      (str_store_player_username, s3, ":player_id"),
      (str_encode_url, s3),
      (str_store_string, s0, "str_http_s1_password_s2_id_reg1_uid_reg2_name_s3"),
      (try_begin),
        (player_is_admin, ":player_id"),
        (str_store_string, s0, "str_http_s0_admin"),
      (try_end),
      (send_message_to_url, s0),
    (try_end),
    ]),

  ("player_set_admin_permissions",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":permissions", 2),

    (try_for_range, ":slot", slot_player_admin_no_panel, slot_player_admin_end),
      (assign, ":value", ":permissions"),
      (val_and, ":value", 0x1),
      (val_rshift, ":permissions", 1),
      (eq, ":value", 0),
      (player_set_slot, ":player_id", ":slot", 1),
    (try_end),
    ]),

  ("client_check_show_respawn_time_counter",
   [(store_script_param, ":agent_id", 1),

    (try_begin),
      (neg|multiplayer_is_dedicated_server),
      (multiplayer_get_my_player, ":my_player_id"),
      (is_between, ":my_player_id", 0, max_num_players),
      (player_get_agent_id, ":my_agent_id", ":my_player_id"),
      (eq, ":my_agent_id", ":agent_id"),
      (store_mission_timer_a, "$g_respawn_start_time"),
      (start_presentation, "prsnt_respawn_time_counter"),
    (try_end),
    ]),

  ("scene_prop_play_sound",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":sound_id", 2),

    (try_begin),
      (gt, ":instance_id", -1),
      (prop_instance_is_valid, ":instance_id"),
      (prop_instance_get_position, pos60, ":instance_id"),
      (val_lshift, ":sound_id", net_sound_shift),
      (le, ":instance_id", net_sound_mask),
      (val_or, ":instance_id", ":sound_id"),
      (is_between, ":instance_id", 0, net_value_upper_bound),
      (try_for_agents, ":agent_id"),
        (agent_is_active, ":agent_id"),
        (agent_get_player_id, ":player_id", ":agent_id"),
        (player_is_active, ":player_id"),
        (agent_get_position, pos61, ":agent_id"),
        (get_distance_between_positions, ":distance", pos60, pos61),
        (le, ":distance", max_distance_to_play_sound),
        (multiplayer_send_int_to_player, ":player_id", server_event_scene_prop_play_sound, ":instance_id"),
      (try_end),
    (try_end),
    ]),

  ("hit_scene_prop_play_sound",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":sound_id", 3),

    (agent_get_wielded_item, ":item_id", ":agent_id"),
    (try_begin),
      (gt, ":item_id", all_items_begin),
      (item_get_type, ":item_type", ":item_id"),
      (is_between, ":item_type", itp_type_bow, itp_type_thrown + 1),
      (call_script, "script_scene_prop_play_sound", ":instance_id", ":sound_id"),
    (else_try),
      (agent_play_sound, ":agent_id", ":sound_id"),
    (try_end),
    ]),

  ("play_sound_at_position",
   [(store_script_param, ":sound_id", 1),

    (set_fixed_point_multiplier, 1),
    (position_get_x, ":pos_x", pos0),
    (position_get_y, ":pos_y", pos0),
    (position_get_z, ":pos_z", pos0),
    (set_fixed_point_multiplier, 100),
    (val_add, ":pos_z", net_pack_3_value_upper_bound / 2),
    (val_clamp, ":pos_x", 0, net_pack_3_value_upper_bound),
    (val_clamp, ":pos_y", 0, net_pack_3_value_upper_bound),
    (val_clamp, ":pos_z", 0, net_pack_3_value_upper_bound),
    (assign, ":packed_position", ":pos_x"),
    (val_lshift, ":pos_y", net_pack_3_shift_2),
    (val_or, ":packed_position", ":pos_y"),
    (val_lshift, ":pos_y", net_pack_3_shift_3),
    (val_or, ":packed_position", ":pos_z"),
    (try_for_agents, ":agent_id"),
      (agent_is_active, ":agent_id"),
      (agent_get_player_id, ":player_id", ":agent_id"),
      (player_is_active, ":player_id"),
      (agent_get_position, pos60, ":agent_id"),
      (get_distance_between_positions, ":distance", pos0, pos60),
      (le, ":distance", max_distance_to_play_sound),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_play_sound_at_position, ":sound_id", ":packed_position"),
    (try_end),
    ]),

  ("cf_check_enough_gold",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":gold_cost", 2),

    (player_get_gold, ":player_gold", ":player_id"),
    (try_begin),
      (lt, ":player_gold", ":gold_cost"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, "str_dont_have_enough_money", preset_message_error),
    (try_end),
    (ge, ":player_gold", ":gold_cost"),
    ]),

  ("player_adjust_gold",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":gold_value", 2),
    (store_script_param, ":add_abs_sub", 3),

    (try_begin),
      (ge, ":gold_value", 0),
      (this_or_next|eq, ":add_abs_sub", 0),
      (gt, ":gold_value", 0),
      (player_get_gold, ":original_player_gold", ":player_id"),
      (try_begin),
        (gt, ":add_abs_sub", 0),
        (store_add, ":player_gold", ":original_player_gold", ":gold_value"),
        (assign, ":sound", "snd_money_received"),
      (else_try),
        (lt, ":add_abs_sub", 0),
        (store_sub, ":player_gold", ":original_player_gold", ":gold_value"),
        (assign, ":sound", "snd_money_paid"),
      (else_try),
        (assign, ":player_gold", ":gold_value"),
        (assign, ":sound", -1),
      (try_end),
      (val_clamp, ":player_gold", 0, max_possible_gold),
      (player_set_gold, ":player_id", ":player_gold"),
      (try_begin),
        (gt, ":player_gold", max_correctly_displayed_gold),
        (multiplayer_send_int_to_player, ":player_id", server_event_set_overflow_gold, ":player_gold"),
      (else_try),
        (gt, ":original_player_gold", max_correctly_displayed_gold),
        (multiplayer_send_int_to_player, ":player_id", server_event_set_overflow_gold, 0),
      (try_end),
      (try_begin),
        (gt, ":sound", -1),
        (player_get_agent_id, ":agent_id", ":player_id"),
        (gt, ":agent_id", -1),
        (agent_is_alive, ":agent_id"),
        (agent_play_sound, ":agent_id", ":sound"),
      (try_end),
    (try_end),
    ]),

  ("scene_prop_get_gold_value",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":item_id", 2),
    (store_script_param, ":base_value_multiplier", 3),

    (scene_prop_get_slot, ":value", ":instance_id", slot_scene_prop_gold_value),
    (try_begin),
      (eq, ":value", 0),
      (try_begin),
        (gt, ":item_id", -1),
        (store_item_value, ":base_value", ":item_id"),
        (try_begin),
          (gt, ":base_value_multiplier", 0),
          (val_mul, ":base_value", ":base_value_multiplier"),
          (val_div, ":base_value", 100),
        (try_end),
      (else_try),
        (assign, ":base_value", ":base_value_multiplier"),
      (try_end),
      (gt, ":base_value", 0),
      (prop_instance_get_variation_id, ":multiplier_no", ":instance_id"),
      (val_div, ":multiplier_no", 10),
      (try_begin),
        (eq, ":multiplier_no", 0),
        (assign, ":value", ":base_value"),
        (assign, ":multiplier", 100),
      (else_try),
        (try_begin),
          (is_between, ":multiplier_no", 1, 5),
          (store_mul, ":multiplier", ":multiplier_no", 20),
        (else_try),
          (is_between, ":multiplier_no", 5, 10),
          (store_add, ":multiplier", ":multiplier_no", 1),
          (val_mul, ":multiplier", 20),
        (else_try),
          (eq, ":multiplier_no", 10),
          (assign, ":multiplier", 350),
        (else_try),
          (eq, ":multiplier_no", 11),
          (assign, ":multiplier", 500),
        (else_try),
          (eq, ":multiplier_no", 12),
          (assign, ":multiplier", 1000),
        (try_end),
        (store_mul, ":value", ":base_value", ":multiplier"),
        (val_div, ":value", 100),
        (val_max, ":value", 1),
      (try_end),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_gold_value, ":value"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_gold_multiplier, ":multiplier"),
    (else_try),
      (scene_prop_get_slot, ":multiplier", ":instance_id", slot_scene_prop_gold_multiplier),
    (try_end),
    (assign, reg0, ":value"),
    (assign, reg1, ":multiplier"),
    ]),

  ("scene_setup_factions_castles",
   [
    (assign, ":current_faction", castle_factions_begin),
    (try_for_range, ":current_castle_slot", slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
      (troop_set_slot, "trp_mission_data", ":current_castle_slot", ":current_faction"),
      (val_add, ":current_faction", 1),
      (try_begin),
        (eq, ":current_faction", factions_end),
        (assign, ":current_faction", castle_factions_begin),
      (try_end),
    (try_end),
    (faction_set_slot, "fac_commoners", slot_faction_is_active, 1),
    (faction_set_slot, "fac_outlaws", slot_faction_is_active, 1),
    (scene_prop_get_num_instances, ":pole_num", "spr_pw_castle_capture_point"),
    (try_for_range, ":pole_no", 0, ":pole_num"),
      (scene_prop_get_instance, ":instance_id", "spr_pw_castle_capture_point", ":pole_no"),
      (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
      (faction_set_slot, reg0, slot_faction_is_active, 1),
      (gt, reg1, -1),
      (val_add, reg1, slot_mission_data_castle_is_active_begin),
      (troop_set_slot, "trp_mission_data", reg1, 1),
    (try_end),
    (assign, "$g_scene_num_castle_factions", 0),
    (try_for_range, ":faction_id", castle_factions_begin, factions_end),
      (faction_slot_eq, ":faction_id", slot_faction_is_active, 1),
      (val_add, "$g_scene_num_castle_factions", 1),
    (try_end),
    (try_for_range, ":slot", slot_mission_data_castle_allows_training_begin, slot_mission_data_castle_allows_training_end),
      (troop_set_slot, "trp_mission_data", ":slot", 0),
    (try_end),
    (try_for_range, ":scene_prop_id", "spr_pw_change_troop_peasant", "spr_pw_change_troop_mercenary"),
      (scene_prop_get_num_instances, ":num_instances", ":scene_prop_id"),
      (try_for_range, ":instance_no", 0, ":num_instances"),
        (scene_prop_get_instance, ":instance_id", ":scene_prop_id", ":instance_no"),
        (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
        (gt, reg1, -1),
        (store_add, ":castle_is_active_slot", slot_mission_data_castle_is_active_begin, reg1),
        (troop_slot_eq, "trp_mission_data", ":castle_is_active_slot", 1),
        (val_add, reg1, slot_mission_data_castle_allows_training_begin),
        (troop_set_slot, "trp_mission_data", reg1, 1),
      (try_end),
    (try_end),
    (call_script, "script_setup_castle_names"),
    ]),

  ("cf_castle_is_active",
   [(store_script_param, ":castle_no", 1),

    (is_between, ":castle_no", slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
    (val_add, ":castle_no", slot_mission_data_castle_is_active_begin),
    (troop_slot_eq, "trp_mission_data", ":castle_no", 1),
    ]),

  ("capture_castle",
   [(store_script_param, ":faction_id", 1),
    (store_script_param, ":castle_no", 2),

    (try_begin),
      (is_between, ":faction_id", castle_factions_begin, factions_end),
      (call_script, "script_cf_castle_is_active", ":castle_no"),
      (troop_set_slot, "trp_mission_data", ":castle_no", ":faction_id"),
      (get_max_players, ":num_players"),
      (try_for_range, ":player_id", 1, ":num_players"),
        (player_is_active, ":player_id"),
        (multiplayer_send_3_int_to_player, ":player_id", server_event_troop_set_slot, "trp_mission_data", ":castle_no", ":faction_id"),
      (try_end),
      (call_script, "script_redraw_castle_banners", ":castle_no"), #need a delay to make sure the castle owners are updated on clients first?
    (try_end),
    ]),

  ("cf_capture_castle",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (player_get_slot, ":player_faction_id", ":player_id", slot_player_faction_id),
    (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
    (assign, ":faction_id", reg0),
    (assign, ":castle_no", reg1),
    (gt, ":castle_no", -1),
    (neq, ":faction_id", ":player_faction_id"),
    (call_script, "script_cf_factions_are_hostile", ":faction_id", ":player_faction_id"),
    (faction_get_slot, ":banner_item_id", ":player_faction_id", slot_faction_banner_mesh),
    (val_sub, ":banner_item_id", banner_meshes_begin),
    (val_add, ":banner_item_id", banner_items_begin),
    (agent_get_wielded_item, ":wielded_item_id", ":agent_id", 0),
    (eq, ":wielded_item_id", ":banner_item_id"),
    (call_script, "script_cf_agent_consume_item", ":agent_id", ":banner_item_id", 1),
    (call_script, "script_capture_castle", ":player_faction_id", ":castle_no"),
    ]),

  ("cf_victory_condition_met",
   [
    (ge, "$g_victory_condition", 1),
    (assign, ":last_owner_faction", -1),
    (assign, ":loop_end", slot_mission_data_castle_owner_faction_end),
    (try_for_range, ":castle_no", slot_mission_data_castle_owner_faction_begin, ":loop_end"),
      (store_add, ":castle_active_slot", ":castle_no", slot_mission_data_castle_is_active_begin),
      (troop_slot_eq, "trp_mission_data", ":castle_active_slot", 1),
      (troop_get_slot, ":owner_faction", "trp_mission_data", ":castle_no"),
      (try_begin),
        (neq, ":last_owner_faction", -1),
        (neq, ":owner_faction", ":last_owner_faction"),
        (assign, ":loop_end", -1),
      (try_end),
      (assign, ":last_owner_faction", ":owner_faction"),
    (try_end),
    (neq, ":loop_end", -1),
    (assign, reg0, ":owner_faction"),
    ]),

  ("redraw_castle_banners",
   [(store_script_param, ":castle_no", 1),

    (try_for_range, ":faction_id", castle_factions_begin, factions_end),
      (this_or_next|eq, ":castle_no", -1),
      (troop_slot_eq, "trp_mission_data", ":castle_no", ":faction_id"),
      (faction_get_slot, ":banner_item_begin", ":faction_id", slot_faction_castle_banner_item_begin),
      (try_begin),
        (eq, ":banner_item_begin", "itm_pw_banner_castle_fac_1a"),
        (assign, ":banner_item_begin", "itm_pw_banner_castle_fac_1b"),
      (else_try),
        (assign, ":banner_item_begin", "itm_pw_banner_castle_fac_1a"),
      (try_end),
      (eq, ":castle_no", -1),
      (faction_set_slot, ":faction_id", slot_faction_castle_banner_item_begin, ":banner_item_begin"),
    (try_end),
    (init_position, pos1),
    (position_set_z, pos1, z_position_to_hide_object),
    (scene_prop_get_num_instances, ":pole_count", "spr_pw_castle_capture_point"),
    (try_for_range, ":pole_no", 0, ":pole_count"),
      (scene_prop_get_instance, ":pole_instance_id", "spr_pw_castle_capture_point", ":pole_no"),
      (call_script, "script_scene_prop_get_owning_faction", ":pole_instance_id"),
      (gt, reg1, -1),
      (this_or_next|eq, ":castle_no", -1),
      (eq, reg1, ":castle_no"),
      (assign, ":faction_id", reg0),
      (try_begin),
        (eq, ":castle_no", -1),
        (faction_get_slot, ":banner_item_begin", ":faction_id", slot_faction_castle_banner_item_begin),
      (try_end),
      (store_sub, ":flag_item_id", ":faction_id", castle_factions_begin),
      (val_add, ":flag_item_id", ":banner_item_begin"),
      (scene_prop_get_slot, ":flag_instance_id", ":pole_instance_id", slot_scene_prop_linked_scene_prop),
      (try_begin),
        (gt, ":flag_instance_id", 0),
        (prop_instance_is_valid, ":flag_instance_id"),
        (prop_instance_set_position, ":flag_instance_id", pos1),
      (try_end),
      (prop_instance_get_scale, pos3, ":pole_instance_id"),
      (position_get_scale_z, ":flag_height", pos3),
      (val_mul, ":flag_height", 1000),
      (convert_from_fixed_point, ":flag_height"),
      (prop_instance_get_position, pos2, ":pole_instance_id"),
      (position_move_z, pos2, ":flag_height"),
      (position_move_y, pos2, 11),
      (set_spawn_position, pos2),
      (spawn_item, ":flag_item_id", 0, int(redraw_castle_banners_interval * 1.1)),
      (scene_prop_set_slot, ":pole_instance_id", slot_scene_prop_linked_scene_prop, reg0),
      (prop_instance_set_position, reg0, pos2),
    (try_end),
    ]),

  ("setup_castle_names",
   [
    (try_for_range, ":name_slot", slot_mission_data_castle_name_string_begin, slot_mission_data_castle_name_string_end),
      (troop_set_slot, "trp_mission_data", ":name_slot", 0),
    (try_end),
    (scene_prop_get_num_instances, ":sign_num", "spr_pw_castle_sign"),
    (try_for_range, ":sign_no", 0, ":sign_num"),
      (scene_prop_get_instance, ":instance_id", "spr_pw_castle_sign", ":sign_no"),
      (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
      (is_between, reg1, slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
      (store_add, ":name_slot", reg1, slot_mission_data_castle_name_string_begin),
      (troop_slot_eq, "trp_mission_data", ":name_slot", 0),
      (prop_instance_get_variation_id_2, ":name_string_id", ":instance_id"),
      (val_add, ":name_string_id", castle_names_begin),
      (try_begin),
        (is_between, ":name_string_id", castle_names_begin, castle_names_end),
        (assign, ":loop_end", slot_mission_data_castle_name_string_end),
        (try_for_range, ":other_name_slot", slot_mission_data_castle_name_string_begin, ":loop_end"),
          (neq, ":other_name_slot", ":name_slot"),
          (troop_slot_eq, "trp_mission_data", ":other_name_slot", ":name_string_id"),
          (assign, ":loop_end", -1),
        (try_end),
        (neq, ":loop_end", -1),
      (else_try),
        (assign, ":name_string_id", castle_names_end),
      (try_end),
      (troop_set_slot, "trp_mission_data", ":name_slot", ":name_string_id"),
    (try_end),
    ]),

  ("str_store_castle_name",
   [(store_script_param, ":output_castle_name", 1),
    (store_script_param, ":castle_no", 2),

    (try_begin),
      (is_between, ":castle_no", slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
      (val_add, ":castle_no", slot_mission_data_castle_name_string_begin),
      (troop_get_slot, ":name_string_id", "trp_mission_data", ":castle_no"),
      (is_between, ":name_string_id", castle_names_begin, castle_names_end),
      (str_store_string, ":output_castle_name", ":name_string_id"),
    (else_try),
      (str_store_string, ":output_castle_name", castle_names_end),
    (try_end),
    ]),

  ("setup_castle_money_chests",
   [
    (try_for_range, ":chest_slot", slot_mission_data_castle_money_chest_begin, slot_mission_data_castle_money_chest_end),
      (troop_set_slot, "trp_mission_data", ":chest_slot", 0),
    (try_end),
    (scene_prop_get_num_instances, ":chest_num", "spr_pw_castle_money_chest"),
    (try_for_range, ":chest_no", 0, ":chest_num"),
      (scene_prop_get_instance, ":instance_id", "spr_pw_castle_money_chest", ":chest_no"),
      (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
      (is_between, reg1, slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
      (store_add, ":chest_slot", reg1, slot_mission_data_castle_money_chest_begin),
      (troop_slot_eq, "trp_mission_data", ":chest_slot", 0),
      (troop_set_slot, "trp_mission_data", ":chest_slot", ":instance_id"),
    (try_end),
    ]),

  ("castle_receive_gold",
   [(store_script_param, ":castle_slot", 1),
    (store_script_param, ":gold_value", 2),
    (store_script_param, ":multiplier", 3),

    (try_begin),
      (is_between, ":castle_slot", slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
      (val_add, ":castle_slot", slot_mission_data_castle_money_chest_begin),
      (troop_get_slot, ":instance_id", "trp_mission_data", ":castle_slot"),
      (gt, ":instance_id", 0),
      (scene_prop_get_slot, ":chest_gold", ":instance_id", slot_scene_prop_stack_count),
      (val_mul, ":gold_value", ":multiplier"),
      (val_div, ":gold_value", 100),
      (val_add, ":chest_gold", ":gold_value"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_stack_count, ":chest_gold"),
    (try_end),
    ]),

  ("faction_set_color_from_banner",
   [(store_script_param, ":faction_id", 1),
    (store_script_param, ":banner_mesh", 2),

    (troop_get_slot, ":color", "trp_banner_background_color_array", ":banner_mesh"),
    (store_div, ":red", ":color", 0x10000),
    (val_and, ":red", 0xFF),
    (val_mul, ":red", 2),
    (val_min, ":red", 0xFF),
    (val_mul, ":red", 0x10000),
    (store_div, ":green", ":color", 0x100),
    (val_and, ":green", 0xFF),
    (val_mul, ":green", 2),
    (val_min, ":green", 0xFF),
    (val_mul, ":green", 0x100),
    (assign, ":blue", ":color"),
    (val_and, ":blue", 0xFF),
    (val_mul, ":blue", 2),
    (val_min, ":blue", 0xFF),
    (store_add, ":color", ":red", ":green"),
    (val_add, ":color", ":blue"),
    (faction_set_color, ":faction_id", ":color"),
    ]),

  ("faction_redraw_heraldic_items",
   [(store_script_param, ":faction_id", 1),

    (get_max_players, ":max_players"),
    (try_for_range, ":player_id", 1, ":max_players"),
      (player_is_active, ":player_id"),
      (player_slot_eq, ":player_id", slot_player_faction_id, ":faction_id"),
      (call_script, "script_player_redraw_heraldic_items", ":player_id"),
    (try_end),
    ]),

  ("player_redraw_heraldic_items",
   [(store_script_param, ":player_id", 1),

    (player_get_agent_id, ":agent_id", ":player_id"),
    (try_begin),
      (agent_is_active, ":agent_id"),
      (agent_is_alive, ":agent_id"),
      (try_for_range, ":equip_slot", ek_head, ek_gloves + 1),
        (agent_get_item_slot, ":item_id", ":agent_id", ":equip_slot"),
        (ge, ":item_id", all_items_begin),
        (item_slot_eq, ":item_id", slot_item_class, item_class_heraldic),
        (store_sub, ":no_item_id", ":equip_slot", ek_head),
        (val_add, ":no_item_id", "itm_invisible_head"),
        (agent_equip_item, ":agent_id", ":no_item_id"),
        (agent_equip_item, ":agent_id", ":item_id"),
      (try_end),
    (try_end),
    ]),

  ("cf_factions_are_hostile",
   [(store_script_param, ":faction_1_id", 1),
    (store_script_param, ":faction_2_id", 2),

    (neq, ":faction_1_id", ":faction_2_id"),
    (store_add, ":faction_1_slot", ":faction_1_id", slot_faction_relations_begin),
    (store_add, ":faction_2_slot", ":faction_2_id", slot_faction_relations_begin),
    (this_or_next|neg|faction_slot_ge, ":faction_1_id", ":faction_2_slot", 1),
    (neg|faction_slot_ge, ":faction_2_id", ":faction_1_slot", 1),
    ]),

  ("scene_prop_get_owning_faction",
   [(store_script_param, ":instance_id", 1),

    (prop_instance_get_variation_id, ":scene_prop_owner_slot", ":instance_id"),
    (val_mod, ":scene_prop_owner_slot", 10),
    (try_begin),
      (neg|scene_prop_slot_eq, ":instance_id", slot_scene_prop_is_mercenary, 1),
      (ge, ":scene_prop_owner_slot", castle_factions_begin),
      (val_sub, ":scene_prop_owner_slot", castle_factions_begin),
      (val_clamp, ":scene_prop_owner_slot", slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
      (troop_get_slot, reg0, "trp_mission_data", ":scene_prop_owner_slot"),
      (assign, reg1, ":scene_prop_owner_slot"),
    (else_try),
      (assign, reg0, ":scene_prop_owner_slot"),
      (assign, reg1, -1),
    (try_end),
    (val_clamp, reg0, factions_begin, factions_end),
    ]),

  ("cf_can_change_faction",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":faction_id", 2),

    (try_begin),
      (faction_slot_eq, ":faction_id", slot_faction_is_active, 0),
      (assign, reg1, "str_scene_error_this_faction_is_not_active"),
    (else_try),
      (assign, reg1, 0),
    (try_end),
    (eq, reg1, 0),
    (player_get_slot, ":player_faction_id", ":player_id", slot_player_faction_id),
    (assign, reg0, ":player_faction_id"),
    (try_begin),
      (neq, ":player_faction_id", ":faction_id"),
      (neq, ":player_faction_id", "fac_commoners"),
      (neq, ":faction_id", "fac_commoners"),
      (assign, reg1, "str_must_leave_s1_first"),
    (try_end),
    (eq, reg1, 0),
    (try_begin),
      (neq, ":faction_id", "fac_outlaws"),
      (eq, ":player_faction_id", "fac_outlaws"),
      (player_slot_ge, ":player_id", slot_player_outlaw_rating, 1),
      (assign, reg1, "str_you_have_been_outlawed"),
    (try_end),
    (eq, reg1, 0),
    ]),

  ("cf_faction_set_lord",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":unique_id", 2),
    (store_script_param, ":faction_id", 3),

    (assign, ":fail", 0),
    (try_begin),
      (neg|player_is_active, ":player_id"),
      (store_mission_timer_a, ":last_seen_time"),
      (faction_set_slot, ":faction_id", slot_faction_lord_last_seen_time, ":last_seen_time"),
    (else_try),
      (player_slot_eq, ":player_id", slot_player_faction_id, ":faction_id"),
      (player_get_unique_id, ":player_unique_id", ":player_id"),
      (eq, ":player_unique_id", ":unique_id"),
      (call_script, "script_player_set_lord", ":player_id", ":faction_id"),
    (else_try),
      (assign, ":fail", 1),
    (try_end),
    (eq, ":fail", 0),
    (faction_set_slot, ":faction_id", slot_faction_lord_player_uid, ":unique_id"),
    ]),

  ("player_set_lord",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":faction_id", 2),

    (get_max_players, ":max_players"),
    (try_for_range, ":other_player_id", 1, ":max_players"),
      (player_is_active, ":other_player_id"),
      (multiplayer_send_3_int_to_player, ":other_player_id", server_event_player_set_slot, ":player_id", slot_player_is_lord, 1),
      (player_slot_eq, ":other_player_id", slot_player_faction_id, ":faction_id"),
      (neq, ":other_player_id", ":player_id"),
      (player_set_slot, ":other_player_id", slot_player_is_lord, 0),
      (player_set_slot, ":other_player_id", slot_player_last_faction_kicked_from, 0),
      (player_get_slot, ":has_door_key", ":other_player_id", slot_player_has_faction_door_key),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_player_set_slot, ":other_player_id", slot_player_has_faction_door_key, ":has_door_key"),
      (player_get_slot, ":has_money_key", ":other_player_id", slot_player_has_faction_money_key),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_player_set_slot, ":other_player_id", slot_player_has_faction_money_key, ":has_money_key"),
      (player_get_slot, ":has_item_key", ":other_player_id", slot_player_has_faction_item_key),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_player_set_slot, ":other_player_id", slot_player_has_faction_item_key, ":has_item_key"),
    (try_end),
    (player_set_slot, ":player_id", slot_player_is_lord, 1),
    (player_set_slot, ":player_id", slot_player_has_faction_door_key, 1),
    (player_set_slot, ":player_id", slot_player_has_faction_money_key, 1),
    (player_set_slot, ":player_id", slot_player_has_faction_item_key, 1),
    (faction_set_slot, ":faction_id", slot_faction_lord_last_seen_time, 0),
    ]),

  ("cf_player_is_lord",
   [(store_script_param, ":player_id", 1),

    (assign, ":fail", 0),
    (try_begin),
      (multiplayer_is_server),
      (player_get_slot, ":faction_id", ":player_id", slot_player_faction_id),
      (is_between, ":faction_id", factions_begin, factions_end),
      (player_get_unique_id, ":unique_id", ":player_id"),
      (faction_slot_eq, ":faction_id", slot_faction_lord_player_uid, ":unique_id"),
    (else_try),
      (neg|multiplayer_is_server),
      (player_slot_eq, ":player_id", slot_player_is_lord, 1),
    (else_try),
      (assign, ":fail", 1),
    (try_end),
    (eq, ":fail", 0),
    ]),

  ("cf_player_can_use_troop",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":troop_id", 2),

    (store_skill_level, ":leadership", "skl_leadership", ":troop_id"),
    (assign, ":fail", 0),
    (try_begin),
      (eq, ":leadership", 0),
    (else_try),
      (call_script, "script_cf_player_is_lord", ":player_id"),
    (else_try),
      (assign, ":fail", 1),
    (try_end),
    (eq, ":fail", 0),
    ]),

  ("change_faction",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":faction_id", 2),
    (store_script_param, ":change_faction_type", 3),

    (try_begin),
      (neg|player_slot_eq, ":player_id", slot_player_faction_id, ":faction_id"),
      (player_set_slot, ":player_id", slot_player_faction_id, ":faction_id"),
      (get_max_players, ":num_players"),
      (try_for_range, ":other_player_id", 1, ":num_players"),
        (player_is_active, ":other_player_id"),
        (try_begin),
          (eq, ":change_faction_type", 0),
          (multiplayer_send_3_int_to_player, ":other_player_id", server_event_player_set_slot, ":player_id", slot_player_faction_id, ":faction_id"),
        (else_try),
          (multiplayer_send_4_int_to_player, ":other_player_id", server_event_player_set_slot, ":player_id", slot_player_faction_id, ":faction_id", ":change_faction_type"),
        (try_end),
      (try_end),
      (player_set_slot, ":player_id", slot_player_is_lord, 0),
      (player_get_unique_id, ":unique_id", ":player_id"),
      (try_begin),
        (faction_slot_eq, ":faction_id", slot_faction_lord_player_uid, ":unique_id"),
        (faction_set_slot, ":faction_id", slot_faction_lord_player_uid, 0),
      (try_end),
      (player_set_slot, ":player_id", slot_player_has_faction_door_key, 0),
      (player_set_slot, ":player_id", slot_player_has_faction_money_key, 0),
      (player_set_slot, ":player_id", slot_player_has_faction_item_key, 0),
    (try_end),
    ]),

  ("cf_change_faction",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":change_faction_type", 3),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (agent_is_alive, ":agent_id"),

    (assign, ":fail", 0),
    (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
    (assign, ":faction_id", reg0),
    (try_begin),
      (neg|scene_prop_slot_eq, ":instance_id", slot_scene_prop_is_mercenary, 1),
    (else_try),
      (assign, ":loop_end", slot_mission_data_castle_owner_faction_end),
      (try_for_range, ":castle_no", slot_mission_data_castle_owner_faction_begin, ":loop_end"),
        (troop_slot_eq, "trp_mission_data", ":castle_no", ":faction_id"),
        (store_add, ":castle_allows_training_slot", slot_mission_data_castle_allows_training_begin, ":castle_no"),
        (troop_slot_eq, "trp_mission_data", ":castle_allows_training_slot", 1),
        (assign, ":loop_end", -1),
      (try_end),
      (neq, ":loop_end", -1),
    (else_try),
      (assign, ":fail", 1),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_preset_message, "str_s1_doesnt_need_merc", preset_message_faction|preset_message_fail_sound, ":faction_id"),
    (try_end),
    (eq, ":fail", 0),
    (try_begin),
      (call_script, "script_cf_can_change_faction", ":player_id", ":faction_id"),
      (call_script, "script_change_faction", ":player_id", ":faction_id", ":change_faction_type"),
    (else_try),
      (assign, ":fail", 1),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_preset_message, reg1, preset_message_faction|preset_message_fail_sound, reg0),
    (try_end),
    (eq, ":fail", 0),
    ]),

  ("player_set_worse_respawn_troop",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":troop_id", 2),

    (try_begin),
      (player_get_agent_id, ":agent_id", ":player_id"),
      (agent_is_active, ":agent_id"),
      (agent_get_troop_id, ":current_troop_id", ":agent_id"),
    (else_try),
      (player_get_troop_id, ":current_troop_id", ":player_id"),
    (try_end),
    (store_attribute_level, ":strength", ":current_troop_id", ca_strength),
    (try_begin),
      (ge, ":strength", 9),
      (player_set_troop_id, ":player_id", ":troop_id"),
    (try_end),
    ]),

  ("cf_change_faction_worse_respawn_troop",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (call_script, "script_cf_change_faction", ":agent_id", ":instance_id", change_faction_type_no_respawn),
    (agent_get_player_id, ":player_id", ":agent_id"),
    (scene_prop_get_slot, ":troop_id", ":instance_id", slot_scene_prop_troop_id),
    (call_script, "script_player_set_worse_respawn_troop", ":player_id", ":troop_id"),
    ]),

  ("cf_change_troop",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":cancel", 3),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (agent_is_alive, ":agent_id"),
    (scene_prop_get_slot, ":troop_id", ":instance_id", slot_scene_prop_troop_id),
    (assign, ":fail", 0),
    (try_begin),
      (call_script, "script_cf_player_can_use_troop", ":player_id", ":troop_id"),
    (else_try),
      (assign, ":fail", 1),
      (player_get_slot, ":faction_id", ":player_id", slot_player_faction_id),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_preset_message, "str_you_are_not_lord_of_s1", preset_message_faction, ":faction_id"),
    (try_end),
    (eq, ":fail", 0),
    (agent_get_troop_id, ":current_troop_id", ":agent_id"),
    (try_begin),
      (neq, ":current_troop_id", ":troop_id"),
      (eq, ":cancel", 0),
      (scene_prop_get_slot, ":gold_cost", ":instance_id", slot_scene_prop_gold_value),
      (call_script, "script_cf_check_enough_gold", ":player_id", ":gold_cost"),
      (call_script, "script_cf_change_faction", ":agent_id", ":instance_id", change_faction_type_respawn),
      (call_script, "script_player_adjust_gold", ":player_id", ":gold_cost", -1),
      (player_set_troop_id, ":player_id", ":troop_id"),
      (try_begin),
        (store_skill_level, ":new_leadership", "skl_leadership", ":troop_id"),
        (gt, ":new_leadership", 0),
        (store_skill_level, ":old_leadership", "skl_leadership", ":current_troop_id"),
        (eq, ":old_leadership", 0),
        (player_set_slot, ":player_id", slot_player_non_lord_troop_id, ":current_troop_id"),
      (try_end),
      (call_script, "script_player_add_equipped_items", ":player_id", ":troop_id"),
      (call_script, "script_player_add_spawn_items", ":player_id", 1),
      (call_script, "script_player_respawn_in_place", ":player_id"),
      (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
      (call_script, "script_castle_receive_gold", reg1, ":gold_cost", castle_training_gold_multiplier),
    (else_try),
      (eq, ":current_troop_id", ":troop_id"),
      (call_script, "script_cf_change_faction", ":agent_id", ":instance_id", change_faction_type_no_respawn),
      (player_set_troop_id, ":player_id", ":troop_id"),
    (else_try),
      (assign, ":fail", 1),
    (try_end),
    (eq, ":fail", 0),
    ]),

  ("cf_check_troop_can_equip_item",
   [(store_script_param, ":troop_id", 1),
    (store_script_param, ":item_id", 2),

    (item_get_type, ":item_type", ":item_id"),
    (try_begin),
      (eq, ":item_type", itp_type_arrows),
      (assign, ":difficulty", 1),
    (else_try),
      (item_get_slot, ":difficulty", ":item_id", slot_item_difficulty),
    (try_end),
    (assign, ":fail", 0),
    (try_begin),
      (gt, ":difficulty", 0),
      (try_begin),
        (this_or_next|eq, ":item_type", itp_type_bow),
        (eq, ":item_type", itp_type_arrows),
        (store_skill_level, ":troop_level", "skl_power_draw", ":troop_id"),
      (else_try),
        (eq, ":item_type", itp_type_thrown),
        (store_skill_level, ":troop_level", "skl_power_throw", ":troop_id"),
      (else_try),
        (eq, ":item_type", itp_type_shield),
        (assign, ":troop_level", 0), #disabled for multiplayer troops
      (else_try),
        (eq, ":item_type", itp_type_horse),
        (store_skill_level, ":troop_level", "skl_riding", ":troop_id"),
      (else_try),
        (store_attribute_level, ":troop_level", ":troop_id", ca_strength),
      (try_end),
      (lt, ":troop_level", ":difficulty"),
      (assign, ":fail", 1),
    (try_end),
    (eq, ":fail", 0),
    ]),

  ("cf_change_armor",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":item_id", 2),

    (agent_is_active, ":agent_id"),
    (assign, ":fail", 0),
    (agent_get_player_id, ":player_id", ":agent_id"),
    (try_begin),
      (player_is_active, ":player_id"),
      (agent_get_troop_id, ":troop_id", ":agent_id"),
      (try_begin),
        (call_script, "script_cf_check_troop_can_equip_item", ":troop_id", ":item_id"),
        (player_get_gender, ":player_gender", ":player_id"),
        (item_get_slot, ":item_gender", ":item_id", slot_item_gender),
        (this_or_next|eq, ":item_gender", 0),
        (eq, ":player_gender", ":item_gender"),
      (else_try),
        (assign, ":fail", 1),
        (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, "str_cant_equip_item", preset_message_error),
      (try_end),
      (eq, ":fail", 0),
      (item_get_type, ":item_type", ":item_id"),
      (store_sub, ":player_slot", ":item_type", itp_type_head_armor),
      (val_add, ":player_slot", slot_player_equip_head),
      (player_set_slot, ":player_id", ":player_slot", ":item_id"),
    (else_try),
      (agent_is_non_player, ":agent_id"),
      (agent_is_alive, ":agent_id"),
    (else_try),
      (assign, ":fail", 1),
    (try_end),
    (eq, ":fail", 0),
    (call_script, "script_change_armor", ":agent_id", ":item_id"),
    ]),

  ("change_armor",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":item_id", 2),

    (call_script, "script_agent_equip_armor", ":agent_id", ":item_id"),
    (get_max_players, ":num_players"),
    (try_for_range, ":player_id", 1, ":num_players"),
      (player_is_active, ":player_id"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_agent_equip_armor, ":agent_id", ":item_id"),
    (try_end),
    ]),

  ("agent_equip_armor",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":item_id", 2),

    (try_begin),
      (is_between, ":item_id", all_items_begin, all_items_end),
      (agent_equip_item, ":agent_id", ":item_id"),
    (else_try),
      (is_between, ":item_id", "itm_no_head", "itm_no_horse"),
      (store_sub, ":equip_slot", ":item_id", "itm_no_head"),
      (val_add, ":equip_slot", ek_head),
      (agent_get_item_slot, ":equipped_item_id", ":agent_id", ":equip_slot"),
      (gt, ":equipped_item_id", -1),
      (agent_unequip_item, ":agent_id", ":equipped_item_id"),
    (try_end),
    ]),

  ("agent_remove_empty_ammo_stacks",
   [(store_script_param, ":agent_id", 1),

    (try_for_range, ":equip_slot", ek_item_0, ek_item_3 + 1),
      (agent_get_item_slot, ":item_id", ":agent_id", ":equip_slot"),
      (ge, ":item_id", all_items_begin),
      (item_get_type, ":item_type", ":item_id"),
      (this_or_next|eq, ":item_type", itp_type_arrows),
      (this_or_next|eq, ":item_type", itp_type_bolts),
      (eq, ":item_type", itp_type_thrown),
      (agent_get_ammo_for_slot, ":ammo", ":agent_id", ":equip_slot"),
      (le, ":ammo", 0),
      (val_add, ":equip_slot", 1),
      (agent_unequip_item, ":agent_id", ":item_id", ":equip_slot"),
    (try_end),
    ]),

  ("cf_buy_item",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (call_script, "script_agent_remove_empty_ammo_stacks", ":agent_id"),
    (scene_prop_get_slot, ":item_id", ":instance_id", slot_scene_prop_item_id),
    (is_between, ":item_id", all_items_begin, all_items_end),
    (call_script, "script_scene_prop_get_gold_value", ":instance_id", ":item_id", 0),
    (assign, ":gold_value", reg0),
    (call_script, "script_cf_check_enough_gold", ":player_id", ":gold_value"),
    (assign, ":fail", 0),
    (item_get_type, ":item_type", ":item_id"),
    (try_begin),
      (is_between, ":item_type", itp_type_head_armor, itp_type_hand_armor + 1),
      (try_begin),
        (call_script, "script_cf_change_armor", ":agent_id", ":item_id"),
      (else_try),
        (assign, ":fail", 1),
      (try_end),
    (else_try),
      (set_spawn_position, pos1),
      (eq, ":item_type", itp_type_horse),
      (store_mission_timer_a, ":time"),
      (player_get_slot, ":last_action_time", ":player_id", slot_player_last_action_time),
      (store_sub, ":interval", ":time", ":last_action_time"),
      (try_begin),
        (ge, ":interval", repeat_action_min_interval),
        (spawn_horse, ":item_id"),
        (player_set_slot, ":player_id", slot_player_last_action_time, ":time"),
      (else_try),
        (assign, ":fail", 1),
      (try_end),
    (else_try),
      (spawn_item, ":item_id", 0, "$g_spawn_item_prune_time"),
      (prop_instance_set_position, reg0, pos1),
    (try_end),
    (eq, ":fail", 0),
    (call_script, "script_player_adjust_gold", ":player_id", ":gold_value", -1),
    (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
    (call_script, "script_castle_receive_gold", reg1, ":gold_value", castle_tax_gold_multiplier),
    ]),

  ("cf_sell_item",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (scene_prop_get_slot, ":item_id", ":instance_id", slot_scene_prop_item_id),
    (is_between, ":item_id", all_items_begin, all_items_end),
    (call_script, "script_cf_agent_consume_item", ":agent_id", ":item_id", 1),
    (call_script, "script_scene_prop_get_gold_value", ":instance_id", ":item_id", 0),
    (store_mul, ":gold_value", reg0, sell_item_gold_multiplier),
    (val_div, ":gold_value", 100),
    (call_script, "script_player_adjust_gold", ":player_id", ":gold_value", 1),
    ]),

  ("cf_export_item",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (scene_prop_get_slot, ":item_id", ":instance_id", slot_scene_prop_item_id),
    (is_between, ":item_id", all_items_begin, all_items_end),
    (call_script, "script_cf_agent_consume_item", ":agent_id", ":item_id", 1),
    (call_script, "script_scene_prop_get_gold_value", ":instance_id", ":item_id", base_export_multiplier),
    (assign, ":gold_value", reg0),
    (call_script, "script_player_adjust_gold", ":player_id", ":gold_value", 1),
    (prop_instance_get_variation_id_2, ":tax_multiplier", ":instance_id"),
    (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
    (call_script, "script_castle_receive_gold", reg1, ":gold_value", ":tax_multiplier"),
    ]),

  ("cf_gain_gold",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (scene_prop_get_slot, ":gold_value", ":instance_id", slot_scene_prop_gold_value),
    (call_script, "script_player_adjust_gold", ":player_id", ":gold_value", 1),
    ]),

  ("cf_buy_banner",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (player_get_slot, ":player_faction_id", ":player_id", slot_player_faction_id),
    (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
    (assign, ":faction_id", reg0),
    (try_begin),
      (eq, ":faction_id", ":player_faction_id"),
      (assign, ":fail", 0),
    (else_try),
      (assign, ":fail", 1),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_preset_message, "str_not_a_member_of_s1", preset_message_faction, ":faction_id"),
    (try_end),
    (eq, ":fail", 0),
    (faction_get_slot, ":banner_no", ":faction_id", slot_faction_banner_mesh),
    (val_sub, ":banner_no", banner_meshes_begin),
    (scene_prop_get_slot, ":item_id", ":instance_id", slot_scene_prop_item_id),
    (val_add, ":item_id", ":banner_no"),
    (is_between, ":item_id", banner_items_begin, banner_items_end),
    (call_script, "script_scene_prop_get_gold_value", ":instance_id", ":item_id", 0),
    (assign, ":gold_value", reg0),
    (call_script, "script_cf_check_enough_gold", ":player_id", ":gold_value"),
    (call_script, "script_player_adjust_gold", ":player_id", ":gold_value", -1),
    (prop_instance_get_position, pos1, ":instance_id"),
    (position_move_y, pos1, -5),
    (set_spawn_position, pos1),
    (spawn_item, ":item_id", 0, "$g_spawn_item_prune_time"),
    ]),

  ("cf_use_destroy_heap",
   [(store_script_param, ":agent_id", 1),

    (assign, ":fail", 1),
    (agent_get_horse, ":attach_agent_id", ":agent_id"),
    (try_begin),
      (le, ":attach_agent_id", -1),
      (assign, ":attach_agent_id", ":agent_id"),
    (try_end),
    (agent_get_attached_scene_prop, ":attached_instance_id", ":attach_agent_id"),
    (try_begin),
      (prop_instance_is_valid, ":attached_instance_id"),
      (try_begin),
        (scene_prop_get_slot, ":inventory_slot_end", ":attached_instance_id", slot_scene_prop_inventory_count),
        (gt, ":inventory_slot_end", 0),
        (val_add, ":inventory_slot_end", slot_scene_prop_inventory_begin),
        (try_for_range, ":inventory_slot", slot_scene_prop_inventory_begin, ":inventory_slot_end"),
          (scene_prop_set_slot, ":attached_instance_id", ":inventory_slot", 0),
        (try_end),
        (assign, ":fail", 0),
        (get_max_players, ":max_players"),
        (try_for_range, ":other_player_id", 1, ":max_players"),
          (player_is_active, ":other_player_id"),
          (player_slot_eq, ":other_player_id", slot_player_accessing_instance_id, ":attached_instance_id"),
          (player_set_slot, ":other_player_id", slot_player_accessing_instance_id, 0),
          (multiplayer_send_int_to_player, ":other_player_id", server_event_show_inventory, -1),
        (try_end),
      (try_end),
    (else_try),
      (agent_get_wielded_item, ":item_id", ":agent_id", 0),
      (try_begin),
        (is_between, ":item_id", all_items_begin, all_items_end),
      (else_try),
        (agent_get_wielded_item, ":item_id", ":agent_id", 1),
        (is_between, ":item_id", all_items_begin, all_items_end),
      (else_try),
        (assign, ":item_id", -1),
      (try_end),
      (neq, ":item_id", -1),
      (call_script, "script_cf_agent_consume_item", ":agent_id", ":item_id", 1),
      (try_begin),
        (eq, ":item_id", "itm_money_bag"),
        (call_script, "script_cf_pop_agent_money_bag_value", ":agent_id"),
      (try_end),
      (agent_set_wielded_item, ":agent_id", -1),
      (assign, ":fail", 0),
    (try_end),
    (eq, ":fail", 0),
    ]),

  ("remove_scene_prop",
   [(store_script_param, ":instance_id", 1),
    (position_set_x, pos0, -5000),
    (position_set_y, pos0, -5000),
    (position_set_z, pos0, -5000),
    (prop_instance_set_position, ":instance_id", pos0),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_hidden),
    (prop_instance_enable_physics, ":instance_id", 0),
    ]),

  ("reuse_or_spawn_scene_prop",
   [(store_script_param, ":scene_prop_id", 1),

    (scene_prop_get_num_instances, ":instance_num", ":scene_prop_id"),
    (try_for_range, ":instance_no", 0, ":instance_num"),
      (scene_prop_get_instance, ":instance_id", ":scene_prop_id", ":instance_no"),
      (scene_prop_slot_eq, ":instance_id", slot_scene_prop_state, scene_prop_state_hidden),
      (assign, ":instance_num", -1),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_active),
      (prop_instance_enable_physics, ":instance_id", 1),
      (assign, reg0, ":instance_id"),
    (try_end),
    (try_begin),
      (neq, ":instance_num", -1),
      (set_spawn_position, pos0),
      (spawn_scene_prop, ":scene_prop_id"),
    (try_end),
    ]),

  ("cf_can_use_scene_prop",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":required_scene_prop_id", 3),

    (prop_instance_is_valid, ":instance_id"),
    (prop_instance_get_scene_prop_kind, ":scene_prop_id", ":instance_id"),
    (eq, ":scene_prop_id", ":required_scene_prop_id"),
    (player_is_active, ":player_id"),
    (player_get_agent_id, ":agent_id", ":player_id"),
    (agent_is_alive, ":agent_id"),
    (agent_get_position, pos1, ":agent_id"),
    (prop_instance_get_position, pos2, ":instance_id"),
    (get_distance_between_positions, ":distance", pos1, pos2),
    (le, ":distance", max_distance_to_use),
    ]),

  ("cf_use_castle_money_chest",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":gold_value", 3),

    (assign, ":fail_message", -1),
    (try_begin),
      (neq, ":gold_value", 0),
      (assign, ":fail_message", "str_no_money_chest_nearby"),
      (call_script, "script_cf_can_use_scene_prop", ":player_id", ":instance_id", "spr_pw_castle_money_chest"),
      (scene_prop_get_slot, ":chest_gold", ":instance_id", slot_scene_prop_stack_count),
      (try_begin),
        (lt, ":gold_value", 0),
        (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
        (try_begin),
          (eq, reg1, -1),
        (else_try),
          (neg|multiplayer_is_server),
        (else_try),
          (scene_prop_slot_eq, ":instance_id", slot_scene_prop_unlocked, 1),
        (else_try),
          (player_slot_eq, ":player_id", slot_player_faction_id, reg0),
          (player_slot_eq, ":player_id", slot_player_has_faction_money_key, 1),
        (else_try),
          (player_slot_eq, ":player_id", slot_player_faction_id, reg0),
          (call_script, "script_cf_player_is_lord", ":player_id"),
        (else_try),
          (assign, ":fail_message", "str_cant_open_money_chest"),
        (try_end),
        (neq, ":fail_message", "str_cant_open_money_chest"),
        (assign, ":fail_message", "str_not_enough_money_in_chest"),
        (store_mul, ":gold_requested", ":gold_value", -1),
        (ge, ":chest_gold", ":gold_requested"),
        (try_begin),
          (multiplayer_is_server),
          (val_sub, ":chest_gold", ":gold_requested"),
          (call_script, "script_player_adjust_gold", ":player_id", ":gold_requested", 1),
        (try_end),
        (assign, ":fail_message", 0),
      (else_try),
        (gt, ":gold_value", 0),
        (assign, ":fail_message", "str_dont_have_enough_money"),
        (call_script, "script_cf_check_enough_gold", ":player_id", ":gold_value"),
        (try_begin),
          (multiplayer_is_server),
          (call_script, "script_player_adjust_gold", ":player_id", ":gold_value", -1),
          (val_add, ":chest_gold", ":gold_value"),
        (try_end),
        (assign, ":fail_message", 0),
      (try_end),
    (try_end),
    (try_begin),
      (eq, ":fail_message", 0),
      (try_begin),
        (multiplayer_is_server),
        (scene_prop_set_slot, ":instance_id", slot_scene_prop_stack_count, ":chest_gold"),
        (multiplayer_send_3_int_to_player, ":player_id", server_event_scene_prop_set_slot, ":instance_id", slot_scene_prop_stack_count, ":chest_gold"),
      (else_try),
        (multiplayer_send_3_int_to_server, client_event_transfer_gold, ":instance_id", ":gold_value"),
      (try_end),
    (else_try),
      (multiplayer_is_server),
      (gt, ":fail_message", 0),
      (neq, ":fail_message", "str_dont_have_enough_money"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, ":fail_message", preset_message_error),
    (try_end),
    (assign, reg0, ":fail_message"),
    (eq, ":fail_message", 0),
    ]),

  ("cf_drop_money_bag_item",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":gold_amount", 2),

    (player_get_agent_id, ":agent_id", ":player_id"),
    (agent_is_alive, ":agent_id"),
    (call_script, "script_cf_check_enough_gold", ":player_id", ":gold_amount"),
    (store_mission_timer_a, ":time"),
    (player_get_slot, ":last_action_time", ":player_id", slot_player_last_action_time),
    (store_sub, ":interval", ":time", ":last_action_time"),
    (this_or_next|ge, ":interval", repeat_action_min_interval),
    (player_is_admin, ":player_id"),
    (player_set_slot, ":player_id", slot_player_last_action_time, ":time"),
    (call_script, "script_player_adjust_gold", ":player_id", ":gold_amount", -1),
    (agent_get_position, pos1, ":agent_id"),
    (position_move_y, pos1, 50),
    (set_spawn_position, pos1),
    (spawn_item, "itm_money_bag", 0, "$g_spawn_item_prune_time"),
    (scene_prop_set_slot, reg0, slot_scene_prop_gold_value, ":gold_amount"),
    ]),

  ("cf_pop_agent_money_bag_value",
   [(store_script_param, ":agent_id", 1),

    (assign, ":last_value", 0),
    (try_for_range_backwards, ":value_slot", slot_agent_money_bag_1_value, slot_agent_money_bag_4_value + 1),
      (agent_get_slot, ":value", ":agent_id", ":value_slot"),
      (agent_set_slot, ":agent_id", ":value_slot", ":last_value"),
      (assign, ":last_value", ":value"),
    (try_end),
    (assign, reg0, ":last_value"),
    (gt, ":last_value", 0),
    ]),

  ("cf_use_money_bag_item",
   [(store_script_param, ":agent_id", 1),

    (call_script, "script_cf_agent_consume_item", ":agent_id", "itm_money_bag", 1),
    (call_script, "script_cf_pop_agent_money_bag_value", ":agent_id"),
    (assign, ":gold_value", reg0),
    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (call_script, "script_player_adjust_gold", ":player_id", ":gold_value", 1),
    ]),

  ("check_on_item_picked_up",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":item_id", 2),
    (store_script_param, ":instance_id", 3),

    (try_begin),
      (eq, ":item_id", "itm_money_bag"),
      (scene_prop_get_slot, ":value", ":instance_id", slot_scene_prop_gold_value),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_gold_value, 0),
      (try_for_range, ":value_slot", slot_agent_money_bag_1_value, slot_agent_money_bag_4_value + 1),
        (agent_get_slot, ":next_value", ":agent_id", ":value_slot"),
        (agent_set_slot, ":agent_id", ":value_slot", ":value"),
        (assign, ":value", ":next_value"),
      (try_end),
    (else_try),
      (this_or_next|eq, ":item_id", "itm_invisible_sword"),
      (eq, ":item_id", "itm_admin_scalpel"),
      (agent_get_player_id, ":player_id", ":agent_id"),
      (player_is_active, ":player_id"),
      (neg|player_is_admin, ":player_id"),
      (agent_unequip_item, ":agent_id", ":item_id"),
    (try_end),
    ]),

  ("check_on_item_dropped",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":item_id", 2),
    (store_script_param, ":instance_id", 3),
    (store_script_param, ":agent_died", 4),

    (try_begin),
      (le, ":item_id", "itm_lock_pick"),
    (else_try),
      (eq, ":item_id", "itm_money_bag"),
      (try_begin),
        (call_script, "script_cf_pop_agent_money_bag_value", ":agent_id"),
        (scene_prop_set_slot, ":instance_id", slot_scene_prop_gold_value, reg0),
      (try_end),
    (else_try),
      (is_between, ":item_id", "itm_pw_banner_pole_a01", "itm_pw_banner_castle_fac_1a"),
      (neq, ":agent_died", 1),
      (prop_instance_get_position, pos1, ":instance_id"),
      (position_rotate_x, pos1, 90),
      (prop_instance_set_position, ":instance_id", pos1),
      (assign, ":flag_prune_time", "$g_spawn_item_prune_time"),
      (val_max, ":flag_prune_time", 3600),
      (scene_prop_set_prune_time, ":instance_id", ":flag_prune_time"),
    (else_try),
      (eq, ":item_id", "itm_fishing_net"),
      (prop_instance_get_position, pos1, ":instance_id"),
      (position_get_z, ":height", pos1),
      (try_begin),
        (lt, ":height", -100),
        (agent_get_troop_id, ":troop_id", ":agent_id"),
        (store_skill_level, ":placement_skill", "skl_labouring", ":troop_id"),
      (else_try),
        (assign, ":placement_skill", 0),
      (try_end),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_position, ":placement_skill"),
    (else_try),
      (this_or_next|eq, ":item_id", "itm_invisible_sword"),
      (eq, ":item_id", "itm_admin_scalpel"),
      (init_position, pos1),
      (position_set_z, pos1, z_position_to_hide_object),
      (prop_instance_set_position, ":instance_id", pos1),
      (scene_prop_set_prune_time, ":instance_id", 1),
    (try_end),
    ]),

  ("scene_prop_adjust_hit",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_damage", 2),
    (store_script_param, ":hardness", 3),
    (store_script_param, ":tool_class", 4),
    (store_script_param, ":skill_id", 5),
    (store_script_param, ":attack_direction_range", 6),
    (set_fixed_point_multiplier, 1),
    (position_get_x, ":agent_id", pos2),
    (set_fixed_point_multiplier, 100),

    (try_begin),
      (gt, ":skill_id", -1),
      (agent_get_troop_id, ":troop_id", ":agent_id"),
      (store_skill_level, ":skill", ":skill_id", ":troop_id"),
      (try_begin),
        (le, ":skill", 0),
        (val_mul, ":hit_damage", 10),
      (else_try),
        (val_mul, ":hit_damage", 50),
        (val_mul, ":hit_damage", ":skill"),
      (try_end),
    (else_try),
      (val_mul, ":hit_damage", 100),
    (try_end),
    (try_begin),
      (ge, ":hit_damage", 100),
      (try_begin),
        (gt, ":attack_direction_range", -1),
        (store_div, ":attack_direction_end", ":attack_direction_range", 10),
        (val_mod, ":attack_direction_range", 10),
        (val_add, ":attack_direction_end", ":attack_direction_range"),
        (val_add, ":attack_direction_end", 1),
        (agent_get_action_dir, ":attack_direction", ":agent_id"),
        (neg|is_between, ":attack_direction", ":attack_direction_range", ":attack_direction_end"),
        (val_div, ":hit_damage", 3),
      (try_end),
      (ge, ":hit_damage", 100),
      (try_begin),
        (gt, ":tool_class", -1),
        (agent_get_wielded_item, ":wielded_item", ":agent_id", 0),
        (try_begin),
          (gt, ":wielded_item", -1),
          (item_get_slot, ":wielded_item_class", ":wielded_item", slot_item_class),
          (eq, ":wielded_item_class", ":tool_class"),
        (else_try),
          (val_div, ":hit_damage", 5),
        (try_end),
      (try_end),
      (val_max, ":hardness", 1),
      (val_div, ":hit_damage", ":hardness"),
    (try_end),
    (val_div, ":hit_damage", 100),
    (scene_prop_get_hit_points, ":hit_points", ":instance_id"),
    (val_sub, ":hit_points", ":hit_damage"),
    (try_begin),
      (lt, ":hit_points", min_scene_prop_hit_points),
      (val_add, ":hit_damage", ":hit_points"),
      (val_sub, ":hit_damage", min_scene_prop_hit_points),
      (assign, ":hit_points", min_scene_prop_hit_points),
    (try_end),
    (set_trigger_result, ":hit_damage"),
    (assign, reg0, ":agent_id"),
    (assign, reg1, ":hit_damage"),
    (assign, reg2, ":hit_points"),
    ]),

  ("cf_check_drop_resource",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_points", 2),
    (store_script_param, ":hit_points_for_resource", 3),
    (store_script_param, ":random_adjustment", 4),

    (scene_prop_get_slot, ":next_resource_hp", ":instance_id", slot_scene_prop_next_resource_hp),
    (assign, reg0, 0),
    (assign, ":loop_condition", 10),
    (try_for_range, ":unused", 0, ":loop_condition"),
      (try_begin),
        (ge, ":next_resource_hp", ":hit_points"),
        (val_sub, ":next_resource_hp", ":hit_points_for_resource"),
        (try_begin),
          (gt, ":random_adjustment", 0),
          (store_random_in_range, ":random_hp", 0, ":random_adjustment"),
          (val_sub, ":next_resource_hp", ":random_hp"),
        (try_end),
        (val_add, reg0, 1),
      (else_try),
        (assign, ":loop_condition", -1),
      (try_end),
    (try_end),
    (neq, reg0, 0),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_next_resource_hp, ":next_resource_hp"),
    ]),

  ("cf_hit_tree",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_damage", 2),
    (store_script_param, ":fell_tree_hit_points", 3),
    (store_script_param, ":hit_points_for_resource", 4),
    (store_script_param, ":hardness", 5),
    (store_script_param, ":resource_imod", 6),
    (store_script_param, ":regrow_interval", 7),

    (scene_prop_get_slot, ":state", ":instance_id", slot_scene_prop_state),
    (assign, ":break_effect", 0),
    (try_begin),
      (this_or_next|eq, ":state", scene_prop_state_active),
      (eq, ":state", scene_prop_state_destroyed),
      (call_script, "script_scene_prop_adjust_hit", ":instance_id", ":hit_damage", ":hardness", item_class_wood_cutting, "skl_labouring", 11),
      (assign, ":agent_id", reg0),
      (assign, ":hit_damage", reg1),
      (assign, ":hit_points", reg2),
      (try_begin),
        (lt, ":hit_points", ":fell_tree_hit_points"),
        (try_begin),
          (eq, ":state", scene_prop_state_destroyed),
          (le, ":hit_points", min_scene_prop_hit_points),
          (prop_instance_get_position, pos2, ":instance_id"),
          (position_move_z, pos2, -5000, 1),
          (prop_instance_animate_to_position, ":instance_id", pos2, 2000),
          (call_script, "script_add_resource_to_regrow_list", ":instance_id", ":regrow_interval"),
        (else_try),
          (eq, ":state", scene_prop_state_active),
          (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_destroyed),
          (prop_instance_get_starting_position, pos2, ":instance_id"),
          (copy_position, pos3, pos2),
          (assign, ":trunk_angle", 90),
          (try_for_range, ":count", 1, 4),
            (position_move_x, pos3, 500),
            (position_get_distance_to_ground_level, ":ground_distance", pos3),
            (store_sub, ":slope_ratio", ":ground_distance", 30),
            (val_abs, ":slope_ratio"),
            (convert_to_fixed_point, ":slope_ratio"),
            (store_mul, ":trunk_distance", ":count", 500),
            (val_div, ":slope_ratio", ":trunk_distance"),
            (store_atan, ":test_angle", ":slope_ratio"),
            (convert_from_fixed_point, ":test_angle"),
            (try_begin),
              (lt, ":ground_distance", 0),
              (val_mul, ":test_angle", -1),
            (try_end),
            (val_min, ":trunk_angle", ":test_angle"),
          (try_end),
          (val_add, ":trunk_angle", 90),
          (position_rotate_y, pos2, ":trunk_angle"),
          (prop_instance_animate_to_position, ":instance_id", pos2, 300),
          (assign, ":break_effect", 1),
        (try_end),
        (assign, ":resource_item_id", "itm_wood_block"),
      (else_try),
        (assign, ":resource_item_id", "itm_branch"),
      (try_end),
      (try_begin),
        (call_script, "script_cf_check_drop_resource", ":instance_id", ":hit_points", ":hit_points_for_resource", 0),
        (assign, ":resource_count", reg0),
        (try_for_range, ":unused", 0, ":resource_count"),
          (call_script, "script_set_random_spawn_position", 200),
          (spawn_item, ":resource_item_id", ":resource_imod", "$g_spawn_item_prune_time"),
        (try_end),
        (assign, ":break_effect", 1),
      (try_end),
    (else_try),
      (assign, ":hit_damage", 0),
      (set_trigger_result, 0),
      (set_fixed_point_multiplier, 1),
      (position_get_x, ":agent_id", pos2),
      (set_fixed_point_multiplier, 100),
    (try_end),
    (try_begin),
      (eq, ":break_effect", 1),
      (particle_system_burst, "psys_dummy_straw", pos1, 40),
      (particle_system_burst, "psys_gourd_piece_2", pos1, 5),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood_break"),
    (else_try),
      (ge, ":hit_damage", 5),
      (particle_system_burst, "psys_dummy_straw", pos1, 10),
      (particle_system_burst, "psys_gourd_piece_2", pos1, 2),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood"),
    (else_try),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood_scratch"),
    (try_end),
    ]),

  ("add_resource_to_regrow_list",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":regrow_interval", 2),

    (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_hidden),
    (store_mission_timer_a, ":time"),
    (val_add, ":time", ":regrow_interval"),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_state_time, ":time"),
    (troop_get_slot, ":resources_count", "trp_removed_scene_props", slot_array_count),
    (store_add, ":loop_end", ":resources_count", slot_array_begin),
    (try_for_range, ":resource_slot", slot_array_begin, ":loop_end"),
      (neg|troop_slot_ge, "trp_removed_scene_props", ":resource_slot", 1),
      (troop_set_slot, "trp_removed_scene_props", ":resource_slot", ":instance_id"),
      (assign, ":loop_end", -1),
    (try_end),
    (try_begin),
      (neq, ":loop_end", -1),
      (troop_set_slot, "trp_removed_scene_props", ":loop_end", ":instance_id"),
      (val_add, ":resources_count", 1),
      (troop_set_slot, "trp_removed_scene_props", slot_array_count, ":resources_count"),
    (try_end),
    ]),

  ("regrow_resource",
   [(store_script_param, ":instance_id", 1),

    (prop_instance_get_starting_position, pos1, ":instance_id"),
    (copy_position, pos2, pos1),
    (position_move_z, pos2, -5000, 1),
    (prop_instance_set_position, ":instance_id", pos2),
    (prop_instance_animate_to_position, ":instance_id", pos1, 6000),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_regenerating),
    (prop_instance_enable_physics, ":instance_id", 1),
    ]),

  ("cf_resource_animation_finished",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_points_for_resource", 2),

    (scene_prop_get_slot, ":state", ":instance_id", slot_scene_prop_state),
    (try_begin),
      (eq, ":state", scene_prop_state_regenerating),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_active),
      (scene_prop_get_slot, ":full_hit_points", ":instance_id", slot_scene_prop_full_hit_points),
      (scene_prop_set_hit_points, ":instance_id", ":full_hit_points"),
      (val_sub, ":full_hit_points", ":hit_points_for_resource"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_next_resource_hp, ":full_hit_points"),
    (else_try),
      (eq, ":state", scene_prop_state_hidden),
      (prop_instance_enable_physics, ":instance_id", 0),
    (try_end),
    ]),

  ("initialize_resource_hit_points",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_points_for_resource", 2),

    (prop_instance_get_variation_id, ":start_hit_points", ":instance_id"),
    (val_mul, ":start_hit_points", 120),
    (val_clamp, ":start_hit_points", 120, max_correctly_displayed_hp + 1),
    (scene_prop_set_hit_points, ":instance_id", ":start_hit_points"),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_full_hit_points, ":start_hit_points"),
    (try_begin),
      (multiplayer_is_server),
      (val_sub, ":start_hit_points", ":hit_points_for_resource"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_next_resource_hp, ":start_hit_points"),
    (try_end),
    ]),

  ("cf_hit_regrowing_resource",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_damage", 2),
    (store_script_param, ":hit_points_for_resource", 3),
    (store_script_param, ":resource_item_id", 4),
    (store_script_param, ":hardness", 5),
    (store_script_param, ":tool_class", 6),
    (store_script_param, ":skill_id", 7),
    (store_script_param, ":attack_direction_range", 8),
    (store_script_param, ":spawn_on_ground", 9),
    (store_script_param, ":regrow_interval", 10),
    (store_script_param, ":effect_script_id", 11),
    (store_script_param, ":random_hit_points_adjustment", 12),

    (scene_prop_get_slot, ":state", ":instance_id", slot_scene_prop_state),
    (try_begin),
      (eq, ":state", scene_prop_state_active),
      (call_script, "script_scene_prop_adjust_hit", ":instance_id", ":hit_damage", ":hardness", ":tool_class", ":skill_id", ":attack_direction_range"),
      (assign, ":agent_id", reg0),
      (assign, ":hit_damage", reg1),
      (assign, ":hit_points", reg2),
      (assign, ":resource_count", 0),
      (try_begin),
        (le, ":hit_points", min_scene_prop_hit_points),
        (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_hidden),
        (prop_instance_get_starting_position, pos2, ":instance_id"),
        (position_move_z, pos2, -1000, 1),
        (prop_instance_animate_to_position, ":instance_id", pos2, 500),
        (particle_system_burst, "psys_dummy_smoke", pos2, 10),
        (call_script, "script_add_resource_to_regrow_list", ":instance_id", ":regrow_interval"),
        (assign, ":resource_count", -1),
      (else_try),
        (call_script, "script_cf_check_drop_resource", ":instance_id", ":hit_points", ":hit_points_for_resource", ":random_hit_points_adjustment"),
        (assign, ":resource_count", reg0),
        (try_for_range, ":unused", 0, ":resource_count"),
          (try_begin),
            (eq, ":spawn_on_ground", 1),
            (call_script, "script_set_random_spawn_position", 50),
          (else_try),
            (set_spawn_position, pos1),
          (try_end),
          (spawn_item, ":resource_item_id", 0, "$g_spawn_item_prune_time"),
        (try_end),
      (try_end),
      (try_begin),
        (gt, ":effect_script_id", -1),
        (agent_is_active, ":agent_id"),
        (call_script, ":effect_script_id", ":agent_id", ":instance_id", ":hit_damage", ":resource_count"),
      (try_end),
    (else_try),
      (set_trigger_result, 0),
    (try_end),
    ]),

  ("hit_iron_mine_effect",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":hit_damage", 3),
    (store_script_param, ":resource_count", 4),

    (try_begin),
      (eq, ":resource_count", -1),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_body_fall_big"),
      (particle_system_burst, "psys_dummy_smoke", pos1, 15),
    (else_try),
      (gt, ":resource_count", 0),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_body_fall_small"),
      (particle_system_burst, "psys_dummy_smoke", pos1, 5),
    (else_try),
      (ge, ":hit_damage", 5),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_mining_hit"),
    (else_try),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_mining_scratch"),
    (try_end),
    ]),

  ("hit_bush_effect",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":unused", 3),
    (store_script_param, ":resource_count", 4),

    (try_begin),
      (gt, ":resource_count", 0),
      (particle_system_burst, "psys_dummy_straw", pos1, 3),
    (try_end),
    (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood_scratch"),
    ]),

  ("setup_linked_scene_props",
   [(store_script_param, ":scene_prop_id", 1),

    (scene_prop_get_num_instances, ":num_instances", ":scene_prop_id"),
    (try_for_range, ":begin_scene_prop_no", 0, ":num_instances"),
      (scene_prop_get_instance, ":begin_instance_id", ":scene_prop_id", ":begin_scene_prop_no"),
      (scene_prop_slot_eq, ":begin_instance_id", slot_scene_prop_linked_scene_prop, 0),
      (prop_instance_get_variation_id_2, ":begin_var_2", ":begin_instance_id"),
      (prop_instance_get_position, pos1, ":begin_instance_id"),
      (try_for_range, ":linked_scene_prop_no", 0, linked_scene_prop_slot_count),
        (store_add, ":linked_scene_prop_param_no", ":linked_scene_prop_no", 2),
        (store_script_param, ":linked_scene_prop_id", ":linked_scene_prop_param_no"),
        (gt, ":linked_scene_prop_id", -1),
        (store_add, ":linked_scene_prop_slot", slot_scene_prop_linked_scene_prop, ":linked_scene_prop_no"),
        (assign, ":nearest_instance_id", -1),
        (assign, ":nearest_distance", -1),
        (scene_prop_get_num_instances, ":num_check_instances", ":linked_scene_prop_id"),
        (try_for_range, ":check_scene_prop_no", 0, ":num_check_instances"),
          (scene_prop_get_instance, ":check_instance_id", ":linked_scene_prop_id", ":check_scene_prop_no"),
          (neq, ":check_instance_id", ":begin_instance_id"),
          (prop_instance_get_variation_id_2, ":check_var_2", ":check_instance_id"),
          (eq, ":check_var_2", ":begin_var_2"),
          (scene_prop_slot_eq, ":check_instance_id", slot_scene_prop_linked_scene_prop, 0),
          (prop_instance_get_position, pos2, ":check_instance_id"),
          (get_sq_distance_between_positions, ":check_distance", pos1, pos2),
          (this_or_next|eq, ":nearest_distance", -1),
          (lt, ":check_distance", ":nearest_distance"),
          (assign, ":nearest_distance", ":check_distance"),
          (assign, ":nearest_instance_id", ":check_instance_id"),
        (try_end),
        (scene_prop_set_slot, ":begin_instance_id", ":linked_scene_prop_slot", ":nearest_instance_id"),
        (try_begin),
          (gt, ":nearest_instance_id", -1),
          (scene_prop_set_slot, ":nearest_instance_id", slot_scene_prop_linked_scene_prop, ":begin_instance_id"),
        (else_try),
          (assign, reg10, ":begin_instance_id"),
          (prop_instance_get_scene_prop_kind, reg11, ":begin_instance_id"),
          (assign, reg12, ":linked_scene_prop_id"),
          (display_message, "str_error_unable_to_find_link_scene_prop"),
        (try_end),
      (try_end),
    (try_end),
    ]),

  ("setup_all_linked_scene_props", []),
  ("setup_scene_props_after_mission_start", []),

  ("cf_agent_pick_lock",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":probablity_multiplier", 2),

    (assign, reg0, 0),
    (agent_get_wielded_item, ":wielded_item_id", ":agent_id", 0),
    (gt, ":wielded_item_id", -1),
    (item_slot_eq, ":wielded_item_id", slot_item_class, item_class_lock_pick),
    (agent_get_troop_id, ":troop_id", ":agent_id"),
    (store_skill_level, ":looting", "skl_looting", ":troop_id"),
    (gt, ":looting", 0),
    (assign, reg0, ":looting"),
    (val_max, ":probablity_multiplier", 1),
    (val_mul, ":looting", ":probablity_multiplier"),
    (store_random_in_range, ":random", 0, 10000),
    (try_begin),
      (ge, ":random", ":looting"),
      (agent_play_sound, ":agent_id", "snd_pick_lock_fail"),
    (try_end),
    (lt, ":random", ":looting"),
    ]),

  ("cf_use_teleport_door",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":x_offset", 3),
    (store_script_param, ":y_offset", 4),
    (store_script_param, ":z_offset", 5),

    (scene_prop_get_slot, ":linked_door_instance_id", ":instance_id", slot_scene_prop_linked_scene_prop),
    (gt, ":linked_door_instance_id", 0),
    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (player_get_slot, ":player_faction_id", ":player_id", slot_player_faction_id),
    (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
    (assign, ":faction_id", reg0),
    (assign, ":fail", 0),
    (try_begin),
      (eq, ":faction_id", "fac_commoners"),
    (else_try),
      (eq, ":faction_id", ":player_faction_id"),
      (player_slot_eq, ":player_id", slot_player_has_faction_door_key, 1),
      (try_begin),
        (scene_prop_slot_eq, ":instance_id", slot_scene_prop_unlocked, 1),
        (scene_prop_set_slot, ":instance_id", slot_scene_prop_unlocked, 0),
        (scene_prop_set_slot, ":linked_door_instance_id", slot_scene_prop_unlocked, 0),
        (agent_play_sound, ":agent_id", "snd_lock"),
      (try_end),
    (else_try),
      (scene_prop_slot_eq, ":instance_id", slot_scene_prop_unlocked, 1),
    (else_try),
      (call_script, "script_cf_agent_pick_lock", ":agent_id", 100),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_unlocked, 1),
      (scene_prop_set_slot, ":linked_door_instance_id", slot_scene_prop_unlocked, 1),
    (else_try),
      (assign, ":fail", 1),
      (gt, reg0, 0),
    (else_try),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_preset_message, "str_door_locked_by_s1", preset_message_faction|preset_message_fail_sound, ":faction_id"),
    (try_end),
    (eq, ":fail", 0),
    (prop_instance_get_position, pos1, ":linked_door_instance_id"),
    (position_move_x, pos1, ":x_offset"),
    (position_move_y, pos1, ":y_offset"),
    (position_move_z, pos1, ":z_offset"),
    (agent_set_position, ":agent_id", pos1),
    ]),

  ("cf_lock_teleport_door",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
    (neq, reg0, "fac_commoners"),
    (assign, ":faction_id", reg0),
    (assign, ":fail", 1),
    (try_begin),
      (scene_prop_slot_eq, ":instance_id", slot_scene_prop_unlocked, 0),
      (agent_play_sound, ":agent_id", "snd_pick_lock_fail"),
    (else_try),
      (player_slot_eq, ":player_id", slot_player_faction_id, ":faction_id"),
      (player_slot_eq, ":player_id", slot_player_has_faction_door_key, 1),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_unlocked, 0),
      (scene_prop_get_slot, ":linked_door_instance_id", ":instance_id", slot_scene_prop_linked_scene_prop),
      (try_begin),
        (gt, ":linked_door_instance_id", 0),
        (scene_prop_set_slot, ":linked_door_instance_id", slot_scene_prop_unlocked, 0),
      (try_end),
      (agent_play_sound, ":agent_id", "snd_lock"),
      (assign, ":fail", 0),
    (try_end),
    (eq, ":fail", 0),
    ]),

  ("cf_agent_consume_items",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":item_1_id", 2),
    (store_script_param, ":item_2_id", 3),
    (store_script_param, ":item_3_id", 4),
    (store_script_param, ":item_4_id", 5),

    (assign, ":item_1_slot", -1),
    (assign, ":item_2_slot", -1),
    (assign, ":item_3_slot", -1),
    (assign, ":item_4_slot", -1),
    (try_for_range, ":equip_slot", ek_item_0, ek_item_3 + 1),
      (agent_get_item_slot, ":item_id", ":agent_id", ":equip_slot"),
      (ge, ":item_id", all_items_begin),
      (store_add, ":offset_slot", ":equip_slot", 1),
      (try_begin),
        (eq, ":item_id", ":item_1_id"),
        (eq, ":item_1_slot", -1),
        (assign, ":item_1_slot", ":offset_slot"),
      (else_try),
        (eq, ":item_id", ":item_2_id"),
        (eq, ":item_2_slot", -1),
        (assign, ":item_2_slot", ":offset_slot"),
      (else_try),
        (eq, ":item_id", ":item_3_id"),
        (eq, ":item_3_slot", -1),
        (assign, ":item_3_slot", ":offset_slot"),
      (else_try),
        (eq, ":item_id", ":item_4_id"),
        (eq, ":item_4_slot", -1),
        (assign, ":item_4_slot", ":offset_slot"),
      (try_end),
    (try_end),
    (this_or_next|lt, ":item_1_id", all_items_begin),
    (gt, ":item_1_slot", -1),
    (this_or_next|lt, ":item_2_id", all_items_begin),
    (gt, ":item_2_slot", -1),
    (this_or_next|lt, ":item_3_id", all_items_begin),
    (gt, ":item_3_slot", -1),
    (this_or_next|lt, ":item_4_id", all_items_begin),
    (gt, ":item_4_slot", -1),
    (try_begin),
      (gt, ":item_1_slot", -1),
      (agent_unequip_item, ":agent_id", ":item_1_id", ":item_1_slot"),
    (try_end),
    (try_begin),
      (gt, ":item_2_slot", -1),
      (agent_unequip_item, ":agent_id", ":item_2_id", ":item_2_slot"),
    (try_end),
    (try_begin),
      (gt, ":item_3_slot", -1),
      (agent_unequip_item, ":agent_id", ":item_3_id", ":item_3_slot"),
    (try_end),
    (try_begin),
      (gt, ":item_4_slot", -1),
      (agent_unequip_item, ":agent_id", ":item_4_id", ":item_4_slot"),
    (try_end),
    (assign, reg1, ":item_1_slot"),
    (assign, reg2, ":item_2_slot"),
    (assign, reg3, ":item_3_slot"),
    (assign, reg4, ":item_4_slot"),
    ]),

  ("cf_agent_consume_resource",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":resource_class", 2),
    (store_script_param, ":maximum_required", 3),

    (assign, ":amount_found", 0),
    (assign, ":loop_end", ek_item_3 + 1),
    (try_for_range, ":equip_slot", ek_item_0, ":loop_end"),
      (agent_get_item_slot, ":item_id", ":agent_id", ":equip_slot"),
      (ge, ":item_id", all_items_begin),
      (item_slot_eq, ":item_id", slot_item_class, ":resource_class"),
      (item_get_slot, ":item_amount", ":item_id", slot_item_resource_amount),
      (gt, ":item_amount", 0),
      (val_add, ":amount_found", ":item_amount"),
      (store_add, ":offset_slot", ":equip_slot", 1),
      (agent_unequip_item, ":agent_id", ":item_id", ":offset_slot"),
      (ge, ":amount_found", ":maximum_required"),
      (assign, ":loop_end", -1),
    (try_end),
    (assign, reg0, ":amount_found"),
    (gt, ":amount_found", 0),
    ]),

  ("cf_agent_consume_item",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":item_id", 2),
    (store_script_param, ":count", 3),

    (agent_has_item_equipped, ":agent_id", ":item_id"),
    (item_get_type, ":item_type", ":item_id"),
    (try_begin),
      (neq, ":item_type", itp_type_arrows),
      (neq, ":item_type", itp_type_bolts),
      (neq, ":item_type", itp_type_thrown),
      (assign, ":check_max_ammo", 0),
    (else_try),
      (item_get_slot, ":check_max_ammo", ":item_id", slot_item_max_ammo),
    (try_end),
    (assign, ":found", 0),
    (assign, ":loop_end", ek_item_3 + 1),
    (try_for_range, ":equip_slot", ek_item_0, ":loop_end"),
      (agent_get_item_slot, ":equip_item_id", ":agent_id", ":equip_slot"),
      (eq, ":equip_item_id", ":item_id"),
      (try_begin),
        (gt, ":check_max_ammo", 0),
        (agent_get_ammo_for_slot, ":ammo", ":agent_id", ":equip_slot"),
        (lt, ":ammo", ":check_max_ammo"),
      (else_try),
        (store_add, ":offset_slot", ":equip_slot", 1),
        (troop_set_slot, "trp_temp_array", ":found", ":offset_slot"),
        (val_add, ":found", 1),
        (ge, ":found", ":count"),
        (assign, ":loop_end", -1),
      (try_end),
    (try_end),
    (ge, ":found", ":count"),
    (try_for_range, ":index", 0, ":count"),
      (troop_get_slot, ":offset_slot", "trp_temp_array", ":index"),
      (agent_unequip_item, ":agent_id", ":item_id", ":offset_slot"),
    (try_end),
    ]),

  ("spawn_processed_resources",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":processed_item_id", 2),
    (store_script_param, ":processed_item_count", 3),

    (val_min, ":processed_item_count", 10),
    (agent_get_position, pos1, ":agent_id"),
    (position_set_z_to_ground_level, pos1),
    (position_move_y, pos1, 10),
    (store_div, ":move_x", ":processed_item_count", 2),
    (val_mul, ":move_x", -10),
    (position_move_x, pos1, ":move_x"),
    (try_for_range, ":unused", 0, ":processed_item_count"),
      (set_spawn_position, pos1),
      (spawn_item, ":processed_item_id", 0, "$g_spawn_item_prune_time"),
      (position_move_x, pos1, 10),
    (try_end),
    ]),

  ("cf_process_wood",
   [(store_script_param, ":agent_id", 1),

    (agent_get_troop_id, ":troop_id", ":agent_id"),
    (store_skill_level, ":engineer", "skl_engineer", ":troop_id"),
    (ge, ":engineer", 1),
    (agent_get_wielded_item, ":resource_item_id", ":agent_id", 0),
    (ge, ":resource_item_id", all_items_begin),
    (item_slot_eq, ":resource_item_id", slot_item_class, item_class_wood),
    (assign, ":processed_item_id", -1),
    (assign, ":processed_item_count", 1),
    (try_begin),
      (eq, ":resource_item_id", "itm_branch"),
      (assign, ":processed_item_id", "itm_wood_pole"),
    (else_try),
      (eq, ":resource_item_id", "itm_wood_pole"),
      (assign, ":processed_item_id", "itm_wood_pole_short"),
      (assign, ":processed_item_count", 2),
    (else_try),
      (eq, ":resource_item_id", "itm_wood_pole_short"),
      (assign, ":processed_item_id", "itm_stick"),
      (assign, ":processed_item_count", 2),
    (else_try),
      (eq, ":resource_item_id", "itm_wood_block"),
      (assign, ":processed_item_id", "itm_board"),
      (assign, ":processed_item_count", 4),
    (try_end),
    (neq, ":processed_item_id", -1),
    (call_script, "script_cf_agent_consume_item", ":agent_id", ":resource_item_id", 1),
    (call_script, "script_spawn_processed_resources", ":agent_id", ":processed_item_id", ":processed_item_count"),
    (agent_play_sound, ":agent_id", "snd_saw_wood"),
    ]),

  ("cf_process_iron",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_troop_id, ":troop_id", ":agent_id"),
    (store_skill_level, ":engineer", "skl_engineer", ":troop_id"),
    (ge, ":engineer", 2),
    (agent_get_wielded_item, ":resource_item_id", ":agent_id", 0),
    (ge, ":resource_item_id", all_items_begin),
    (this_or_next|item_slot_eq, ":resource_item_id", slot_item_class, item_class_iron),
    (item_slot_eq, ":resource_item_id", slot_item_class, item_class_precious),
    (assign, ":processed_item_id", -1),
    (assign, ":processed_item_count", 1),
    (assign, ":resource_item_count", 1),
    (prop_instance_get_position, pos1, ":instance_id"),
    (agent_get_position, pos2, ":agent_id"),
    (position_transform_position_to_local, pos3, pos1, pos2),
    (position_get_y, ":relative_y_position", pos3),
    (try_begin),
      (eq, ":resource_item_id", "itm_iron_ore"),
      (assign, ":processed_item_count", 2),
      (assign, ":processed_item_id", "itm_iron_bar"),
    (else_try),
      (eq, ":resource_item_id", "itm_iron_ore_small"),
      (assign, ":processed_item_count", 2),
      (assign, ":processed_item_id", "itm_iron_bar_short"),
    (else_try),
      (eq, ":resource_item_id", "itm_gold_nugget"),
      (assign, ":processed_item_count", 1),
      (assign, ":resource_item_count", 4),
      (assign, ":processed_item_id", "itm_gold_bar"),
    (else_try),
      (eq, ":resource_item_id", "itm_silver_nugget"),
      (assign, ":processed_item_count", 1),
      (assign, ":resource_item_count", 4),
      (assign, ":processed_item_id", "itm_silver_bar"),
    (else_try),
      (ge, ":relative_y_position", 0),
      (assign, ":processed_item_count", 2),
      (try_begin),
        (eq, ":resource_item_id", "itm_iron_bar_short"),
        (assign, ":processed_item_id", "itm_iron_piece"),
      (else_try),
        (eq, ":resource_item_id", "itm_iron_bar"),
        (assign, ":processed_item_id", "itm_iron_bar_short"),
      (else_try),
        (eq, ":resource_item_id", "itm_iron_bar_long"),
        (assign, ":processed_item_id", "itm_iron_bar"),
      (try_end),
    (else_try),
      (assign, ":resource_item_count", 2),
      (eq, ":resource_item_id", "itm_iron_piece"),
      (assign, ":processed_item_id", "itm_iron_bar_short"),
    (else_try),
      (eq, ":resource_item_id", "itm_iron_bar_short"),
      (assign, ":processed_item_id", "itm_iron_bar"),
    (else_try),
      (eq, ":resource_item_id", "itm_iron_bar"),
      (assign, ":processed_item_id", "itm_iron_bar_long"),
    (try_end),
    (ge, ":processed_item_id", all_items_begin),
    (call_script, "script_cf_agent_consume_item", ":agent_id", ":resource_item_id", ":resource_item_count"),
    (call_script, "script_spawn_processed_resources", ":agent_id", ":processed_item_id", ":processed_item_count"),
    (agent_play_sound, ":agent_id", "snd_blacksmith"),
    ]),

  ("cf_use_resource_stockpile",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (scene_prop_get_slot, ":item_id", ":instance_id", slot_scene_prop_item_id),
    (is_between, ":item_id", all_items_begin, all_items_end),
    (scene_prop_get_slot, ":stack_count", ":instance_id", slot_scene_prop_stack_count),
    (agent_get_wielded_item, ":weapon_item_id", ":agent_id", 0),
    (agent_get_wielded_item, ":shield_item_id", ":agent_id", 1),
    (assign, ":fail", 0),
    (try_begin),
      (this_or_next|eq, ":weapon_item_id", ":item_id"),
      (eq, ":shield_item_id", ":item_id"),
      (call_script, "script_cf_sell_item", ":agent_id", ":instance_id"),
      (val_add, ":stack_count", 1),
    (else_try),
      (gt, ":stack_count", 0),
      (call_script, "script_scene_prop_get_gold_value", ":instance_id", ":item_id", 0),
      (assign, ":gold_value", reg0),
      (call_script, "script_cf_check_enough_gold", ":player_id", ":gold_value"),
      (call_script, "script_player_adjust_gold", ":player_id", ":gold_value", -1),
      (call_script, "script_spawn_processed_resources", ":agent_id", ":item_id", 1),
      (val_sub, ":stack_count", 1),
    (else_try),
      (assign, ":fail", 1),
      (multiplayer_send_int_to_player, ":player_id", server_event_play_sound, "snd_failure"),
    (try_end),
    (eq, ":fail", 0),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_stack_count, ":stack_count"),
    (multiplayer_send_3_int_to_player, ":player_id", server_event_scene_prop_set_slot, ":instance_id", slot_scene_prop_stack_count, ":stack_count"),
    ]),

  ("cf_use_item_stockpile",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":skill_required", 3),
    (store_script_param, ":resource_1_item_id", 4),
    (store_script_param, ":resource_2_item_id", 5),
    (store_script_param, ":resource_3_item_id", 6),
    (store_script_param, ":resource_4_item_id", 7),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (scene_prop_get_slot, ":item_id", ":instance_id", slot_scene_prop_item_id),
    (is_between, ":item_id", all_items_begin, all_items_end),
    (scene_prop_get_slot, ":stack_count", ":instance_id", slot_scene_prop_stack_count),
    (assign, ":fail", 0),
    (try_begin),
      (le, ":resource_1_item_id", -1),
      (agent_get_wielded_item, ":weapon_item_id", ":agent_id", 0),
      (agent_get_wielded_item, ":shield_item_id", ":agent_id", 1),
      (try_begin),
        (this_or_next|eq, ":weapon_item_id", ":item_id"),
        (eq, ":shield_item_id", ":item_id"),
        (call_script, "script_cf_sell_item", ":agent_id", ":instance_id"),
        (val_add, ":stack_count", 1),
      (else_try),
        (gt, ":stack_count", 0),
        (eq, ":weapon_item_id", -1),
        (call_script, "script_cf_buy_item", ":agent_id", ":instance_id"),
        (val_sub, ":stack_count", 1),
      (else_try),
        (eq, ":stack_count", 0),
        (assign, ":fail", 1),
        (multiplayer_send_int_to_player, ":player_id", server_event_play_sound, "snd_failure"),
      (try_end),
    (else_try),
      (agent_get_troop_id, ":troop_id", ":agent_id"),
      (store_skill_level, ":engineer", "skl_engineer", ":troop_id"),
      (assign, ":error_string_id", "str_craft_not_skilled"),
      (ge, ":engineer", ":skill_required"),
      (assign, ":error_string_id", "str_craft_wrong_resources"),
      (call_script, "script_cf_agent_consume_items", ":agent_id", ":resource_1_item_id", ":resource_2_item_id", ":resource_3_item_id", ":resource_4_item_id"),
      (store_sub, ":gold_reward", 100, ":stack_count"),
      (val_clamp, ":gold_reward", 0, 100),
      (val_mul, ":gold_reward", ":skill_required"),
      (val_mul, ":gold_reward", craft_skill_reward_gold_multiplier),
      (val_div, ":gold_reward", 100),
      (try_begin),
        (ge, ":resource_1_item_id", all_items_begin),
        (store_item_value, ":item_price", ":resource_1_item_id"),
        (val_add, ":gold_reward", ":item_price"),
      (try_end),
      (try_begin),
        (ge, ":resource_2_item_id", all_items_begin),
        (store_item_value, ":item_price", ":resource_2_item_id"),
        (val_add, ":gold_reward", ":item_price"),
      (try_end),
      (try_begin),
        (ge, ":resource_3_item_id", all_items_begin),
        (store_item_value, ":item_price", ":resource_3_item_id"),
        (val_add, ":gold_reward", ":item_price"),
      (try_end),
      (try_begin),
        (ge, ":resource_4_item_id", all_items_begin),
        (store_item_value, ":item_price", ":resource_4_item_id"),
        (val_add, ":gold_reward", ":item_price"),
      (try_end),
      (call_script, "script_player_adjust_gold", ":player_id", ":gold_reward", 1),
      (val_add, ":stack_count", 1),
    (else_try),
      (assign, ":fail", 1),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, ":error_string_id", preset_message_yellow|preset_message_fail_sound),
    (try_end),
    (eq, ":fail", 0),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_stack_count, ":stack_count"),
    (multiplayer_send_3_int_to_player, ":player_id", server_event_scene_prop_set_slot, ":instance_id", slot_scene_prop_stack_count, ":stack_count"),
    ]),

  ("cf_repair_scene_prop",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":agent_id", 2),
    (store_script_param, ":hit_damage", 3),
    (store_script_param, ":full_hit_points", 4),
    (store_script_param, ":resource_class", 5),

    (agent_is_alive, ":agent_id"),
    (agent_get_wielded_item, ":wielded_item_id", ":agent_id", 0),
    (gt, ":wielded_item_id", -1),
    (item_get_slot, ":wielded_item_class", ":wielded_item_id", slot_item_class),
    (eq, ":wielded_item_class", item_class_repair),
    (agent_get_troop_id, ":troop_id", ":agent_id"),
    (store_skill_level, ":engineer", "skl_engineer", ":troop_id"),
    (gt, ":engineer", 0),
    (set_trigger_result, 0),
    (scene_prop_get_hit_points, ":hit_points", ":instance_id"),
    (lt, ":hit_points", ":full_hit_points"),
    (scene_prop_get_slot, ":next_resource_hp", ":instance_id", slot_scene_prop_next_resource_hp),
    (try_begin),
      (gt, ":hit_points", ":next_resource_hp"),
      (store_sub, ":maximum_required", ":full_hit_points", ":hit_points"),
      (call_script, "script_cf_agent_consume_resource", ":agent_id", ":resource_class", ":maximum_required"),
      (val_add, ":next_resource_hp", reg0),
      (val_min, ":next_resource_hp", ":full_hit_points"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_next_resource_hp, ":next_resource_hp"),
    (try_end),
    (try_begin),
      (le, ":hit_points", ":next_resource_hp"),
      (val_add, ":hit_points", ":hit_damage"),
      (val_mul, ":engineer", 20),
      (val_add, ":hit_points", ":engineer"),
      (val_min, ":hit_points", ":full_hit_points"),
      (scene_prop_set_hit_points, ":instance_id", ":hit_points"),
      (assign, reg1, 0),
    (else_try),
      (assign, reg1, 1),
    (try_end),
    (assign, reg0, ":hit_points"),
    ]),

  ("cf_hit_repairable_scene_prop",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_damage", 2),
    (store_script_param, ":full_hit_points", 3),
    (store_script_param, ":resource_class", 4),
    (store_script_param, ":agent_id", 5),
    (store_script_param, ":repair_active", 6),
    (store_script_param, ":script_damage", 7),

    (scene_prop_get_slot, ":state", ":instance_id", slot_scene_prop_state),
    (try_begin),
      (gt, ":agent_id", -1),
      (agent_is_active, ":agent_id"),
      (this_or_next|neq, ":state", scene_prop_state_active),
      (eq, ":repair_active", 1),
      (call_script, "script_cf_repair_scene_prop", ":instance_id", ":agent_id", ":hit_damage", ":full_hit_points", ":resource_class"),
      (assign, ":hit_points", reg0),
      (assign, ":resource_required", reg1),
      (try_begin),
        (ge, ":hit_points", ":full_hit_points"),
        (neq, ":state", scene_prop_state_active),
        (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_active),
        (assign, ":result", repairable_repaired),
      (else_try),
        (eq, ":resource_required", 1),
        (assign, ":result", repairable_resource_required),
        (agent_get_player_id, ":player_id", ":agent_id"),
        (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, "str_resource_required", preset_message_yellow|preset_message_fail_sound),
      (else_try),
        (assign, ":result", repairable_repairing),
      (try_end),
    (else_try),
      (scene_prop_get_slot, ":next_resource_hp", ":instance_id", slot_scene_prop_next_resource_hp),
      (val_sub, ":next_resource_hp", ":hit_damage"),
      (val_max, ":next_resource_hp", min_scene_prop_hit_points),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_next_resource_hp, ":next_resource_hp"),
      (scene_prop_get_hit_points, ":hit_points", ":instance_id"),
      (assign, ":original_hit_points", ":hit_points"),
      (val_sub, ":hit_points", ":hit_damage"),
      (try_begin),
        (lt, ":hit_points", min_scene_prop_hit_points),
        (val_add, ":hit_damage", ":hit_points"),
        (val_sub, ":hit_damage", min_scene_prop_hit_points),
        (assign, ":hit_points", min_scene_prop_hit_points),
        (set_trigger_result, ":hit_damage"),
      (try_end),
      (try_begin),
        (eq, ":script_damage", 1),
        (neq, ":hit_points", ":original_hit_points"),
        (scene_prop_set_hit_points, ":instance_id", ":hit_points"),
      (try_end),
      (try_begin),
        (eq, ":state", scene_prop_state_active),
        (try_begin),
          (le, ":hit_points", min_scene_prop_hit_points),
          (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_destroyed),
          (assign, ":result", repairable_destroyed),
        (else_try),
          (assign, ":result", repairable_hit),
        (try_end),
      (else_try),
        (assign, ":result", repairable_hit_destroyed),
      (try_end),
    (try_end),
    (assign, reg0, ":result"),
    (assign, reg1, ":hit_points"),
    ]),

  ("cf_hit_door",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_damage", 2),
    (store_script_param, ":full_hit_points", 3),
    (store_script_param, ":resource_class", 4),
    (set_fixed_point_multiplier, 1),
    (position_get_x, ":agent_id", pos2),
    (set_fixed_point_multiplier, 100),

    (try_begin),
      (scene_prop_slot_eq, ":instance_id", slot_scene_prop_rotation, 1),
      (assign, ":repair_active", 1),
    (else_try),
      (assign, ":repair_active", 0),
    (try_end),
    (call_script, "script_cf_hit_repairable_scene_prop", ":instance_id", ":hit_damage", ":full_hit_points", ":resource_class", ":agent_id", ":repair_active", 0),
    (assign, ":result", reg0),
    (try_begin),
      (eq, ":result", repairable_hit),
      (particle_system_burst, "psys_dummy_straw", pos1, 10),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_shield_hit_wood_metal"),
    (else_try),
      (eq, ":result", repairable_destroyed),
      (prop_instance_get_starting_position, pos2, ":instance_id"),
      (init_position, pos3),
      (agent_get_position, pos5, ":agent_id"),
      (prop_instance_get_position, pos6, ":instance_id"),
      (try_begin),
        (position_is_behind_position, pos5, pos6),
        (assign, ":direction", -1),
        (position_move_y, pos3, 150),
        (assign, ":ground_offset", 20),
      (else_try),
        (assign, ":direction", 1),
        (position_move_y, pos3, -150),
        (assign, ":ground_offset", 0),
      (try_end),
      (position_move_x, pos3, -50),
      (position_transform_position_to_parent, pos4, pos2, pos3),
      (position_move_z, pos4, 150, 1),
      (position_get_distance_to_ground_level, ":ground_distance", pos4),
      (val_sub, ":ground_distance", 150),
      (store_atan2, ":ground_angle", ":ground_distance", 150),
      (convert_from_fixed_point, ":ground_angle"),
      (store_add, ":rotate_angle", 90, ":ground_angle"),
      (val_mul, ":rotate_angle", ":direction"),
      (position_rotate_x, pos2, ":rotate_angle"),
      (position_move_z, pos2, ":ground_offset", 1),
      (prop_instance_animate_to_position, ":instance_id", pos2, 100),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_target_position, 0),
      (particle_system_burst, "psys_dummy_smoke", pos1, 20),
      (particle_system_burst, "psys_dummy_straw", pos1, 50),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood_break"),
    (else_try),
      (eq, ":result", repairable_hit_destroyed),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood_scratch"),
    (else_try),
      (eq, ":result", repairable_repairing),
      (agent_play_sound, ":agent_id", "snd_repair_wood"),
    (else_try),
      (eq, ":result", repairable_repaired),
      (prop_instance_get_starting_position, pos2, ":instance_id"),
      (prop_instance_animate_to_position, ":instance_id", pos2, 400),
      (agent_play_sound, ":agent_id", "snd_man_grunt"),
    (try_end),
    ]),

  ("cf_use_rotate_door",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":left", 3),

    (scene_prop_slot_eq, ":instance_id", slot_scene_prop_state, scene_prop_state_active),
    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (player_get_slot, ":player_faction_id", ":player_id", slot_player_faction_id),
    (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
    (assign, ":faction_id", reg0),
    (prop_instance_get_variation_id_2, ":is_bolted", ":instance_id"),
    (val_and, ":is_bolted", 0x2),
    (assign, ":fail_string_id", 0),
    (try_begin),
      (eq, ":is_bolted", 0x2),
      (try_begin),
        (scene_prop_slot_eq, ":instance_id", slot_scene_prop_rotation, 1),
      (else_try),
        (neq, ":faction_id", "fac_commoners"),
        (eq, ":faction_id", ":player_faction_id"),
        (player_slot_eq, ":player_id", slot_player_has_faction_door_key, 1),
      (else_try),
        (prop_instance_get_position, pos1, ":instance_id"),
        (agent_get_position, pos2, ":agent_id"),
        (neg|position_is_behind_position, pos2, pos1),
      (else_try),
        (assign, ":fail_string_id", "str_door_bolted"),
      (try_end),
    (else_try),
      (eq, ":faction_id", "fac_commoners"),
    (else_try),
      (eq, ":faction_id", ":player_faction_id"),
      (player_slot_eq, ":player_id", slot_player_has_faction_door_key, 1),
    (else_try),
      (assign, ":fail_string_id", "str_door_locked_by_s1"),
    (try_end),
    (try_begin),
      (gt, ":fail_string_id", 0),
      (prop_instance_get_variation_id_2, ":not_pickable", ":instance_id"),
      (val_and, ":not_pickable", 0x4),
      (neq, ":not_pickable", 0x4),
      (try_begin),
        (call_script, "script_cf_agent_pick_lock", ":agent_id", 100),
        (assign, ":fail_string_id", 0),
      (try_end),
      (gt, reg0, 0),
    (else_try),
      (eq, ":fail_string_id", "str_door_bolted"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, ":fail_string_id", preset_message_error),
    (else_try),
      (eq, ":fail_string_id", "str_door_locked_by_s1"),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_preset_message, ":fail_string_id", preset_message_faction|preset_message_fail_sound, ":faction_id"),
    (try_end),
    (eq, ":fail_string_id", 0),
    (call_script, "script_cf_rotate_door", ":instance_id", ":left"),
    ]),

  ("cf_rotate_door",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":left", 2),

    (prop_instance_get_starting_position, pos1, ":instance_id"),
    (try_begin),
      (scene_prop_slot_eq, ":instance_id", slot_scene_prop_rotation, 0),
      (try_begin),
        (eq, ":left", 1),
        (position_rotate_z, pos1, -95),
      (else_try),
        (position_rotate_z, pos1, 95),
      (try_end),
      (assign, ":door_open", 1),
    (else_try),
      (assign, ":door_open", 0),
    (try_end),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_rotation, ":door_open"),
    (scene_prop_enable_after_time, ":instance_id", 100),
    (prop_instance_animate_to_position, ":instance_id", pos1, 100),
    ]),

  ("cf_init_rotate_door",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":left", 2),

    (prop_instance_get_variation_id_2, ":initial_position", ":instance_id"),
    (val_and, ":initial_position", 0x1),
    (try_begin),
      (eq, ":initial_position", 0x1),
      (call_script, "script_cf_rotate_door", ":instance_id", ":left"),
    (try_end),
    ]),

  ("cf_hit_chest",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_damage", 2),
    (store_script_param, ":full_hit_points", 3),
    (set_fixed_point_multiplier, 1),
    (position_get_x, ":agent_id", pos2),
    (set_fixed_point_multiplier, 100),

    (call_script, "script_cf_hit_repairable_scene_prop", ":instance_id", ":hit_damage", ":full_hit_points", item_class_wood, ":agent_id", 1, 0),
    (assign, ":result", reg0),
    (try_begin),
      (eq, ":result", repairable_hit),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_shield_hit_wood_metal"),
    (else_try),
      (eq, ":result", repairable_destroyed),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_unlocked, 1),
      (particle_system_burst, "psys_dummy_smoke", pos1, 10),
      (particle_system_burst, "psys_dummy_straw", pos1, 30),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_shield_broken"),
    (else_try),
      (eq, ":result", repairable_hit_destroyed),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_unlocked, 1),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood_scratch"),
    (else_try),
      (eq, ":result", repairable_repairing),
      (agent_play_sound, ":agent_id", "snd_repair_wood"),
    (else_try),
      (eq, ":result", repairable_repaired),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_unlocked, 0),
      (agent_play_sound, ":agent_id", "snd_repair_wood"),
    (try_end),
    ]),

  ("cf_pick_chest_lock",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":probability_multiplier", 3),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (assign, ":fail", 0),
    (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
    (assign, ":faction_id", reg0),
    (try_begin),
      (eq, reg1, -1),
    (else_try),
      (scene_prop_slot_eq, ":instance_id", slot_scene_prop_unlocked, 1),
      (try_begin),
        (player_slot_eq, ":player_id", slot_player_faction_id, ":faction_id"),
        (player_slot_eq, ":player_id", slot_player_has_faction_door_key, 1),
        (scene_prop_slot_eq, ":instance_id", slot_scene_prop_state, scene_prop_state_active),
        (scene_prop_set_slot, ":instance_id", slot_scene_prop_unlocked, 0),
        (agent_play_sound, ":agent_id", "snd_lock"),
      (try_end),
    (else_try),
      (assign, ":fail", 1),
      (le, ":probability_multiplier", 0),
      (agent_play_sound, ":agent_id", "snd_pick_lock_fail"),
    (else_try),
      (call_script, "script_cf_agent_pick_lock", ":agent_id", ":probability_multiplier"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_unlocked, 1),
      (assign, ":fail", 0),
    (else_try),
      (le, reg0, 0),
      (multiplayer_send_3_int_to_player, ":player_id", server_event_preset_message, "str_chest_locked_by_s1", preset_message_faction|preset_message_fail_sound, ":faction_id"),
    (try_end),
    (eq, ":fail", 0),
    ]),

  ("cf_hit_bridge",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_damage", 2),
    (store_script_param, ":script_damage", 3),
    (set_fixed_point_multiplier, 1),
    (position_get_x, ":agent_id", pos2),
    (set_fixed_point_multiplier, 100),

    (scene_prop_get_slot, ":full_hit_points", ":instance_id", slot_scene_prop_full_hit_points),
    (call_script, "script_cf_hit_repairable_scene_prop", ":instance_id", ":hit_damage", ":full_hit_points", item_class_wood, ":agent_id", 1, ":script_damage"),
    (assign, ":result", reg0),
    (try_begin),
      (eq, ":result", repairable_hit),
      (particle_system_burst, "psys_dummy_straw", pos1, 30),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood"),
    (else_try),
      (eq, ":result", repairable_destroyed),
      (prop_instance_get_starting_position, pos2, ":instance_id"),
      (position_get_distance_to_terrain, ":distance", pos2),
      (val_mul, ":distance", -1),
      (position_move_z, pos2, ":distance"),
      (prop_instance_animate_to_position, ":instance_id", pos2, 300),
      (particle_system_burst, "psys_dummy_smoke", pos1, 20),
      (particle_system_burst, "psys_dummy_straw", pos1, 50),
      (particle_system_burst, "psys_game_water_splash_2", pos1, 100),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood_break"),
    (else_try),
      (eq, ":result", repairable_hit_destroyed),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood_scratch"),
    (else_try),
      (eq, ":result", repairable_repairing),
      (agent_play_sound, ":agent_id", "snd_repair_wood"),
    (else_try),
      (eq, ":result", repairable_repaired),
      (prop_instance_get_starting_position, pos2, ":instance_id"),
      (prop_instance_set_position, ":instance_id", pos2),
      (particle_system_burst, "psys_dummy_smoke", pos1, 50),
      (agent_play_sound, ":agent_id", "snd_man_grunt"),
    (try_end),
    ]),

  ("cf_hit_bridge_footing",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_damage", 2),

    (scene_prop_get_slot, ":bridge_instance_id", ":instance_id", slot_scene_prop_linked_scene_prop),
    (gt, ":bridge_instance_id", 0),
    (call_script, "script_cf_hit_bridge", ":bridge_instance_id", ":hit_damage", 1),
    (set_trigger_result, 0),
    ]),

  ("cf_init_wall",
   [(store_script_param, ":instance_id", 1),

    (prop_instance_get_starting_position, pos1, ":instance_id"),
    (scene_prop_get_slot, ":height", ":instance_id", slot_scene_prop_length),
    (prop_instance_get_scale, pos3, ":instance_id"),
    (position_get_scale_z, ":scale", pos3),
    (val_mul, ":height", ":scale"),
    (convert_from_fixed_point, ":height"),
    (val_add, ":height", 100),
    (val_mul, ":height", -1),
    (position_move_z, pos1, ":height"),
    (prop_instance_set_position, ":instance_id", pos1),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_destroyed),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_next_resource_hp, min_scene_prop_hit_points),
    (scene_prop_set_hit_points, ":instance_id", min_scene_prop_hit_points),
    ]),

  ("cf_hit_wall",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_damage", 2),
    (store_script_param, ":script_damage", 3),
    (set_fixed_point_multiplier, 1),
    (position_get_x, ":agent_id", pos2),
    (set_fixed_point_multiplier, 100),

    (scene_prop_get_slot, ":full_hit_points", ":instance_id", slot_scene_prop_full_hit_points),
    (call_script, "script_cf_hit_repairable_scene_prop", ":instance_id", ":hit_damage", ":full_hit_points", item_class_wood, ":agent_id", 1, ":script_damage"),
    (assign, ":result", reg0),
    (try_begin),
      (eq, ":result", repairable_hit),
      (particle_system_burst, "psys_dummy_straw", pos1, 50),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood"),
    (else_try),
      (eq, ":result", repairable_destroyed),
      (try_begin),
        (scene_prop_slot_eq, ":instance_id", slot_scene_prop_no_move_physics, 1),
        (prop_instance_enable_physics, ":instance_id", 0),
      (try_end),
      (prop_instance_get_starting_position, pos2, ":instance_id"),
      (scene_prop_get_slot, ":height", ":instance_id", slot_scene_prop_length),
      (prop_instance_get_scale, pos3, ":instance_id"),
      (position_get_scale_z, ":scale", pos3),
      (val_mul, ":height", ":scale"),
      (convert_from_fixed_point, ":height"),
      (val_add, ":height", 100),
      (val_mul, ":height", -1),
      (position_move_z, pos2, ":height"),
      (prop_instance_animate_to_position, ":instance_id", pos2, 1000),
      (particle_system_burst, "psys_dummy_smoke", pos1, 100),
      (particle_system_burst, "psys_dummy_straw", pos1, 100),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood_break"),
    (else_try),
      (eq, ":result", repairable_hit_destroyed),
      (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood_scratch"),
    (else_try),
      (eq, ":result", repairable_repairing),
      (agent_play_sound, ":agent_id", "snd_repair_wood"),
    (else_try),
      (eq, ":result", repairable_repaired),
      (try_begin),
        (scene_prop_slot_eq, ":instance_id", slot_scene_prop_no_move_physics, 1),
        (prop_instance_enable_physics, ":instance_id", 0),
      (try_end),
      (prop_instance_get_starting_position, pos2, ":instance_id"),
      (prop_instance_animate_to_position, ":instance_id", pos2, 1000),
      (agent_play_sound, ":agent_id", "snd_man_grunt"),
    (try_end),
    ]),

  ("cf_hit_build_wall",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_damage", 2),

    (scene_prop_get_slot, ":wall_instance_id", ":instance_id", slot_scene_prop_linked_scene_prop),
    (gt, ":wall_instance_id", 0),
    (call_script, "script_cf_hit_wall", ":wall_instance_id", ":hit_damage", 1),
    (set_trigger_result, 0),
    ]),

  ("cf_init_fire_place",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),

    (init_position, pos1),
    (position_set_z, pos1, z_position_to_hide_object),
    (set_spawn_position, pos1),
    (spawn_scene_prop, "spr_wood_heap_fire"),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_linked_scene_prop, reg0),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_destroyed),
    ]),

  ("cf_hit_fire_place",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),
    (set_fixed_point_multiplier, 1),
    (position_get_x, ":agent_id", pos2),
    (set_fixed_point_multiplier, 100),

    (set_trigger_result, 0),
    (agent_get_wielded_item, ":wielded_item_id", ":agent_id", 0),
    (gt, ":wielded_item_id", -1),
    (scene_prop_get_slot, ":state", ":instance_id", slot_scene_prop_state),
    (try_begin),
      (eq, ":wielded_item_id", "itm_torch"),
      (eq, ":state", scene_prop_state_destroyed),
      (scene_prop_slot_ge, ":instance_id", slot_scene_prop_stack_count, 1),
      (scene_prop_get_slot, ":fire_instance_id", ":instance_id", slot_scene_prop_linked_scene_prop),
      (prop_instance_is_valid, ":fire_instance_id"),
      (prop_instance_get_position, pos1, ":instance_id"),
      (prop_instance_set_position, ":fire_instance_id", pos1),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_active),
    (else_try),
      (eq, ":wielded_item_id", "itm_water_bucket"),
      (eq, ":state", scene_prop_state_active),
      (call_script, "script_cf_agent_consume_item", ":agent_id", "itm_water_bucket", 1),
      (agent_equip_item, ":agent_id", "itm_bucket"),
      (agent_set_wielded_item, ":agent_id", "itm_bucket"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_destroyed),
      (scene_prop_get_slot, ":fire_instance_id", ":instance_id", slot_scene_prop_linked_scene_prop),
      (prop_instance_is_valid, ":fire_instance_id"),
      (init_position, pos1),
      (position_set_z, pos1, z_position_to_hide_object),
      (prop_instance_set_position, ":fire_instance_id", pos1),
    (else_try),
      (item_slot_eq, ":wielded_item_id", slot_item_class, item_class_wood),
      (item_get_slot, ":resource_amount", ":wielded_item_id", slot_item_resource_amount),
      (gt, ":resource_amount", 0),
      (call_script, "script_cf_agent_consume_item", ":agent_id", ":wielded_item_id", 1),
      (agent_set_wielded_item, ":agent_id", -1),
      (scene_prop_get_slot, ":stack_count", ":instance_id", slot_scene_prop_stack_count),
      (val_add, ":stack_count", ":resource_amount"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_stack_count, ":stack_count"),
    (try_end),
    ]),

  ("fire_place_burn",
   [(store_script_param, ":instance_id", 1),

    (scene_prop_get_slot, ":state", ":instance_id", slot_scene_prop_state),
    (try_begin),
      (eq, ":state", scene_prop_state_active),
      (scene_prop_get_slot, ":stack_count", ":instance_id", slot_scene_prop_stack_count),
      (val_sub, ":stack_count", 200),
      (val_max, ":stack_count", 0),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_stack_count, ":stack_count"),
      (le, ":stack_count", 0),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_destroyed),
      (scene_prop_get_slot, ":fire_instance_id", ":instance_id", slot_scene_prop_linked_scene_prop),
      (prop_instance_is_valid, ":fire_instance_id"),
      (init_position, pos1),
      (position_set_z, pos1, z_position_to_hide_object),
      (prop_instance_set_position, ":fire_instance_id", pos1),
    (try_end),
    ]),

  ("winch_get_direction",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (prop_instance_get_starting_position, pos1, ":instance_id"),
    (agent_get_position, pos2, ":agent_id"),
    (position_transform_position_to_local, pos3, pos1, pos2),
    (position_get_y, ":relative_y_position", pos3),
    (try_begin),
      (ge, ":relative_y_position", 0),
      (assign, reg0, 1),
    (else_try),
      (assign, reg0, -1),
    (try_end),
    ]),

  ("cf_use_winch",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":winch_instance_id", 2),
    (store_script_param, ":move_steps_plus_one", 3),
    (store_script_param, ":step_size", 4),
    (store_script_param, ":animation_time", 5),
    (store_script_param, ":winch_type", 6),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (agent_is_alive, ":agent_id"),

    (call_script, "script_winch_get_direction", ":agent_id", ":winch_instance_id"),
    (assign, ":direction", reg0),

    (scene_prop_get_slot, ":moveable_instance_id", ":winch_instance_id", slot_scene_prop_linked_scene_prop),
    (ge, ":moveable_instance_id", 0),
    (scene_prop_get_slot, ":current_target", ":moveable_instance_id", slot_scene_prop_target_position),
    (try_begin),
      (le, ":direction", -1),
      (val_mul, ":direction", 2),
      (eq, ":winch_type", winch_type_portcullis),
      (assign, ":new_target", 0),
      (neq, ":new_target", ":current_target"),
      (assign, ":animation_time", 20),
      (call_script, "script_scene_prop_play_sound", ":moveable_instance_id", "snd_body_fall_big"),
    (else_try),
      (store_add, ":new_target", ":current_target", ":direction"),
      (val_clamp, ":new_target", 0, ":move_steps_plus_one"),
    (try_end),
    (neq, ":new_target", ":current_target"),
    (scene_prop_set_slot, ":moveable_instance_id", slot_scene_prop_target_position, ":new_target"),

    (prop_instance_get_starting_position, pos1, ":moveable_instance_id"),
    (store_mul, ":target_movement", ":new_target", ":step_size"),
    (try_begin),
      (eq, ":winch_type", winch_type_portcullis),
      (position_move_z, pos1, ":target_movement"),
    (else_try),
      (position_rotate_x, pos1, ":target_movement"),
    (try_end),
    (prop_instance_animate_to_position, ":moveable_instance_id", pos1, ":animation_time"),
    (try_begin),
      (gt, ":direction", 0),
      (assign, ":winch_rotation", -36000),
    (else_try),
      (assign, ":winch_rotation", 36000),
    (try_end),
    (prop_instance_get_position, pos1, ":winch_instance_id"),
    (prop_instance_rotate_to_position, ":winch_instance_id", pos1, ":animation_time", ":winch_rotation"),
    ]),

  ("cf_init_winch",
   [(multiplayer_is_server),
    (store_script_param, ":winch_instance_id", 1),
    (store_script_param, ":start_step", 2),
    (store_script_param, ":step_size", 3),
    (store_script_param, ":winch_type", 4),

    (scene_prop_get_slot, ":moveable_instance_id", ":winch_instance_id", slot_scene_prop_linked_scene_prop),
    (ge, ":moveable_instance_id", 0),
    (prop_instance_get_variation_id, ":initial_position", ":winch_instance_id"),
    (val_and, ":initial_position", 0x1),
    (try_begin),
      (eq, ":winch_type", winch_type_drawbridge),
      (eq, ":initial_position", 0x1),
    (else_try),
      (eq, ":winch_type", winch_type_portcullis),
      (neq, ":initial_position", 0x1),
    (else_try),
      (assign, ":initial_position", -1),
    (try_end),
    (try_begin),
      (neq, ":initial_position", -1),
      (scene_prop_set_slot, ":moveable_instance_id", slot_scene_prop_target_position, ":start_step"),
      (prop_instance_get_starting_position, pos1, ":moveable_instance_id"),
      (store_mul, ":target_movement", ":start_step", ":step_size"),
      (try_begin),
        (eq, ":winch_type", winch_type_portcullis),
        (position_move_z, pos1, ":target_movement"),
      (else_try),
        (position_rotate_x, pos1, ":target_movement"),
      (try_end),
      (prop_instance_set_position, ":moveable_instance_id", pos1),
    (try_end),
    ]),

  ("cf_use_inventory",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":probability_multiplier", 3),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (agent_is_alive, ":agent_id"),
    (call_script, "script_agent_remove_empty_ammo_stacks", ":agent_id"),
    (assign, ":fail", 0),
    (try_begin),
      (scene_prop_slot_eq, ":instance_id", slot_scene_prop_unlocked, 1),
    (else_try),
      (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
      (eq, reg1, -1),
    (else_try),
      (player_slot_eq, ":player_id", slot_player_faction_id, reg0),
      (player_slot_eq, ":player_id", slot_player_has_faction_item_key, 1),
    (else_try),
      (call_script, "script_cf_pick_chest_lock", ":agent_id", ":instance_id", ":probability_multiplier"),
    (else_try),
      (assign, ":fail", 1),
    (try_end),
    (eq, ":fail", 0),
    (scene_prop_get_slot, ":inventory_slot_end", ":instance_id", slot_scene_prop_inventory_count),
    (gt, ":inventory_slot_end", 0),
    (val_add, ":inventory_slot_end", slot_scene_prop_inventory_begin),
    (assign, ":slot_range_begin", -1),
    (scene_prop_get_slot, ":item_id", ":instance_id", slot_scene_prop_inventory_begin),
    (try_for_range, ":inventory_slot", slot_scene_prop_inventory_begin, ":inventory_slot_end"),
      (store_add, ":next_inventory_slot", ":inventory_slot", 1),
      (try_begin),
        (lt, ":next_inventory_slot", ":inventory_slot_end"),
        (scene_prop_get_slot, ":next_item_id", ":instance_id", ":next_inventory_slot"),
      (else_try),
        (assign, ":next_item_id", -9999),
      (try_end),
      (try_begin),
        (eq, ":item_id", ":next_item_id"),
        (try_begin),
          (le, ":slot_range_begin", -1),
          (assign, ":slot_range_begin", ":inventory_slot"),
        (try_end),
      (else_try),
        (try_begin),
          (gt, ":slot_range_begin", -1),
          (multiplayer_send_4_int_to_player, ":player_id", server_event_scene_prop_set_slot, ":instance_id", ":slot_range_begin", ":item_id", ":next_inventory_slot"),
          (assign, ":slot_range_begin", -1),
        (else_try),
          (multiplayer_send_3_int_to_player, ":player_id", server_event_scene_prop_set_slot, ":instance_id", ":inventory_slot", ":item_id"),
        (try_end),
      (try_end),
      (assign, ":item_id", ":next_item_id"),
    (try_end),
    (multiplayer_send_int_to_player, ":player_id", server_event_show_inventory, ":instance_id"),
    (player_set_slot, ":player_id", slot_player_accessing_instance_id, ":instance_id"),
    ]),

  ("transfer_inventory",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":from_slot", 3),
    (store_script_param, ":to_slot", 4),
    (store_script_param, ":item_id", 5),

    (try_begin),
      (gt, ":instance_id", 0),
      (player_get_agent_id, ":agent_id", ":player_id"),
      (agent_is_active, ":agent_id"),
      (agent_is_alive, ":agent_id"),
      (prop_instance_is_valid, ":instance_id"),
      (scene_prop_get_slot, ":inventory_count", ":instance_id", slot_scene_prop_inventory_count),
      (gt, ":inventory_count", 0),
      (try_begin),
        (scene_prop_slot_eq, ":instance_id", slot_scene_prop_full_hit_points, 0),
      (else_try),
        (scene_prop_slot_eq, ":instance_id", slot_scene_prop_unlocked, 1),
      (else_try),
        (call_script, "script_scene_prop_get_owning_faction", ":instance_id"),
        (eq, reg1, -1),
      (else_try),
        (player_slot_eq, ":player_id", slot_player_faction_id, reg0),
        (player_slot_eq, ":player_id", slot_player_has_faction_item_key, 1),
      (else_try),
        (assign, ":inventory_count", 0),
      (try_end),
      (gt, ":inventory_count", 0),
      (agent_get_position, pos1, ":agent_id"),
      (prop_instance_get_position, pos2, ":instance_id"),
      (get_distance_between_positions, ":distance", pos1, pos2),
      (le, ":distance", max_distance_to_use + 200),
      (player_set_slot, ":player_id", slot_player_accessing_instance_id, ":instance_id"),
      (try_begin),
        (store_add, ":inventory_end", slot_scene_prop_inventory_begin, ":inventory_count"),
        (this_or_next|is_between, ":from_slot", slot_scene_prop_inventory_begin, ":inventory_end"),
        (is_between, ":from_slot", slot_scene_prop_inventory_item_0, slot_scene_prop_inventory_item_0 + ek_gloves + 1),
        (this_or_next|is_between, ":to_slot", slot_scene_prop_inventory_begin, ":inventory_end"),
        (is_between, ":to_slot", slot_scene_prop_inventory_item_0, slot_scene_prop_inventory_item_0 + ek_gloves + 1),
        (scene_prop_slot_eq, ":instance_id", ":to_slot", 0),
        (ge, ":item_id", all_items_begin),
        (item_get_type, ":item_type", ":item_id"),
        (try_begin),
          (is_between, ":to_slot", slot_scene_prop_inventory_item_0, slot_scene_prop_inventory_end),
          (try_begin),
            (is_between, ":item_type", itp_type_head_armor, itp_type_hand_armor + 1),
            (store_add, ":correct_armor_slot", ":item_type", slot_scene_prop_inventory_item_0 + ek_head - itp_type_head_armor),
            (eq, ":to_slot", ":correct_armor_slot"),
          (else_try),
            (neg|is_between, ":item_type", itp_type_head_armor, itp_type_hand_armor + 1),
            (lt, ":to_slot", slot_scene_prop_inventory_item_0 + ek_item_3 + 1),
          (else_try),
            (assign, ":item_id", -1),
          (try_end),
          (try_begin),
            (ge, ":item_id", all_items_begin),
            (agent_get_troop_id, ":troop_id", ":agent_id"),
            (call_script, "script_cf_check_troop_can_equip_item", ":troop_id", ":item_id"),
          (else_try),
            (assign, ":item_id", -1),
          (try_end),
        (else_try),
          (item_get_slot, ":length", ":item_id", slot_item_length),
          (neg|scene_prop_slot_ge, ":instance_id", slot_scene_prop_length, ":length"),
          (assign, ":item_id", -1),
        (try_end),
        (ge, ":item_id", all_items_begin),
        (try_begin),
          (this_or_next|eq, ":item_type", itp_type_arrows),
          (this_or_next|eq, ":item_type", itp_type_bolts),
          (this_or_next|eq, ":item_type", itp_type_thrown),
          (eq, ":item_type", itp_type_crossbow),
          (assign, ":item_ammo", 0),
        (else_try),
          (assign, ":item_ammo", -1),
        (try_end),
        (assign, ":neg_from_mod_slot", 0),
        (try_begin),
          (ge, ":from_slot", slot_scene_prop_inventory_item_0),
          (store_add, ":from_equip_slot", ":from_slot", ek_item_0 - slot_scene_prop_inventory_item_0),
          (agent_get_item_slot, ":equip_item_id", ":agent_id", ":from_equip_slot"),
          (eq, ":equip_item_id", ":item_id"),
          (try_begin),
            (is_between, ":item_type", itp_type_head_armor, itp_type_hand_armor + 1),
            (store_sub, ":no_item_id", ":item_type", itp_type_head_armor),
            (val_add, ":no_item_id", "itm_no_head"),
            (call_script, "script_change_armor", ":agent_id", ":no_item_id"),
            (store_add, ":player_slot", ":from_slot", slot_player_equip_item_0 - slot_scene_prop_inventory_item_0),
            (player_set_slot, ":player_id", ":player_slot", 0),
          (else_try),
            (try_begin),
              (gt, ":item_ammo", -1),
              (agent_get_ammo_for_slot, ":item_ammo", ":agent_id", ":from_equip_slot"),
            (try_end),
            (val_add, ":from_equip_slot", 1),
            (agent_unequip_item, ":agent_id", ":item_id", ":from_equip_slot"),
          (try_end),
        (else_try),
          (lt, ":from_slot", slot_scene_prop_inventory_item_0),
          (scene_prop_slot_eq, ":instance_id", ":from_slot", ":item_id"),
          (scene_prop_set_slot, ":instance_id", ":from_slot", 0),
          (store_add, ":neg_from_mod_slot", ":from_slot", slot_scene_prop_inventory_mod_begin - slot_scene_prop_inventory_begin),
          (val_mul, ":neg_from_mod_slot", -1),
          (try_begin),
            (gt, ":item_ammo", -1),
            (store_add, ":from_ammo_slot", ":from_slot", slot_scene_prop_inventory_ammo_begin - slot_scene_prop_inventory_begin),
            (scene_prop_get_slot, ":item_ammo", ":instance_id", ":from_ammo_slot"),
            (scene_prop_set_slot, ":instance_id", ":from_ammo_slot", 0),
          (try_end),
        (else_try),
          (assign, ":item_id", -1),
        (try_end),
        (ge, ":item_id", all_items_begin),
        (try_begin),
          (eq, ":item_ammo", 0),
          (neq, ":item_type", itp_type_crossbow),
        (else_try),
          (ge, ":to_slot", slot_scene_prop_inventory_item_0),
          (try_begin),
            (gt, ":item_ammo", -1),
            (try_for_range, ":check_equip_slot", ek_item_0, ek_item_3 + 1),
              (agent_get_item_slot, ":check_item_id", ":agent_id", ":check_equip_slot"),
              (eq, ":check_item_id", ":item_id"),
              (agent_get_ammo_for_slot, ":check_ammo", ":agent_id", ":check_equip_slot"),
              (val_add, ":item_ammo", ":check_ammo"),
            (try_end),
          (try_end),
          (try_begin),
            (is_between, ":item_type", itp_type_head_armor, itp_type_hand_armor + 1),
            (call_script, "script_change_armor", ":agent_id", ":item_id"),
            (store_add, ":player_slot", ":to_slot", slot_player_equip_item_0 - slot_scene_prop_inventory_item_0),
            (player_set_slot, ":player_id", ":player_slot", ":item_id"),
          (else_try),
            (store_add, ":to_equip_slot", ":to_slot", ek_item_0 - slot_scene_prop_inventory_item_0 + 1),
            (agent_equip_item, ":agent_id", ":item_id", ":to_equip_slot"),
            (gt, ":item_ammo", -1),
            (agent_set_ammo, ":agent_id", ":item_id", ":item_ammo"),
          (try_end),
        (else_try),
          (scene_prop_set_slot, ":instance_id", ":to_slot", ":item_id"),
          (try_begin),
            (gt, ":item_ammo", -1),
            (store_add, ":to_ammo_slot", ":to_slot", slot_scene_prop_inventory_ammo_begin - slot_scene_prop_inventory_begin),
            (scene_prop_set_slot, ":instance_id", ":to_ammo_slot", ":item_ammo",),
          (try_end),
        (try_end),
        (try_begin),
          (eq, ":item_ammo", 0),
          (neq, ":item_type", itp_type_crossbow),
          (assign, ":to_mod_slot", -1),
        (else_try),
          (store_add, ":to_mod_slot", ":to_slot", slot_scene_prop_inventory_mod_begin - slot_scene_prop_inventory_begin),
        (try_end),
        (try_begin),
          (ge, ":neg_from_mod_slot", 0),
          (multiplayer_send_3_int_to_player, ":player_id", server_event_scene_prop_set_slot, ":instance_id", ":to_mod_slot", ":item_id"),
        (else_try),
          (multiplayer_send_4_int_to_player, ":player_id", server_event_scene_prop_set_slot, ":instance_id", ":to_mod_slot", ":item_id", ":neg_from_mod_slot"),
        (try_end),
        (this_or_next|lt, ":from_slot", slot_scene_prop_inventory_item_0),
        (lt, ":to_slot", slot_scene_prop_inventory_item_0),
        (try_begin),
          (ge, ":to_slot", slot_scene_prop_inventory_item_0),
          (assign, ":to_mod_slot", -1),
        (try_end),
        (get_max_players, ":max_players"),
        (try_for_range, ":other_player_id", 1, ":max_players"),
          (player_is_active, ":other_player_id"),
          (neq, ":other_player_id", ":player_id"),
          (player_slot_eq, ":other_player_id", slot_player_accessing_instance_id, ":instance_id"),
          (try_begin),
            (ge, ":neg_from_mod_slot", 0),
            (multiplayer_send_3_int_to_player, ":other_player_id", server_event_scene_prop_set_slot, ":instance_id", ":to_mod_slot", ":item_id"),
          (else_try),
            (multiplayer_send_4_int_to_player, ":other_player_id", server_event_scene_prop_set_slot, ":instance_id", ":to_mod_slot", ":item_id", ":neg_from_mod_slot"),
          (try_end),
        (try_end),
      (try_end),
    (else_try),
      (player_set_slot, ":player_id", slot_player_accessing_instance_id, 0),
    (try_end),
    ]),

  ("cart_choose_action",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (scene_prop_get_slot, ":access_distance", ":instance_id", slot_scene_prop_width),
    (store_mul, ":neg_access_distance", ":access_distance", -1),
    (prop_instance_get_position, pos1, ":instance_id"),
    (agent_get_position, pos2, ":agent_id"),
    (position_transform_position_to_local, pos3, pos1, pos2),
    (position_get_y, ":relative_y_position", pos3),
    (try_begin),
      (is_between, ":relative_y_position", ":neg_access_distance", ":access_distance"),
      (assign, reg0, -1),
    (else_try),
      (assign, reg0, 1),
    (try_end),
    ]),

  ("cf_use_cart",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":action", 3),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (agent_is_alive, ":agent_id"),

    (assign, ":fail", 0),
    (try_begin),
      (eq, ":action", 1),
      (call_script, "script_cf_use_inventory", ":agent_id", ":instance_id", 0),
    (else_try),
      (eq, ":action", -1),
      (scene_prop_get_slot, ":required_horse", ":instance_id", slot_scene_prop_required_horse),
      (agent_get_horse, ":horse_agent_id", ":agent_id"),
      (try_begin),
        (ge, ":required_horse", 1),
        (assign, ":attach_agent_id", ":horse_agent_id"),
        (try_begin),
          (gt, ":horse_agent_id", -1),
          (agent_get_item_id, ":horse_item_id", ":horse_agent_id"),
          (this_or_next|eq, ":required_horse", 1),
          (eq, ":horse_item_id", ":required_horse"),
        (else_try),
          (assign, ":fail", 1),
          (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, "str_not_riding_necessary_horse", preset_message_error),
        (try_end),
      (else_try),
        (gt, ":horse_agent_id", -1),
        (assign, ":fail", 1),
      (else_try),
        (assign, ":attach_agent_id", ":agent_id"),
        (agent_get_troop_id, ":troop_id", ":agent_id"),
        (store_skill_level, ":labouring", "skl_labouring", ":troop_id"),
        (try_begin),
          (lt, ":labouring", 1),
          (assign, ":fail", 1),
          (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, "str_craft_not_skilled", preset_message_error),
        (try_end),
      (try_end),
      (eq, ":fail", 0),
      (try_begin),
        (call_script, "script_cf_attach_cart", ":attach_agent_id", ":instance_id", ":agent_id"),
      (else_try),
        (assign, ":fail", 1),
        (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, "str_already_attached_cart", preset_message_error),
      (try_end),
    (try_end),
    (eq, ":fail", 0),
    ]),

  ("cf_attach_cart",
   [(store_script_param, ":attach_agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":agent_id", 3),

    (agent_get_attached_scene_prop, ":attached_scene_prop", ":attach_agent_id"),
    (assign, ":fail", 0),
    (try_begin),
      (eq, ":attached_scene_prop", -1),
      (ge, ":instance_id", 0),
      (scene_prop_get_slot, ":attached_to_agent", ":instance_id", slot_scene_prop_attached_to_agent),
      (try_begin),
        (agent_is_active, ":attached_to_agent"),
        (agent_is_alive, ":attached_to_agent"),
        (agent_get_attached_scene_prop, ":other_instance_id", ":attached_to_agent"),
        (eq, ":other_instance_id", ":instance_id"),
        (assign, ":fail", 1),
      (else_try),
        (scene_prop_set_slot, ":instance_id", slot_scene_prop_attached_to_agent, ":attach_agent_id"),
        (assign, ":new_attached_scene_prop", ":instance_id"),
        (agent_set_attached_scene_prop, ":attach_agent_id", ":new_attached_scene_prop"),
      (try_end),
    (else_try),
      (gt, ":attached_scene_prop", -1),
      (try_begin),
        (eq, ":instance_id", -1),
        (assign, ":instance_id", ":attached_scene_prop"),
      (try_end),
      (eq, ":attached_scene_prop", ":instance_id"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_attached_to_agent, -1),
      (assign, ":new_attached_scene_prop", -1),
      (agent_set_attached_scene_prop, ":attach_agent_id", ":new_attached_scene_prop"),
      (call_script, "script_cart_set_detached_position", ":instance_id"),
    (else_try),
      (assign, ":fail", 1),
    (try_end),
    (eq, ":fail", 0),
    (get_max_players, ":max_players"),
    (try_for_range, ":player_id", 1, ":max_players"),
      (player_is_active, ":player_id"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_set_attached_scene_prop, ":attach_agent_id", ":new_attached_scene_prop"),
    (try_end),
    (try_begin),
      (neq, ":attach_agent_id", ":agent_id"),
      (call_script, "script_check_agent_horse_speed_factor", ":agent_id", ":attach_agent_id", 0),
    (try_end),
    ]),

  ("cart_set_detached_position",
   [(store_script_param, ":instance_id", 1),

    (prop_instance_get_position, pos1, ":instance_id"),
    (position_get_z, ":height", pos1),
    (try_begin),
      (lt, ":height", 0),
      (position_set_z, pos1, z_position_water_level),
    (else_try),
      (position_set_z_to_ground_level, pos1),
      (scene_prop_get_slot, ":detach_rotation", ":instance_id", slot_scene_prop_rotation),
      (position_rotate_x, pos1, ":detach_rotation"),
    (try_end),
    (scene_prop_get_slot, ":detach_offset", ":instance_id", slot_scene_prop_position),
    (position_move_z, pos1, ":detach_offset", 1),
    (position_get_z, ":animation_time", pos1),
    (val_sub, ":animation_time", ":height"),
    (val_abs, ":animation_time"),
    (try_begin),
      (gt, ":animation_time", 100),
      (val_div, ":animation_time", 2),
    (try_end),
    (val_max, ":animation_time", 50),
    (prop_instance_animate_to_position, ":instance_id", pos1, ":animation_time"),
    ]),

  ("add_cart_to_list",
   [(store_script_param, ":instance_id", 1),

    (troop_get_slot, ":cart_count", "trp_cart_array", slot_array_count),
    (val_add, ":cart_count", 1),
    (troop_set_slot, "trp_cart_array", ":cart_count", ":instance_id"),
    (troop_set_slot, "trp_cart_array", slot_array_count, ":cart_count"),
    ]),

  ("cf_rest",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":target_horse", 2),
    (store_script_param, ":heal_percent", 3),
    (store_script_param, ":min_health_percent", 4),

    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (assign, ":fail", 0),
    (try_begin),
      (try_begin),
        (eq, ":target_horse", 0),
        (assign, ":target_agent_id", ":agent_id"),
        (agent_get_slot, ":food_amount", ":target_agent_id", slot_agent_food_amount),
      (else_try),
        (agent_get_horse, ":target_agent_id", ":agent_id"),
        (assign, ":food_amount", max_food_amount),
      (try_end),
      (assign, ":error_string_id", "str_no_horse"),
      (neq, ":target_agent_id", -1),
      (store_agent_hit_points, ":health_percent", ":target_agent_id", 0),
      (assign, ":error_string_id", "str_too_wounded_to_rest"),
      (gt, ":health_percent", ":min_health_percent"),
      (assign, ":error_string_id", "str_too_hungry_to_rest"),
      (gt, ":food_amount", 0),
      (try_begin),
        (neq, ":heal_percent", 0),
        (lt, ":health_percent", 100),
        (val_min, ":heal_percent", ":food_amount"),
        (val_add, ":health_percent", ":heal_percent"),
        (val_min, ":health_percent", 100),
        (agent_set_hit_points, ":target_agent_id" , ":health_percent", 0),
        (try_begin),
          (eq, ":target_horse", 0),
          (agent_play_sound, ":target_agent_id", "snd_man_yawn"),
          (val_sub, ":food_amount", ":heal_percent"),
          (agent_set_slot, ":target_agent_id", slot_agent_food_amount, ":food_amount"),
          (multiplayer_send_3_int_to_player, ":player_id", server_event_agent_set_slot, ":target_agent_id", slot_agent_food_amount, ":food_amount"),
        (else_try),
          (agent_play_sound, ":target_agent_id", "snd_horse_snort"),
        (try_end),
      (try_end),
    (else_try),
      (assign, ":fail", 1),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_preset_message, ":error_string_id", preset_message_error),
    (try_end),
    (eq, ":fail", 0),
    ]),

  ("cf_clean_blood",
   [(store_script_param, ":agent_id", 1),

    (store_agent_hit_points, ":hit_points", ":agent_id", 0),
    (gt, ":hit_points", 70),
    (get_max_players, ":max_players"),
    (try_for_range, ":player_id", 1, ":max_players"),
      (player_is_active, ":player_id"),
      (multiplayer_send_2_int_to_player, ":player_id", server_event_agent_equip_armor, ":agent_id", -1),
    (try_end),
    ]),

  ("agent_clean_blood",
   [(store_script_param, ":agent_id", 1),

    (try_for_range, ":equip_slot", ek_head, ek_gloves + 1),
      (agent_get_item_slot, ":item_id", ":agent_id", ":equip_slot"),
      (store_sub, ":invisible_item_id", ":equip_slot", ek_head),
      (val_add, ":invisible_item_id", "itm_invisible_head"),
      (agent_equip_item, ":agent_id", ":invisible_item_id"),
      (try_begin),
        (gt, ":item_id", -1),
        (agent_equip_item, ":agent_id", ":item_id"),
      (else_try),
        (agent_unequip_item, ":agent_id", ":invisible_item_id"),
      (try_end),
    (try_end),
    ]),

  ("agent_hit_with_scripted_item",
   [(store_script_param, ":attacked_agent_id", 1),
    (store_script_param, ":attacker_agent_id", 2),
    (store_script_param, ":damage_dealt", 3),
    (store_script_param, ":weapon_item_id", 4),

    (try_begin),
      (eq, ":weapon_item_id", "itm_surgeon_scalpel"),
      (try_begin),
        (agent_get_troop_id, ":attacker_troop_id", ":attacker_agent_id"),
        (store_skill_level, ":skill_level", "skl_wound_treatment", ":attacker_troop_id"),
        (gt, ":skill_level", 0),
        (store_agent_hit_points, ":health_percent", ":attacked_agent_id", 0),
        (try_begin),
          (lt, ":health_percent", 75),
          (store_mul, ":healing", ":skill_level", 2),
          (val_add, ":healing", 2),
          (val_add, ":health_percent", ":healing"),
          (val_min, ":health_percent", 75),
          (agent_set_hit_points, ":attacked_agent_id", ":health_percent", 0),
        (try_end),
        (set_trigger_result, 0),
      (try_end),
    (else_try),
      (eq, ":weapon_item_id", "itm_admin_scalpel"),
      (try_begin),
        (agent_get_troop_id, ":attacker_troop_id", ":attacker_agent_id"),
        (eq, ":attacker_troop_id", "trp_godlike_hero"),
        (agent_set_hit_points, ":attacked_agent_id", 100, 0),
        (set_trigger_result, 0),
        (call_script, "script_cf_clean_blood", ":attacked_agent_id"),
      (try_end),
    (else_try),
      (eq, ":weapon_item_id", "itm_healing_herb"),
      (try_begin),
        (agent_get_troop_id, ":attacker_troop_id", ":attacker_agent_id"),
        (store_skill_level, ":skill_level", "skl_wound_treatment", ":attacker_troop_id"),
        (gt, ":skill_level", 0),
        (set_trigger_result, 0),
        (call_script, "script_cf_agent_consume_item", ":attacker_agent_id", "itm_healing_herb", 1),
        (agent_get_slot, ":poison", ":attacked_agent_id", slot_agent_poison_amount),
        (val_sub, ":poison", 1),
        (agent_set_slot, ":attacked_agent_id", slot_agent_poison_amount, ":poison"),
      (try_end),
    (else_try),
      (eq, ":weapon_item_id", "itm_poisoned_dagger"),
      (try_begin),
        (gt, ":damage_dealt", 5),
        (call_script, "script_cf_agent_consume_item", ":attacker_agent_id", "itm_poisoned_dagger", 1),
        (agent_equip_item, ":attacker_agent_id", "itm_dagger"),
        (agent_set_wielded_item, ":attacker_agent_id", "itm_dagger"),
        (agent_get_slot, ":poison", ":attacked_agent_id", slot_agent_poison_amount),
        (val_add, ":poison", 1),
        (agent_set_slot, ":attacked_agent_id", slot_agent_poison_amount, ":poison"),
        (agent_set_slot, ":attacked_agent_id", slot_agent_poisoner_agent_id, ":attacker_agent_id"),
        (try_begin),
          (agent_get_player_id, ":attacker_player_id", ":attacker_agent_id"),
          (player_is_active, ":attacker_player_id"),
          (player_get_unique_id, ":attacker_player_uid", ":attacker_player_id"),
        (else_try),
          (assign, ":attacker_player_uid", -1),
        (try_end),
        (agent_set_slot, ":attacked_agent_id", slot_agent_poisoner_player_uid, ":attacker_player_uid"),
      (try_end),
    (try_end),
    ]),

  ("cf_use_bucket",
   [(store_script_param, ":agent_id", 1),

    (position_move_z, pos1, -100),
    (position_get_z, ":z_pos", pos1),
    (lt, ":z_pos", 0),
    (call_script, "script_cf_agent_consume_item", ":agent_id", "itm_bucket", 1),
    (agent_equip_item, ":agent_id", "itm_water_bucket"),
    (agent_set_wielded_item, ":agent_id", "itm_water_bucket"),
    ]),

  ("move_fish_school",
   [(store_script_param, ":instance_id", 1),

    (prop_instance_get_position, pos1, ":instance_id"),
    (position_set_z, pos1, z_position_water_level),
    (assign, ":closest_depth", 999999),
    (store_random_in_range, ":distance", 500, 1000),
    (store_mul, ":negative_distance", ":distance", -1),
    (store_random_in_range, ":initial_direction", 0, 4),
    (store_add, ":loop_end", ":initial_direction", 4),
    (try_for_range, ":direction", ":initial_direction", ":loop_end"),
      (copy_position, pos2, pos1),
      (val_mod, ":direction", 4),
      (try_begin),
        (eq, ":direction", 0),
        (position_move_x, pos2, ":distance"),
      (else_try),
        (eq, ":direction", 1),
        (position_move_x, pos2, ":negative_distance"),
      (else_try),
        (eq, ":direction", 2),
        (position_move_y, pos2, ":distance"),
      (else_try),
        (position_move_y, pos2, ":negative_distance"),
      (try_end),
      (position_get_distance_to_terrain, ":water_depth", pos2),
      (try_begin),
        (is_between, ":water_depth", fish_school_minimum_depth, fish_school_maximum_depth),
        (assign, ":loop_end", -1),
        (copy_position, pos3, pos2),
      (else_try),
        (val_sub, ":water_depth", fish_school_maximum_depth),
        (val_abs, ":water_depth"),
        (lt, ":water_depth", ":closest_depth"),
        (assign, ":closest_depth", ":water_depth"),
        (copy_position, pos3, pos2),
      (try_end),
    (try_end),
    (try_begin),
      (this_or_next|eq, ":loop_end", -1),
      (lt, ":closest_depth", 999999),
      (prop_instance_set_position, ":instance_id", pos3, 1),
    (try_end),
    (scene_prop_get_slot, ":fish_count", ":instance_id", slot_scene_prop_stack_count),
    (scene_spawned_item_get_num_instances, ":net_num", "itm_fishing_net"),
    (try_for_range, ":net_no", 0, ":net_num"),
      (try_begin),
        (le, ":fish_count", 0),
        (assign, ":net_num", -1),
      (else_try),
        (scene_spawned_item_get_instance, ":net_instance_id", "itm_fishing_net", ":net_no"),
        (scene_prop_get_slot, ":placement_skill", ":net_instance_id", slot_scene_prop_position),
        (gt, ":placement_skill", 0),
        (prop_instance_get_position, pos4, ":net_instance_id"),
        (copy_position, pos5, pos4),
        (position_set_z, pos5, z_position_water_level),
        (get_distance_between_positions, ":distance", pos3, pos5),
        (lt, ":distance", max_distance_to_catch_fish),
        (scene_prop_set_slot, ":net_instance_id", slot_scene_prop_linked_scene_prop, ":instance_id"),
        (store_random_in_range, ":random", 0, ":distance"),
        (store_mul, ":fish_factor", ":fish_count", ":placement_skill"),
        (lt, ":random", ":fish_factor"),
        (store_random_in_range, ":move_x", -50, 51),
        (position_move_x, pos4, ":move_x"),
        (position_move_y, pos4, -15),
        (position_get_z, ":height", pos4),
        (val_abs, ":height"),
        (val_sub, ":height", 30),
        (val_min, ":height", 176),
        (store_random_in_range, ":move_z", 50, ":height"),
        (position_move_z, pos4, ":move_z"),
        (set_spawn_position, pos4),
        (spawn_item, "itm_fish", 0, fish_spawn_time),
        (prop_instance_set_position, reg0, pos4),
        (val_sub, ":fish_count", 1),
      (try_end),
    (try_end),
    (try_begin),
      (lt, ":fish_count", fish_school_maximum_count),
      (store_random_in_range, ":adjust_fish", -2, 4),
      (val_add, ":fish_count", ":adjust_fish"),
      (val_max, ":fish_count", 0),
    (try_end),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_stack_count, ":fish_count"),
    (try_begin),
      (gt, ":fish_count", 0),
      (store_random_in_range, ":random", ":fish_count", fish_school_maximum_count),
      (gt, ":random", fish_school_maximum_count / 2),
      (store_random_in_range, ":move_x", -500, 501),
      (position_move_x, pos3, ":move_x"),
      (store_random_in_range, ":move_y", -500, 501),
      (position_move_y, pos3, ":move_y"),
      (store_random_in_range, ":rotate_z", 0, 360),
      (position_rotate_z, pos3, ":rotate_z"),
      (position_set_z, pos3, -30, 1),
      (particle_system_burst, "psys_fish_rise", pos3, 1),
      (val_mul, ":random", 4),
      (try_begin),
        (gt, ":fish_count", ":random"),
        (particle_system_burst, "psys_game_water_splash_1", pos3, 5),
        (particle_system_burst, "psys_game_water_splash_2", pos3, 5),
        (copy_position, pos0, pos3),
        (call_script, "script_play_sound_at_position", "snd_jump_end_water"),
      (try_end),
    (try_end),
    ]),

  ("cf_use_fishing_tool",
   [(multiplayer_is_server),
    (store_script_param, ":agent_id", 1),

    (position_get_z, ":z_pos", pos1),
    (lt, ":z_pos", z_position_water_level),
    (agent_get_troop_id, ":troop_id", ":agent_id"),
    (store_skill_level, ":labouring", "skl_labouring", ":troop_id"),
    (gt, ":labouring", 0),
    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (scene_prop_get_num_instances, ":num_instances", "spr_pw_fish_school"),
    (try_for_range, ":instance_no", 0, ":num_instances"),
      (scene_prop_get_instance, ":fish_instance_id", "spr_pw_fish_school", ":instance_no"),
      (scene_prop_slot_ge, ":fish_instance_id", slot_scene_prop_stack_count, 1),
      (prop_instance_get_position, pos2, ":fish_instance_id"),
      (get_distance_between_positions, ":distance", pos1, pos2),
      (lt, ":distance", max_distance_to_catch_fish),
      (assign, ":num_instances", -1),
    (try_end),
    (eq, ":num_instances", -1),
    (val_add, ":distance", 1000),
    (store_random_in_range, ":success", 0, ":distance"),
    (val_mul, ":labouring", 100),
    (lt, ":success", ":labouring"),
    (scene_prop_get_slot, ":fish_count", ":fish_instance_id", slot_scene_prop_stack_count),
    (gt, ":fish_count", 0),
    (val_sub, ":fish_count", 1),
    (scene_prop_set_slot, ":fish_instance_id", slot_scene_prop_stack_count, ":fish_count"),
    (position_get_rotation_around_z, ":rotation", pos1),
    (init_position, pos2),
    (position_copy_rotation, pos1, pos2),
    (val_sub, ":rotation", 90),
    (position_rotate_z, pos1, ":rotation"),
    (set_spawn_position, pos1),
    (spawn_item, "itm_fish", 0, fish_spawn_time),
    (prop_instance_set_position, reg0, pos1),
    (particle_system_burst, "psys_game_water_splash_2", pos1, 10),
    (agent_play_sound, ":agent_id", "snd_jump_begin_water"),
    ]),

  ("cf_eat_food",
   [(multiplayer_is_server),
    (store_script_param, ":agent_id", 1),
    (store_script_param, ":item_id", 2),

    (agent_is_alive, ":agent_id"),
    (agent_get_action_dir, ":direction", ":agent_id"),
    (eq, ":direction", 0),
    (call_script, "script_cf_agent_consume_item", ":agent_id", ":item_id", 1),
    (item_get_slot, ":food", ":item_id", slot_item_resource_amount),
    (gt, ":food", 0),
    (agent_get_slot, ":food_amount", ":agent_id", slot_agent_food_amount),
    (lt, ":food_amount", max_food_amount),
    (val_add, ":food_amount", ":food"),
    (val_min, ":food_amount", max_food_amount),
    (agent_set_slot, ":agent_id", slot_agent_food_amount, ":food_amount"),
    (agent_get_player_id, ":player_id", ":agent_id"),
    (player_is_active, ":player_id"),
    (multiplayer_send_3_int_to_player, ":player_id", server_event_agent_set_slot, ":agent_id", slot_agent_food_amount, ":food_amount"),
    ]),

  ("check_agent_health",
   [(store_script_param, ":agent_id", 1),

    (agent_get_slot, ":poison_amount", ":agent_id", slot_agent_poison_amount),
    (try_begin),
      (agent_is_alive, ":agent_id"),
      (gt, ":poison_amount", 0),
      (store_add, ":damage", ":poison_amount", 1),
      (val_min, ":damage", 5),
      (store_agent_hit_points, ":hit_points", ":agent_id", 1),
      (val_sub, ":hit_points", ":damage"),
      (agent_set_hit_points, ":agent_id", ":hit_points", 1),
      (try_begin),
        (le, ":hit_points", 0),
        (agent_get_slot, ":poisoner_agent_id", ":agent_id", slot_agent_poisoner_agent_id),
        (try_begin),
          (gt, ":poisoner_agent_id", 0),
          (agent_is_active, ":poisoner_agent_id"),
          (agent_get_slot, ":poisoner_player_uid", ":agent_id", slot_agent_poisoner_player_uid),
          (try_begin),
            (gt, ":poisoner_player_uid", 0),
            (agent_get_player_id, ":poisoner_player_id", ":poisoner_agent_id"),
            (player_is_active, ":poisoner_player_id"),
            (player_get_unique_id, ":poisoner_check_uid", ":poisoner_player_id"),
            (eq, ":poisoner_check_uid", ":poisoner_player_uid"),
            (assign, ":poisoner_player_uid", -1),
          (try_end),
          (eq, ":poisoner_player_uid", -1),
        (else_try),
          (assign, ":poisoner_agent_id", ":agent_id"),
        (try_end),
        (agent_deliver_damage_to_agent, ":poisoner_agent_id", ":agent_id", 10),
      (try_end),
    (try_end),
    ]),

  ("check_agent_horse_speed_factor",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":horse_agent_id", 2),
    (store_script_param, ":under_water", 3),

    (store_agent_hit_points, ":speed_factor", ":horse_agent_id", 0),
    (try_begin),
      (agent_get_attached_scene_prop, ":attached_spr", ":horse_agent_id"),
      (this_or_next|ge, ":under_water", 1),
      (neq, ":attached_spr", -1),
      (val_clamp, ":speed_factor", 20, 50),
    (else_try),
      (val_add, ":speed_factor", 50),
      (val_min, ":speed_factor", 100),
    (try_end),
    (agent_set_horse_speed_factor, ":agent_id", ":speed_factor"),
    ]),

  ("check_remove_lost_horse",
   [(store_script_param, ":horse_agent_id", 1),

    (agent_get_slot, ":last_rider", ":horse_agent_id", slot_agent_horse_last_rider),
    (agent_get_rider, ":rider_agent_id", ":horse_agent_id"),
    (try_begin),
      (gt, ":rider_agent_id", -1),
      (try_begin),
        (neq, ":last_rider", ":rider_agent_id"),
        (agent_set_slot, ":horse_agent_id", slot_agent_horse_last_rider, ":rider_agent_id"),
      (try_end),
      (call_script, "script_check_agent_horse_speed_factor", ":rider_agent_id", ":horse_agent_id", 0),
    (else_try),
      (agent_get_attached_scene_prop, ":attached_instance_id", ":horse_agent_id"),
      (prop_instance_is_valid, ":attached_instance_id"),
    (else_try),
      (gt, ":last_rider", -1),
      (try_begin),
        (agent_is_active, ":last_rider"),
        (agent_is_alive, ":last_rider"),
        (agent_get_position, pos1, ":last_rider"),
        (agent_get_position, pos2, ":horse_agent_id"),
        (get_distance_between_positions, ":distance", pos1, pos2),
        (le, ":distance", max_distance_horse_rider),
      (else_try),
        (agent_set_slot, ":horse_agent_id", slot_agent_horse_last_rider, -1),
        (agent_is_in_special_mode, ":horse_agent_id"),
        (agent_clear_scripted_mode, ":horse_agent_id"),
        (agent_force_rethink, ":horse_agent_id"),
      (try_end),
    (else_try),
      (le, ":last_rider", -20),
      (agent_get_item_id, ":horse_item_id", ":horse_agent_id"),
      (gt, ":horse_item_id", -1),
      (store_item_value, ":horse_value", ":horse_item_id"),
      (assign, ":kill", 1),
      (try_begin),
        (ge, ":horse_value", 5000),
        (gt, ":last_rider", -60),
        (assign, ":kill", 0),
      (else_try),
        (ge, ":horse_value", 2000),
        (gt, ":last_rider", -40),
        (assign, ":kill", 0),
      (try_end),
      (eq, ":kill", 1),
      (agent_fade_out, ":horse_agent_id"),
    (else_try),
      (val_sub, ":last_rider", 1),
      (agent_set_slot, ":horse_agent_id", slot_agent_horse_last_rider, ":last_rider"),
    (try_end),
    ]),

  ("check_agent_drowning",
   [(store_script_param, ":agent_id", 1),

    (try_begin),
      (agent_is_alive, ":agent_id"),
      (agent_get_troop_id, ":troop_id", ":agent_id"),
      (neq, ":troop_id", "trp_godlike_hero"),
      (agent_get_item_id, ":horse_item_id", ":agent_id"),
      (neq, ":horse_item_id", "itm_admin_horse"),
      (agent_get_position, pos1, ":agent_id"),
      (agent_get_slot, ":drowning_count", ":agent_id", slot_agent_drowning_count),
      (agent_get_horse, ":horse_agent_id", ":agent_id"),
      (assign, ":drown_height", -190),
      (position_get_z, ":height", pos1),
      (try_begin),
        (gt, ":horse_item_id", -1),
        (copy_position, pos2, pos1),
        (position_move_y, pos2, 50),
        (position_move_z, pos2, -200, 1),
        (position_set_z_to_ground_level, pos2),
        (position_get_z, ":horse_height", pos2),
        (store_sub, ":horse_height_difference", ":horse_height", ":height"),
        (val_abs, ":horse_height_difference"),
        (lt, ":horse_height_difference", 100),
        (assign, ":height", ":horse_height"),
      (else_try),
        (gt, ":horse_agent_id", -1),
        (assign, ":drown_height", -275),
      (try_end),
      (try_begin),
        (le, ":height", ":drown_height"),
        (assign, ":under_water", 1),
        (agent_get_speed, pos4, ":agent_id"),
        (position_get_y, ":forwards_speed", pos4),
        (val_abs, ":forwards_speed"),
        (val_div, ":forwards_speed", 200),
        (val_add, ":forwards_speed", 1),
        (val_add, ":drowning_count", ":forwards_speed"),
        (agent_set_slot, ":agent_id", slot_agent_drowning_count, ":drowning_count"),
        (store_sub, ":damage", ":drowning_count", 2),
        (agent_get_troop_id, ":troop_id", ":agent_id"),
        (store_skill_level, ":sailing_skill", "skl_sailing", ":troop_id"),
        (val_div, ":sailing_skill", 4),
        (val_sub, ":damage", ":sailing_skill"),
        (try_begin),
          (gt, ":damage", 1),
          (val_mul, ":damage", ":damage"),
          (store_agent_hit_points, ":hit_points", ":agent_id", 1),
          (val_sub, ":hit_points", ":damage"),
          (agent_deliver_damage_to_agent, ":agent_id", ":agent_id", 5),
          (agent_set_hit_points, ":agent_id", ":hit_points", 1),
          (try_begin),
            (agent_is_human, ":agent_id"),
            (agent_play_sound, ":agent_id", "snd_man_drown"),
          (else_try),
            (agent_play_sound, ":agent_id", "snd_horse_low_whinny"),
          (try_end),
        (try_end),
      (else_try),
        (assign, ":under_water", 0),
        (gt, ":drowning_count", 0),
        (agent_set_slot, ":agent_id", slot_agent_drowning_count, 0),
        (try_begin),
          (agent_is_human, ":agent_id"),
          (agent_play_sound, ":agent_id", "snd_man_cough"),
        (else_try),
          (agent_play_sound, ":agent_id", "snd_horse_snort"),
        (try_end),
      (try_end),
      (try_begin),
        (neq, ":horse_agent_id", -1),
        (call_script, "script_check_agent_horse_speed_factor", ":agent_id", ":horse_agent_id", ":under_water"),
      (try_end),
    (try_end),
    ]),

  ("setup_ship",
   [(store_script_param, ":hull_instance_id", 1),

    (troop_get_slot, ":ship_array_count", "trp_ship_array", 0),
    (val_add, ":ship_array_count", 1),
    (troop_set_slot, "trp_ship_array", ":ship_array_count", ":hull_instance_id"),
    (troop_set_slot, "trp_ship_array", 0, ":ship_array_count"),

    (try_begin),
      (multiplayer_is_server),
      (neq, "$g_edit_scene", 1),
      (store_script_param, ":sail_scene_prop_id", 2),
      (store_script_param, ":sail_off_scene_prop_id", 3),
      (store_script_param, ":ramp_scene_prop_id", 4),

      (prop_instance_get_position, pos1, ":hull_instance_id"),
      (try_begin),
        (gt, ":sail_scene_prop_id", -1),
        (copy_position, pos2, pos1),
        (position_move_z, pos2, -10000),
        (set_spawn_position, pos2),
        (spawn_scene_prop, ":sail_scene_prop_id"),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_linked_sail, reg0),
        (scene_prop_set_slot, reg0, slot_scene_prop_linked_scene_prop, ":hull_instance_id"),
      (else_try),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_linked_sail, -1),
      (try_end),
      (try_begin),
        (gt, ":sail_off_scene_prop_id", -1),
        (set_spawn_position, pos1),
        (spawn_scene_prop, ":sail_off_scene_prop_id"),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_linked_sail_off, reg0),
        (scene_prop_set_slot, reg0, slot_scene_prop_linked_scene_prop, ":hull_instance_id"),
      (else_try),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_linked_sail_off, -1),
      (try_end),
      (try_begin),
        (gt, ":ramp_scene_prop_id", -1),
        (prop_instance_get_variation_id, ":ramp_start_position", ":hull_instance_id"),
        (try_begin),
          (gt, ":ramp_start_position", 1),
          (assign, ":ramp_start_position", -1),
        (try_end),
        (call_script, "script_ship_get_ramp_relative_position", ":ramp_start_position", 1),
        (position_transform_position_to_parent, pos2, pos1, pos30),
        (set_spawn_position, pos2),
        (spawn_scene_prop, ":ramp_scene_prop_id"),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_linked_ramp, reg0),
        (scene_prop_set_slot, reg0, slot_scene_prop_linked_scene_prop, ":hull_instance_id"),
        (scene_prop_set_slot, reg0, slot_scene_prop_position, ":ramp_start_position"),
      (else_try),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_linked_ramp, -1),
      (try_end),
      (scene_prop_get_slot, ":cd_scene_prop_id", ":hull_instance_id", slot_scene_prop_collision_kind),
      (try_begin),
        (gt, ":cd_scene_prop_id", -1),
        (scene_prop_get_num_instances, ":num_instances", ":cd_scene_prop_id"),
        (lt, ":num_instances", 2),
        (init_position, pos1),
        (position_set_z, pos1, z_position_to_hide_object),
        (set_spawn_position, pos1),
        (spawn_scene_prop, ":cd_scene_prop_id"),
        (spawn_scene_prop, ":cd_scene_prop_id"),
      (try_end),
    (try_end),
    ]),

  ("agent_get_ship_station",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (assign, ":station", ship_station_not_on_ship),
    (try_begin),
      (agent_is_active, ":agent_id"),
      (agent_is_alive, ":agent_id"),
      (scene_prop_has_agent_on_it, ":instance_id", ":agent_id"),
      (assign, ":station", ship_station_none),

      (prop_instance_get_position, pos1, ":instance_id"),
      (agent_get_position, pos20, ":agent_id"),
      (position_transform_position_to_local, pos21, pos1, pos20),
      (set_fixed_point_multiplier, 100),
      (position_get_x, ":x_pos", pos21),
      (position_get_y, ":y_pos", pos21),
      (position_get_z, ":z_pos", pos21),
      (is_between, ":y_pos", -150, 150),
      (try_begin),
        (is_between, ":x_pos", -50, 250),
        (assign, ":station", ship_station_mast),
      (else_try),
        (scene_prop_get_slot, ":hull_length", ":instance_id", slot_scene_prop_length),
        (val_mul, ":hull_length", -1),
        (lt, ":x_pos", ":hull_length"),
        (lt, ":z_pos", 500),
        (assign, ":station", ship_station_rudder),
      (try_end),
    (try_end),
    (assign, reg0, ":station"),
    ]),

  ("ship_get_ramp_relative_position",
   [(store_script_param, ":ramp_target", 1),
    (store_script_param, ":match_ground", 2),

    (init_position, pos30),
    (try_begin),
      (position_move_x, pos30, 200),
      (try_begin),
        (eq, ":ramp_target", 0),
        (position_move_z, pos30, 220),
        (position_rotate_y, pos30, -3),
      (else_try),
        (position_move_z, pos30, 305),
        (copy_position, pos31, pos30),
        (try_begin),
          (gt, ":ramp_target", 0),
          (position_move_y, pos30, 500),
          (position_move_y, pos31, 1250),
          (position_rotate_z, pos30, 90),
        (else_try),
          (position_move_y, pos30, -500),
          (position_move_y, pos31, -1250),
          (position_rotate_z, pos30, -90),
        (try_end),

        (try_begin),
          (eq, ":match_ground", 1),
          (position_transform_position_to_parent, pos32, pos1, pos31),
          (position_move_z, pos32, 500),
          (position_get_distance_to_ground_level, ":ground_clearance", pos32),
          (val_sub, ":ground_clearance", 500),
          (lt, ":ground_clearance", 750),
          (assign, ":clearance_ramp", ":ground_clearance"),
          (val_abs, ":clearance_ramp"),
          (convert_to_fixed_point, ":clearance_ramp"),
          (val_div, ":clearance_ramp", 750),
          (store_asin, ":ramp_angle", ":clearance_ramp"),
          (convert_from_fixed_point, ":ramp_angle"),
          (val_min, ":ramp_angle", 50),
          (try_begin),
            (lt, ":ground_clearance", 0),
            (val_mul, ":ramp_angle", -1),
          (try_end),
          (position_rotate_y, pos30, ":ramp_angle"),
        (try_end),
      (try_end),
    (try_end),
    ]),

  ("use_ship_ramp",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),

    (prop_instance_get_position, pos1, ":instance_id"),
    (agent_get_position, pos2, ":agent_id"),
    (scene_prop_get_slot, ":hull_instance_id", ":instance_id", slot_scene_prop_linked_scene_prop),
    (scene_prop_get_slot, ":ramp_position", ":instance_id", slot_scene_prop_target_position),
    (assign, ":ramp_target", ":ramp_position"),
    (try_begin),
      (eq, ":ramp_position", 0),
      (position_transform_position_to_local, pos3, pos1, pos2),
      (position_get_y, ":y_pos", pos3),
      (try_begin),
        (lt, ":y_pos", 0),
        (assign, ":ramp_target", 1),
      (else_try),
        (assign, ":ramp_target", -1),
      (try_end),
    (else_try),
      (scene_prop_has_agent_on_it, ":hull_instance_id", ":agent_id"),
      (assign, ":ramp_target", 0),
    (try_end),
    (scene_prop_set_slot, ":instance_id", slot_scene_prop_target_position, ":ramp_target"),
    ]),

  ("cf_check_ship_climb_side",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":server", 3),

    (scene_prop_slot_eq, ":instance_id", slot_scene_prop_state, scene_prop_state_active),
    (set_fixed_point_multiplier, 100),
    (prop_instance_get_position, pos1, ":instance_id"),
    (agent_get_position, pos2, ":agent_id"),
    (position_transform_position_to_local, pos3, pos1, pos2),
    (position_get_x, ":relative_x", pos3),
    (scene_prop_get_slot, ":hull_length", ":instance_id", slot_scene_prop_length),
    (store_mul, ":neg_hull_length", ":hull_length", -1),
    (is_between, ":relative_x", ":neg_hull_length", ":hull_length"),
    (position_get_y, ":relative_y", pos3),
    (scene_prop_get_slot, ":hull_width", ":instance_id", slot_scene_prop_width),
    (store_mul, ":neg_hull_width", ":hull_width", -1),
    (neg|is_between, ":relative_y", ":neg_hull_width", ":hull_width"),
    (store_add, ":climb_width", ":hull_width", 300),
    (store_mul, ":neg_climb_width", ":climb_width", -1),
    (is_between, ":relative_y", ":neg_climb_width", ":climb_width"),
    (try_begin),
      (eq, ":server", 1),
      (try_begin),
        (gt, ":relative_y", 0),
        (position_set_y, pos3, ":hull_width"),
      (else_try),
        (position_set_y, pos3, ":neg_hull_width"),
      (try_end),
      (position_set_z, pos3, 300),
      (position_transform_position_to_parent, pos4, pos1, pos3),
      (agent_set_position, ":agent_id", pos4),
    (try_end),
    ]),

  ("cf_client_check_control_ship",
   [(multiplayer_get_my_player, ":my_player_id"),
    (player_get_agent_id, ":my_agent_id", ":my_player_id"),
    (agent_is_active, ":my_agent_id"),
    (agent_is_alive, ":my_agent_id"),
    (troop_get_slot, ":ship_array_count", "trp_ship_array", 0),
    (store_add, ":ship_array_end", ":ship_array_count", 1),
    (assign, ":climb_instance_id", -1),
    (try_for_range, ":ship_no", 1, ":ship_array_end"),
      (troop_get_slot, ":hull_instance_id", "trp_ship_array", ":ship_no"),
      (call_script, "script_agent_get_ship_station", ":my_agent_id", ":hull_instance_id"),
      (try_begin),
        (eq, reg0, ship_station_not_on_ship),
        (key_clicked, key_up),
        (call_script, "script_cf_check_ship_climb_side", ":my_agent_id", ":hull_instance_id", 0),
        (assign, ":climb_instance_id", ":hull_instance_id"),
      (try_end),
      (gt, reg0, ship_station_not_on_ship),
      (assign, ":station", reg0),
      (assign, ":forwards", 0),
      (assign, ":rotation", 0),
      (assign, ":fail", 0),
      (try_begin),
        (eq, ":station", ship_station_mast),
        (try_begin),
          (key_clicked, key_up),
          (assign, ":forwards", 1),
        (else_try),
          (key_clicked, key_down),
          (assign, ":forwards", -1),
        (try_end),
      (else_try),
        (eq, ":station", ship_station_rudder),
        (try_begin),
          (key_clicked, key_left),
          (assign, ":rotation", 1),
        (else_try),
          (key_clicked, key_right),
          (assign, ":rotation", -1),
        (try_end),
      (else_try),
        (assign, ":fail", 1),
        (call_script, "script_preset_message", "str_not_at_mast_or_rudder", preset_message_error, 0, 0),
      (try_end),
      (eq, ":fail", 0),
      (multiplayer_send_3_int_to_server, client_event_control_scene_prop, ":hull_instance_id", ":forwards", ":rotation"),
      (assign, ":ship_array_end", -1),
    (try_end),
    (try_begin),
      (neq, ":ship_array_end", -1),
      (neq, ":climb_instance_id", -1),
      (multiplayer_send_2_int_to_server, client_event_control_scene_prop, ":climb_instance_id", 1),
    (try_end),
    (eq, ":ship_array_end", -1),
    ]),

  ("cf_control_ship",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":instance_id", 2),
    (store_script_param, ":forwards", 3),
    (store_script_param, ":rotation", 4),

    (val_clamp, ":forwards", -1, 2),
    (val_clamp, ":rotation", -1, 2),
    (player_is_active, ":player_id"),
    (player_get_agent_id, ":agent_id", ":player_id"),
    (agent_is_alive, ":agent_id"),
    (try_begin),
      (call_script, "script_agent_get_ship_station", ":agent_id", ":instance_id"),
      (try_begin),
        (eq, reg0, ship_station_not_on_ship),
        (eq, ":forwards", 1),
        (call_script, "script_cf_check_ship_climb_side", ":agent_id", ":instance_id", 1),
      (try_end),
      (gt, reg0, ship_station_not_on_ship),
      (assign, ":station", reg0),
      (try_begin),
        (eq, ":station", ship_station_mast),
        (try_begin),
          (neq, ":forwards", 0),
          (scene_prop_get_slot, ":current_forwards", ":instance_id", slot_scene_prop_target_position),
          (val_add, ":current_forwards", ":forwards"),
          (scene_prop_get_slot, ":speed_limit", ":instance_id", slot_scene_prop_speed_limit),
          (val_clamp, ":current_forwards", -1, ":speed_limit"),
          (agent_get_troop_id, ":troop_id", ":agent_id"),
          (store_skill_level, ":sailing_skill", "skl_sailing", ":troop_id"),
          (val_max, ":sailing_skill", 1),
          (ge, ":sailing_skill", ":current_forwards"),
          (scene_prop_set_slot, ":instance_id", slot_scene_prop_target_position, ":current_forwards"),
        (try_end),
      (else_try),
        (eq, ":station", ship_station_rudder),
        (scene_prop_set_slot, ":instance_id", slot_scene_prop_controlling_agent, ":agent_id"),
        (try_begin),
          (eq, ":rotation", 0),
          (eq, ":forwards", 0),
          (scene_prop_set_slot, ":instance_id", slot_scene_prop_target_rotation, 0),
        (else_try),
          (scene_prop_get_slot, ":current_rotation", ":instance_id", slot_scene_prop_target_rotation),
          (val_add, ":current_rotation", ":rotation"),
          (val_clamp, ":current_rotation", -ship_rotation_maximum, ship_rotation_maximum + 1),
          (scene_prop_set_slot, ":instance_id", slot_scene_prop_target_rotation, ":current_rotation"),
        (try_end),
      (try_end),
    (try_end),
    (gt, reg0, ship_station_not_on_ship),
    ]),

  ("move_ship",
   [(store_script_param, ":hull_instance_id", 1),

    (scene_prop_get_slot, ":ramp_instance_id", ":hull_instance_id", slot_scene_prop_linked_ramp),
    (scene_prop_get_slot, ":forwards", ":hull_instance_id", slot_scene_prop_position),
    (scene_prop_get_slot, ":target_forwards", ":hull_instance_id", slot_scene_prop_target_position),
    (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_position, ":target_forwards"),
    (try_begin),
      (neq, ":forwards", 0),
      (prop_instance_get_position, pos1, ":hull_instance_id"),
      (assign, ":crashed", 0),
      (scene_prop_get_slot, ":cd_scene_prop_id", ":hull_instance_id", slot_scene_prop_collision_kind),
      (scene_prop_get_instance, ":cd_instance_id", ":cd_scene_prop_id", 0),
      (prop_instance_set_position, ":cd_instance_id", pos1, 1),
      (init_position, pos4),
      (position_set_z, pos4, z_position_to_hide_object),
      (troop_get_slot, ":ship_array_end", "trp_ship_array", 0),
      (val_add, ":ship_array_end", 1),
      (try_for_range, ":ship_array_slot", 1, ":ship_array_end"),
        (troop_get_slot, ":other_hull_instance_id", "trp_ship_array", ":ship_array_slot"),
        (neq, ":other_hull_instance_id", ":hull_instance_id"),
        (scene_prop_get_slot, ":other_forwards", ":other_hull_instance_id", slot_scene_prop_position),
        (assign, ":continue", 1),
        (try_begin),
          (eq, ":other_forwards", 0),
        (else_try),
          (gt, ":ship_array_slot", "$g_loop_ship_to_check"),
        (else_try),
          (assign, ":continue", 0),
        (try_end),
        (eq, ":continue", 1),
        (scene_prop_get_slot, ":other_cd_scene_prop_id", ":other_hull_instance_id", slot_scene_prop_collision_kind),
        (scene_prop_get_instance, ":other_cd_instance_id", ":other_cd_scene_prop_id", 1),
        (prop_instance_get_position, pos2, ":other_hull_instance_id"),
        (prop_instance_set_position, ":other_cd_instance_id", pos2, 1),
        (try_begin),
          (prop_instance_intersects_with_prop_instance, ":cd_instance_id", ":other_cd_instance_id"),
          (copy_position, pos2, pos1),
          (scene_prop_get_slot, ":speed_limit", ":hull_instance_id", slot_scene_prop_speed_limit),
          (store_mul, ":max_distance", ":speed_limit", ship_forwards_multiplier),
          (try_begin),
            (le, ":forwards", -1),
            (val_mul, ":max_distance", -1),
          (try_end),
          (position_move_x, pos2, ":max_distance"),
          (prop_instance_set_position, ":cd_instance_id", pos2, 1),
          (prop_instance_intersects_with_prop_instance, ":cd_instance_id", ":other_cd_instance_id"),
          (assign, ":crashed", 1),
          (assign, ":ship_array_end", -1),
        (try_end),
        (prop_instance_set_position, ":other_cd_instance_id", pos4, 1),
      (try_end),
      (try_begin),
        (eq, ":crashed", 0),
        (troop_get_slot, ":collision_props_count", "trp_ship_array", slot_ship_array_collision_props_count),
        (store_add, ":collision_props_end", slot_ship_array_collision_props_begin, ":collision_props_count"),
        (try_for_range, ":collision_prop_slot", slot_ship_array_collision_props_begin, ":collision_props_end"),
          (troop_get_slot, ":collision_instance_id", "trp_ship_array", ":collision_prop_slot"),
          (prop_instance_intersects_with_prop_instance, ":cd_instance_id", ":collision_instance_id"),
          (copy_position, pos2, pos1),
          (scene_prop_get_slot, ":speed_limit", ":hull_instance_id", slot_scene_prop_speed_limit),
          (store_mul, ":max_distance", ":speed_limit", ship_forwards_multiplier),
          (try_begin),
            (le, ":forwards", -1),
            (val_mul, ":max_distance", -1),
          (try_end),
          (position_move_x, pos2, ":max_distance"),
          (prop_instance_set_position, ":cd_instance_id", pos2, 1),
          (prop_instance_intersects_with_prop_instance, ":cd_instance_id", ":collision_instance_id"),
          (assign, ":crashed", 1),
          (assign, ":collision_props_end", -1),
        (try_end),
      (try_end),
      (prop_instance_set_position, ":cd_instance_id", pos4, 1),
      (scene_prop_get_slot, ":ship_length", ":hull_instance_id", slot_scene_prop_length),
      (init_position, pos4),
      (try_begin),
        (gt, ":forwards", 0),
        (position_move_x, pos4, ":ship_length"),
      (else_try),
        (val_mul, ":ship_length", -1),
        (position_move_x, pos4, ":ship_length"),
      (try_end),
      (position_transform_position_to_parent, pos5, pos1, pos4),
      (try_begin),
        (eq, ":crashed", 0),
        (copy_position, pos6, pos5),
        (position_set_z, pos6, 0),
        (position_get_distance_to_terrain, ":ground_clearance", pos6),
        (gt, ":ground_clearance", 200),
      (else_try),
        (assign, ":crashed", 1),
        (copy_position, pos3, pos1),
        (copy_position, pos1, pos5),
        (store_mul, ":damage", ":forwards", ":forwards"),
        (val_mul, ":damage", 10),
        (call_script, "script_cf_damage_ship", ":hull_instance_id", ":damage", 0, 1),
        (copy_position, pos1, pos3),
      (try_end),
      (try_begin),
        (eq, ":crashed", 0),
        (get_scene_boundaries, pos7, pos8),
        (position_get_x, ":hull_end_x", pos5),
        (position_get_x, ":scene_min_x", pos7),
        (gt, ":hull_end_x", ":scene_min_x"),
        (position_get_y, ":hull_end_y", pos5),
        (position_get_y, ":scene_min_y", pos7),
        (gt, ":hull_end_y", ":scene_min_y"),
        (position_get_x, ":scene_max_x", pos8),
        (lt, ":hull_end_x", ":scene_max_x"),
        (position_get_y, ":scene_max_y", pos8),
        (lt, ":hull_end_y", ":scene_max_y"),
      (else_try),
        (assign, ":crashed", 1),
      (try_end),
      (try_begin),
        (eq, ":crashed", 1),
        (assign, ":target_forwards", 0),
        (assign, ":forwards", 0),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_position, 0),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_target_position, 0),
        (copy_position, pos3, pos1),
      (else_try),
        (init_position, pos2),
        (store_mul, ":distance", ":forwards", ship_forwards_multiplier),
        (position_move_x, pos2, ":distance"),
        (scene_prop_get_slot, ":rotation", ":hull_instance_id", slot_scene_prop_target_rotation),
        (try_begin),
          (neq, ":rotation", 0),
          (scene_prop_get_slot, ":agent_id", ":hull_instance_id", slot_scene_prop_controlling_agent),
          (call_script, "script_agent_get_ship_station", ":agent_id", ":hull_instance_id"),
          (try_begin),
            (neq, reg0, ship_station_rudder),
            (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_target_rotation, 0),
          (try_end),
          (eq, reg0, ship_station_rudder),
          (assign, ":forwards_multiplier", ":forwards"),
          (val_abs, ":forwards_multiplier"),
          (store_mul, ":move_sideways", ":rotation", ":forwards_multiplier"),
          (position_move_y, pos2, ":move_sideways"),
          (val_mul, ":move_sideways", ship_rotation_multiplier),
          (assign, ":fore_side_ratio", ":move_sideways"),
          (convert_to_fixed_point, ":fore_side_ratio"),
          (val_div, ":fore_side_ratio", ":distance"),
          (val_abs, ":fore_side_ratio"),
          (store_atan, ":rotate_angle", ":fore_side_ratio"),
          (convert_from_fixed_point, ":rotate_angle"),
          (try_begin),
            (this_or_next|is_between, 0, ":rotation", ":forwards"),
            (is_between, 0, ":forwards", ":rotation"),
            (val_mul, ":rotate_angle", -1),
          (try_end),
          (position_rotate_z, pos2, ":rotate_angle"),
        (try_end),
        (position_transform_position_to_parent, pos3, pos1, pos2),
        (prop_instance_animate_to_position, ":hull_instance_id", pos3, 100),
      (try_end),
      (try_begin),
        (gt, ":target_forwards", 0),
        (scene_prop_get_slot, ":active_sail_instance_id", ":hull_instance_id", slot_scene_prop_linked_sail),
        (scene_prop_get_slot, ":inactive_sail_instance_id", ":hull_instance_id", slot_scene_prop_linked_sail_off),
      (else_try),
        (scene_prop_get_slot, ":active_sail_instance_id", ":hull_instance_id", slot_scene_prop_linked_sail_off),
        (scene_prop_get_slot, ":inactive_sail_instance_id", ":hull_instance_id", slot_scene_prop_linked_sail),
      (try_end),
      (try_begin),
        (neq, ":active_sail_instance_id", -1),
        (prop_instance_set_position, ":active_sail_instance_id", pos1),
        (eq, ":crashed", 0),
        (prop_instance_enable_physics, ":active_sail_instance_id", 1),
        (prop_instance_animate_to_position, ":active_sail_instance_id", pos3, 100),
      (try_end),
      (try_begin),
        (neq, ":inactive_sail_instance_id", -1),
        (neg|scene_prop_slot_eq, ":hull_instance_id", slot_scene_prop_state, scene_prop_state_destroyed),
        (init_position, pos4),
        (position_set_z, pos4, z_position_to_hide_object),
        (prop_instance_stop_animating, ":inactive_sail_instance_id"),
        (prop_instance_set_position, ":inactive_sail_instance_id", pos4),
        (prop_instance_enable_physics, ":inactive_sail_instance_id", 0),
      (try_end),
    (try_end),
    (try_begin),
      (neq, ":ramp_instance_id", -1),
      (scene_prop_get_slot, ":ramp_target", ":ramp_instance_id", slot_scene_prop_target_position),
      (assign, ":continue", 1),
      (try_begin),
        (neq, ":forwards", 0),
        (assign, ":match_ground", 0),
      (else_try),
        (scene_prop_get_slot, ":ramp_position", ":ramp_instance_id", slot_scene_prop_position),
        (neq, ":ramp_position", ":ramp_target"),
        (prop_instance_get_position, pos3, ":hull_instance_id"),
        (assign, ":match_ground", 1),
      (else_try),
        (assign, ":continue", 0),
      (try_end),
      (eq, ":continue", 1),
      (call_script, "script_ship_get_ramp_relative_position", ":ramp_target", ":match_ground"),
      (position_transform_position_to_parent, pos5, pos3, pos30),
      (prop_instance_animate_to_position, ":ramp_instance_id", pos5, 100),
      (scene_prop_set_slot, ":ramp_instance_id", slot_scene_prop_position, ":ramp_target"),
    (try_end),
    ]),

  ("animate_ship_parts",
   [(store_script_param, ":instance_id", 1),
    (store_script_param, ":animation_time", 2),

    (prop_instance_get_position, pos22, ":instance_id"),
    (prop_instance_animate_to_position, ":instance_id", pos20, ":animation_time"),
    (copy_position, pos21, pos20),
    (position_set_z, pos21, z_position_to_hide_object),
    (scene_prop_get_slot, ":sail_instance_id", ":instance_id", slot_scene_prop_linked_sail),
    (try_begin),
      (gt, ":sail_instance_id", -1),
      (prop_instance_enable_physics, ":sail_instance_id", 0),
      (prop_instance_stop_animating, ":sail_instance_id"),
      (prop_instance_animate_to_position, ":sail_instance_id", pos21, ":animation_time"),
    (try_end),
    (scene_prop_get_slot, ":sail_off_instance_id", ":instance_id", slot_scene_prop_linked_sail_off),
    (try_begin),
      (gt, ":sail_off_instance_id", -1),
      (prop_instance_stop_animating, ":sail_off_instance_id"),
      (prop_instance_set_position, ":sail_off_instance_id", pos22),
      (prop_instance_enable_physics, ":sail_off_instance_id", 1),
      (prop_instance_animate_to_position, ":sail_off_instance_id", pos20, ":animation_time"),
    (try_end),
    (scene_prop_get_slot, ":ramp_instance_id", ":instance_id", slot_scene_prop_linked_ramp),
    (try_begin),
      (gt, ":ramp_instance_id", -1),
      (prop_instance_animate_to_position, ":ramp_instance_id", pos20, ":animation_time"),
    (try_end),
    ]),

  ("cf_damage_ship",
   [(multiplayer_is_server),
    (store_script_param, ":instance_id", 1),
    (store_script_param, ":hit_damage", 2),
    (store_script_param, ":full_hit_points", 3),
    (store_script_param, ":script_damage", 4),

    (try_begin),
      (eq, ":script_damage", 1),
      (assign, ":agent_id", -1),
    (else_try),
      (set_fixed_point_multiplier, 1),
      (position_get_x, ":agent_id", pos2),
      (set_fixed_point_multiplier, 100),
    (try_end),
    (call_script, "script_cf_hit_repairable_scene_prop", ":instance_id", ":hit_damage", ":full_hit_points", item_class_wood, ":agent_id", 1, ":script_damage"),
    (assign, ":result", reg0),
    (try_begin),
      (eq, ":result", repairable_hit),
      (try_begin),
        (eq, ":script_damage", 1),
        (particle_system_burst, "psys_dummy_smoke_big", pos1, 2),
        (particle_system_burst, "psys_dummy_straw_big", pos1, 2),
        (copy_position, pos0, pos1),
        (call_script, "script_play_sound_at_position", "snd_damage_ship"),
      (else_try),
        (particle_system_burst, "psys_dummy_straw", pos1, 10),
        (call_script, "script_hit_scene_prop_play_sound", ":agent_id", ":instance_id", "snd_cut_wood"),
      (try_end),
    (else_try),
      (eq, ":result", repairable_destroyed),
      (prop_instance_get_position, pos20, ":instance_id"),
      (position_get_distance_to_ground_level, ":ground_distance", pos20),
      (position_set_z_to_ground_level, pos20),
      (position_rotate_x, pos20, 40),
      (call_script, "script_animate_ship_parts", ":instance_id", ":ground_distance"),
      (store_mission_timer_a, ":time"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_destroyed),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_state_time, ":time"),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_position, 0),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_target_position, 0),
      (call_script, "script_scene_prop_play_sound", ":instance_id", "snd_cut_wood_break"),
    (else_try),
      (eq, ":result", repairable_repairing),
      (agent_play_sound, ":agent_id", "snd_repair_wood"),
    (else_try),
      (eq, ":result", repairable_repaired),
      (scene_prop_set_slot, ":instance_id", slot_scene_prop_state, scene_prop_state_active),
      (prop_instance_get_position, pos20, ":instance_id"),
      (prop_instance_get_starting_position, pos21, ":instance_id"),
      (position_get_z, ":sunk_z", pos20),
      (position_get_z, ":floating_z", pos21),
      (position_set_z, pos20, ":floating_z"),
      (position_get_rotation_around_z, ":z_angle", pos20),
      (init_position, pos22),
      (position_copy_rotation, pos20, pos22),
      (position_rotate_z, pos20, ":z_angle"),
      (store_sub, ":ground_distance", ":floating_z", ":sunk_z"),
      (call_script, "script_animate_ship_parts", ":instance_id", ":ground_distance"),
      (agent_play_sound, ":agent_id", "snd_repair_wood"),
    (try_end),
    ]),

  ("setup_ship_collision_props",
   [
    (assign, ":current_index", slot_ship_array_collision_props_begin),
    (assign, ":count", 0),
    (try_for_range, ":instance_id", 0, max_scene_prop_instance_id),
      (prop_instance_is_valid, ":instance_id"),
      (prop_instance_get_position, pos1, ":instance_id"),
      (position_get_z, ":prop_height", pos1),
      (le, ":prop_height", 500),
      (position_set_z, pos1, 0),
      (position_get_distance_to_terrain, ":terrain_distance", pos1),
      (gt, ":terrain_distance", -500),
      (this_or_next|gt, ":terrain_distance", 0),
      (le, ":prop_height", 0),
      (scene_prop_slot_eq, ":instance_id", slot_scene_prop_collision_kind, 0),
      (troop_set_slot, "trp_ship_array", ":current_index", ":instance_id"),
      (val_add, ":current_index", 1),
    (try_end),
    (store_sub, ":count", ":current_index", slot_ship_array_collision_props_begin),
    (troop_set_slot, "trp_ship_array", slot_ship_array_collision_props_count, ":count"),
    ]),

  ("cf_turn_windmill_fans",
   [(store_script_param_1, ":fan_no"),

    (scene_prop_get_instance, ":instance_id", "spr_windmill_fan_turning", ":fan_no"),
    (gt, ":instance_id", -1),
    (prop_instance_get_position, pos1, ":instance_id"),
    (position_rotate_y, pos1, 45),
    (prop_instance_animate_to_position, ":instance_id", pos1, 450),
    (val_add, ":fan_no", 1),
    (call_script, "script_cf_turn_windmill_fans", ":fan_no"),
    ]),

  ("scene_set_day_time",
   [
    (try_begin),
      (scene_prop_get_instance, ":instance_id", "spr_pw_scene_day_time", 0),
      (prop_instance_get_variation_id, ":day_time", ":instance_id"),
      (val_min, ":day_time", 23),
    (else_try),
      (assign, ":day_time", 12),
    (try_end),
    (scene_set_day_time, ":day_time"),
    (try_begin),
      (scene_prop_get_instance, ":instance_id", "spr_pw_scene_cloud_haze", 0),
      (prop_instance_get_variation_id, ":cloud", ":instance_id"),
      (val_min, ":cloud", 100),
      (set_global_cloud_amount, ":cloud"),
      (prop_instance_get_variation_id_2, ":haze", ":instance_id"),
      (val_min, ":haze", 100),
      (set_global_haze_amount, ":haze"),
    (try_end),
    ]),

  ("cf_play_scene_ambient_sound",
   [(store_script_param, ":instance_id", 1),

    (prop_instance_get_variation_id_2, ":probability", ":instance_id"),
    (le, ":probability", 100),
    (prop_instance_get_variation_id, ":sound_id", ":instance_id"),
    (val_add, ":sound_id", ambient_sounds_begin),
    (is_between, ":sound_id", ambient_sounds_begin, ambient_sounds_end),
    (store_random_in_range, ":random", 0, 100),
    (lt, ":random", ":probability"),
    (mission_cam_get_position, pos1),
    (prop_instance_get_position, pos2, ":instance_id"),
    (get_distance_between_positions, ":distance", pos1, pos2),
    (lt, ":distance", max_distance_to_play_sound),
    (play_sound_at_position, ":sound_id", pos2, sf_vol_15|sf_priority_7),
    ]),

  ("check_spawn_bots",
   [(store_script_param, ":dead_agent_id", 1),

    (try_begin),
      (multiplayer_is_server),
      (try_begin),
        (le, ":dead_agent_id", -1),
        (store_sub, ":bots_to_spawn", "$g_bot_count", "$g_spawned_bot_count"),
        (val_max, "$g_spawned_bot_count", "$g_bot_count"),
      (else_try),
        (assign, ":bots_to_spawn", 0),
        (agent_is_human, ":dead_agent_id"),
        (agent_get_player_id, ":player_id", ":dead_agent_id"),
        (neg|player_is_active, ":player_id"),
        (try_begin),
          (le, "$g_spawned_bot_count", "$g_bot_count"),
          (assign, ":bots_to_spawn", 1),
        (else_try),
          (val_sub, "$g_spawned_bot_count", 1),
        (try_end),
      (try_end),
      (ge, ":bots_to_spawn", 1),
      (store_current_scene, ":current_scene"),
      (modify_visitors_at_site, ":current_scene"),
      (try_for_range, ":unused", 0, ":bots_to_spawn"),
        (store_random_in_range, ":entry_point", 0, 5),
        (store_random_in_range, ":troop_id", playable_troops_begin, playable_troops_end),
        (add_visitors_to_current_scene, ":entry_point", ":troop_id", 1, 0, -1),
      (try_end),
    (try_end),
    ]),

  ("request_poll",
   [(store_script_param, ":poll_type", 1),
    (store_script_param, ":requester_player_id", 2),
    (store_script_param, ":value_1", 3),

    (try_begin),
      (player_is_active, ":requester_player_id"),
      (assign, ":value_2", -1),
      (assign, ":gold_cost", 0),
      (assign, ":poll_faction_id", factions_end),
      (assign, ":poll_error", 0),
      (try_begin),
        (neg|faction_slot_eq, factions_end, slot_faction_poll_end_time, 0),
        (assign, ":poll_error", poll_result_existing),
      (else_try),
        (neq, ":poll_type", poll_type_faction_lord),
        (try_for_range, ":other_faction_id", factions_begin, factions_end),
          (neg|faction_slot_eq, ":other_faction_id", slot_faction_poll_end_time, 0),
          (assign, ":poll_error", poll_result_existing),
        (try_end),
        (eq, ":poll_error", poll_result_existing),
      (else_try),
        (eq, ":poll_type", poll_type_change_scene),
        (eq, "$g_maps_voteable", 1),
        (is_between, ":value_1", scenes_begin, scenes_end),
        (assign, ":gold_cost", poll_cost_change_scene),
        (store_sub, ":scene_name_id", ":value_1", scenes_begin),
        (val_add, ":scene_name_id", scene_names_begin),
        (str_store_string, s1, ":scene_name_id"),
        (str_store_string, s0, "str_poll_change_scene"),
      (else_try),
        (this_or_next|eq, ":poll_type", poll_type_kick_player),
        (eq, ":poll_type", poll_type_ban_player),
        (neq, ":value_1", ":requester_player_id"),
        (player_is_active, ":value_1"),
        (neg|player_is_admin, ":value_1"),
        (assign, ":log_string_id", -1),
        (try_begin),
          (eq, ":poll_type", poll_type_kick_player),
          (eq, "$g_kick_voteable", 1),
          (assign, ":gold_cost", poll_cost_kick_player),
          (assign, ":log_string_id", "str_poll_kick_player"),
        (else_try),
          (eq, "$g_ban_voteable", 1),
          (assign, ":gold_cost", poll_cost_ban_player),
          (assign, ":log_string_id", "str_poll_ban_player"),
        (try_end),
        (gt, ":log_string_id", -1),
        (str_store_player_username, s1, ":value_1"),
        #(store_script_param, ":value_2", 4),
        (str_store_string, s0, ":log_string_id"),
      (else_try),
        (eq, ":poll_type", poll_type_faction_lord),
        (neq, ":value_1", ":requester_player_id"),
        (player_is_active, ":value_1"),
        (player_get_slot, ":poll_faction_id", ":requester_player_id", slot_player_faction_id),
        (assign, ":poll_error", poll_result_existing),
        (faction_slot_eq, ":poll_faction_id", slot_faction_poll_end_time, 0),
        (assign, ":poll_error", 0),
        (is_between, ":poll_faction_id", castle_factions_begin, factions_end),
        (player_slot_eq, ":value_1", slot_player_faction_id, ":poll_faction_id"),
        (assign, ":gold_cost", poll_cost_faction_lord),
        (str_store_player_username, s1, ":value_1"),
        (str_store_faction_name, s2, ":poll_faction_id"),
        (str_store_string, s0, "str_poll_faction_lord"),
      (else_try),
        (eq, ":poll_error", 0),
        (assign, ":poll_error", poll_result_invalid),
      (try_end),
      (try_begin),
        (neq, ":poll_error", 0),
        (multiplayer_send_int_to_player, ":requester_player_id", server_event_show_poll, ":poll_error"),
      (try_end),
      (eq, ":poll_error", 0),
      (call_script, "script_cf_check_enough_gold", ":requester_player_id", ":gold_cost"),
      (call_script, "script_player_adjust_gold", ":requester_player_id", ":gold_cost", -1),
      (assign, ":voter_count", 0),
      (get_max_players, ":max_players"),
      (try_for_range, ":player_id", 1, ":max_players"),
        (player_is_active, ":player_id"),
        (this_or_next|eq, ":poll_faction_id", factions_end),
        (player_slot_eq, ":player_id", slot_player_faction_id, ":poll_faction_id"),
        (player_slot_eq, ":player_id", slot_player_poll_faction_id, 0),
        (player_set_slot, ":player_id", slot_player_poll_faction_id, ":poll_faction_id"),
        (try_begin),
          (eq, ":value_2", -1),
          (multiplayer_send_3_int_to_player, ":player_id", server_event_show_poll, ":poll_type", ":requester_player_id", ":value_1"),
        (else_try),
          (multiplayer_send_4_int_to_player, ":player_id", server_event_show_poll, ":poll_type", ":requester_player_id", ":value_1", ":value_2"),
        (try_end),
        (val_add, ":voter_count", 1),
      (try_end),
      (gt, ":voter_count", 0),
      (str_store_player_username, s3, ":requester_player_id"),
      (server_add_message_to_log, "str_poll_log"),
      (store_mission_timer_a, ":end_time"),
      (val_add, ":end_time", poll_time_duration),
      (faction_set_slot, ":poll_faction_id", slot_faction_poll_end_time, ":end_time"),
      (faction_set_slot, ":poll_faction_id", slot_faction_poll_voter_count, ":voter_count"),
      (faction_set_slot, ":poll_faction_id", slot_faction_poll_yes_votes, 0),
      (faction_set_slot, ":poll_faction_id", slot_faction_poll_no_votes, 0),
      (faction_set_slot, ":poll_faction_id", slot_faction_poll_type, ":poll_type"),
      (faction_set_slot, ":poll_faction_id", slot_faction_poll_value_1, ":value_1"),
      (faction_set_slot, ":poll_faction_id", slot_faction_poll_value_2, ":value_2"),
      (try_begin),
        (this_or_next|eq, ":poll_type", poll_type_kick_player),
        (eq, ":poll_type", poll_type_faction_lord),
        (player_get_unique_id, ":unique_id", ":value_1"),
        (faction_set_slot, ":poll_faction_id", slot_faction_poll_target_unique_id, ":unique_id"),
      (else_try),
        (eq, ":poll_type", poll_type_ban_player),
        (save_ban_info_of_player, ":value_1"),
      (try_end),
    (try_end),
    ]),

  ("show_poll",
   [(store_script_param, ":poll_type", 1),

    (try_begin),
      (ge, ":poll_type", 0),
      (assign, "$g_poll_type", ":poll_type"),
      (store_script_param, "$g_poll_requester_player_id", 2),
      (store_script_param, "$g_poll_value_1", 3),
      (store_mission_timer_a, "$g_poll_end_time"),
      (val_add, "$g_poll_end_time", poll_time_duration),
      (start_presentation, "prsnt_show_poll"),
    (else_try),
      (eq, ":poll_type", poll_result_existing),
      (display_message, "str_poll_existing", poll_result_color),
    (else_try),
      (eq, ":poll_type", poll_result_invalid),
      (display_message, "str_poll_invalid", poll_result_color),
    (else_try),
      (try_begin),
        (is_presentation_active, "prsnt_show_poll"),
        (assign, "$g_hide_poll", 1),
      (try_end),
      (eq, ":poll_type", poll_result_no),
      (display_message, "str_poll_result_no", poll_result_color),
    (else_try),
      (eq, ":poll_type", poll_result_yes),
      (display_message, "str_poll_result_yes", poll_result_color),
    (else_try),
      (eq, ":poll_type", poll_result_admin_no),
      (display_message, "str_poll_result_admin_no", poll_result_color),
    (else_try),
      (eq, ":poll_type", poll_result_admin_yes),
      (display_message, "str_poll_result_admin_yes", poll_result_color),
    (try_end),
    ]),

  ("poll_vote",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":vote", 2),

    (try_begin),
      (player_get_slot, ":poll_faction_id", ":player_id", slot_player_poll_faction_id),
      (gt, ":poll_faction_id", 0),
      (player_set_slot, ":player_id", slot_player_poll_faction_id, 0),
      (ge, ":poll_faction_id", castle_factions_begin),
      (le, ":poll_faction_id", factions_end),
      (faction_slot_ge, ":poll_faction_id", slot_faction_poll_end_time, 1),
      (assign, ":remove_vote", 0),
      (try_begin),
        (neq, ":poll_faction_id", factions_end),
        (neg|player_slot_eq, ":player_id", slot_player_faction_id, ":poll_faction_id"),
        (assign, ":remove_vote", 1),
      (else_try),
        (eq, ":vote", poll_vote_abstain),
        (assign, ":remove_vote", 1),
      (try_end),
      (try_begin),
        (eq, ":remove_vote", 1),
        (faction_get_slot, ":voter_count", ":poll_faction_id", slot_faction_poll_voter_count),
        (val_sub, ":voter_count", 1),
        (faction_set_slot, ":poll_faction_id", slot_faction_poll_voter_count, ":voter_count"),
      (try_end),
      (eq, ":remove_vote", 0),
      (try_begin),
        (eq, ":vote", poll_vote_no),
        (faction_get_slot, ":no_votes", ":poll_faction_id", slot_faction_poll_no_votes),
        (val_add, ":no_votes", 1),
        (faction_set_slot, ":poll_faction_id", slot_faction_poll_no_votes, ":no_votes"),
      (else_try),
        (eq, ":vote", poll_vote_yes),
        (faction_get_slot, ":yes_votes", ":poll_faction_id", slot_faction_poll_yes_votes),
        (val_add, ":yes_votes", 1),
        (faction_set_slot, ":poll_faction_id", slot_faction_poll_yes_votes, ":yes_votes"),
      (else_try),
        (assign, ":poll_result", 0),
        (try_begin),
          (eq, ":vote", poll_vote_admin_no),
          (assign, ":poll_result", poll_result_admin_no),
        (else_try),
          (eq, ":vote", poll_vote_admin_yes),
          (assign, ":poll_result", poll_result_admin_yes),
        (try_end),
        (neq, ":poll_result", 0),
        (player_is_admin, ":player_id"),
        (player_slot_eq, ":player_id", slot_player_admin_no_override_poll, 0),
        (faction_set_slot, ":poll_faction_id", slot_faction_poll_end_time, 0),
        (call_script, "script_apply_poll_consequences", ":poll_faction_id", ":poll_result"),
      (try_end),
    (try_end),
    ]),

  ("check_polls_ended",
   [
    (store_mission_timer_a, ":current_time"),
    (store_add, ":factions_end", factions_end, 1),
    (try_for_range, ":poll_faction_id", castle_factions_begin, ":factions_end"),
      (faction_get_slot, ":end_time", ":poll_faction_id", slot_faction_poll_end_time),
      (ge, ":end_time", 1),
      (faction_get_slot, ":voter_count", ":poll_faction_id", slot_faction_poll_voter_count),
      (faction_get_slot, ":yes_votes", ":poll_faction_id", slot_faction_poll_yes_votes),
      (faction_get_slot, ":no_votes", ":poll_faction_id", slot_faction_poll_no_votes),
      (store_add, ":received_votes", ":yes_votes", ":no_votes"),
      (this_or_next|ge, ":received_votes", ":voter_count"),
      (ge, ":current_time", ":end_time"),

      (faction_set_slot, ":poll_faction_id", slot_faction_poll_end_time, 0),
      (store_sub, ":abstain_votes", ":voter_count", ":received_votes"),
      (val_mul, ":abstain_votes", 3),
      (val_div, ":abstain_votes", 10),
      (store_add, ":total_votes", ":received_votes", ":abstain_votes"),
      (val_max, ":total_votes", 1),
      (store_mul, ":vote_ratio", ":yes_votes", 100),
      (val_div, ":vote_ratio", ":total_votes"),
      (try_begin),
        (ge, ":vote_ratio", "$g_valid_vote_ratio"),
        (assign, ":poll_result", poll_result_yes),
      (else_try),
        (assign, ":poll_result", poll_result_no),
      (try_end),
      (call_script, "script_apply_poll_consequences", ":poll_faction_id", ":poll_result"),
    (try_end),
    ]),

  ("apply_poll_consequences",
   [(store_script_param, ":poll_faction_id", 1),
    (store_script_param, ":poll_result", 2),

    (faction_get_slot, ":poll_type", ":poll_faction_id", slot_faction_poll_type),
    (faction_get_slot, ":value_1", ":poll_faction_id", slot_faction_poll_value_1),
    (try_begin),
      (this_or_next|eq, ":poll_result", poll_result_yes),
      (eq, ":poll_result", poll_result_admin_yes),
      (this_or_next|eq, ":poll_type", poll_type_kick_player),
      (eq, ":poll_type", poll_type_faction_lord),
      (player_is_active, ":value_1"),
      (player_get_unique_id, ":check_unique_id", ":value_1"),
      (faction_get_slot, ":target_unique_id", ":poll_faction_id", slot_faction_poll_target_unique_id),
    (else_try),
      (assign, ":check_unique_id", -1),
      (assign, ":target_unique_id", -1),
    (try_end),
    (get_max_players, ":max_players"),
    (try_for_range, ":player_id", 1, ":max_players"),
      (player_is_active, ":player_id"),
      (this_or_next|eq, ":poll_faction_id", factions_end),
      (player_slot_eq, ":player_id", slot_player_faction_id, ":poll_faction_id"),
      (player_set_slot, ":player_id", slot_player_poll_faction_id, 0),
      (multiplayer_send_int_to_player, ":player_id", server_event_show_poll, ":poll_result"),
      (neq, ":check_unique_id", ":target_unique_id"),
      (player_get_unique_id, ":check_unique_id", ":value_1"),
      (eq, ":check_unique_id", ":target_unique_id"),
      (assign, ":value_1", ":player_id"),
    (try_end),
    (try_begin),
      (neq, ":poll_result", poll_result_yes),
      (neq, ":poll_result", poll_result_admin_yes),
    (else_try),
      (eq, ":poll_type", poll_type_change_scene),
      (assign, "$g_next_scene", ":value_1"),
    (else_try),
      (eq, ":poll_type", poll_type_kick_player),
      (player_is_active, ":value_1"),
      (eq, ":check_unique_id", ":target_unique_id"),
      (kick_player, ":value_1"),
    (else_try),
      (eq, ":poll_type", poll_type_ban_player),
      (ban_player_using_saved_ban_info),
    (else_try),
      (eq, ":poll_type", poll_type_faction_lord),
      (this_or_next|neg|player_is_active, ":value_1"),
      (eq, ":check_unique_id", ":target_unique_id"),
      (call_script, "script_cf_faction_set_lord", ":value_1", ":target_unique_id", ":poll_faction_id"),
    (try_end),
    ]),

  ("select_target_agent",
   [
    (set_fixed_point_multiplier, 1000),
    (multiplayer_get_my_player, ":my_player_id"),
    (player_get_agent_id, ":my_agent_id", ":my_player_id"),
    (assign, ":closest_score", int(math.sqrt(select_agent_max_x * select_agent_max_x + select_agent_max_y * select_agent_max_y))),
    (convert_to_fixed_point, ":closest_score"),
    (assign, "$g_target_agent_id", -1),
    (mission_cam_get_position, pos1),
    (try_for_agents, ":agent_id"),
      (agent_is_human, ":agent_id"),
      (agent_set_slot, ":agent_id", slot_agent_is_targeted, 0),
      (neq, ":agent_id", ":my_agent_id"),
      (agent_get_position, pos2, ":agent_id"),
      (position_move_z, pos2, 160),
      (agent_get_horse, ":horse", ":agent_id"),
      (try_begin),
        (ge, ":horse", 0),
        (position_move_z, pos2, 80),
      (try_end),
      (get_distance_between_positions, ":distance", pos1, pos2),
      (le, ":distance", max_distance_to_see_labels),
      (position_has_line_of_sight_to_position, pos1, pos2),
      (position_get_screen_projection, pos3, pos2),
      (position_get_x, ":x_pos", pos3),
      (val_sub, ":x_pos", presentation_max_x / 2),
      (val_abs, ":x_pos"),
      (lt, ":x_pos", select_agent_max_x),
      (position_get_y, ":y_pos", pos3),
      (val_sub, ":y_pos", presentation_max_y / 2),
      (val_abs, ":y_pos"),
      (lt, ":y_pos", select_agent_max_y),
      (val_mul, ":x_pos", ":x_pos"),
      (val_mul, ":y_pos", ":y_pos"),
      (store_add, ":score", ":x_pos", ":y_pos"),
      (convert_to_fixed_point, ":score"),
      (store_sqrt, ":score", ":score"),
      (lt, ":score", ":closest_score"),
      (assign, ":closest_score", ":score"),
      (assign, "$g_target_agent_id", ":agent_id"),
    (try_end),
    (try_begin),
      (gt, "$g_target_agent_id", -1),
      (agent_get_position, pos2, "$g_target_agent_id"),
      (particle_system_burst, "psys_target_agent", pos2, 1),
      (agent_set_slot, "$g_target_agent_id", slot_agent_is_targeted, 1),
      (agent_get_player_id, ":target_player_id", "$g_target_agent_id"),
      (try_begin),
        (player_is_active, ":target_player_id"),
        (assign, "$g_target_player_id", ":target_player_id"),
        (assign, "$g_target_player_overlay_id", -1),
        (player_set_slot, "$g_target_player_id", slot_player_list_button_id, -1),
      (try_end),
      (try_begin),
        (neg|is_presentation_active, "prsnt_target_agent_name"),
        (start_presentation, "prsnt_target_agent_name"),
      (try_end),
    (else_try),
      (player_is_active, "$g_target_player_id"),
      (player_slot_eq, "$g_target_player_id", slot_player_list_button_id, -1),
      (assign, "$g_target_player_id", -1),
    (try_end),
    (set_fixed_point_multiplier, 100),
    ]),

  ("cf_admin_action",
   [(store_script_param, ":admin_action", 1),
    (store_script_param, ":admin_player_id", 2),
    (store_script_param, ":target_player_id", 3),

    (player_is_admin, ":admin_player_id"),
    (try_begin),
      (ge, ":admin_action", admin_action_get_armor),
      (assign, ":target_player_id", ":admin_player_id"),
    (try_end),
    (player_is_active, ":target_player_id"),
    (try_begin),
      (eq, ":admin_action", admin_action_kick_player),
      (player_slot_eq, ":admin_player_id", slot_player_admin_no_kick, 0),
      (kick_player, ":target_player_id"),
    (else_try),
      (eq, ":admin_action", admin_action_ban_player_temp),
      (player_slot_eq, ":admin_player_id", slot_player_admin_no_temporary_ban, 0),
      (ban_player, ":target_player_id", 1, ":admin_player_id"),
    (else_try),
      (eq, ":admin_action", admin_action_ban_player_perm),
      (player_slot_eq, ":admin_player_id", slot_player_admin_no_permanent_ban, 0),
      (ban_player, ":target_player_id", 0, ":admin_player_id"),
    (else_try),
      (eq, ":admin_action", admin_action_mute_player),
      (player_slot_eq, ":admin_player_id", slot_player_admin_no_mute, 0),
      (player_get_is_muted, ":is_muted", ":target_player_id"),
      (try_begin),
        (eq, ":is_muted", 0),
        (assign, ":is_muted", 1),
      (else_try),
        (assign, ":is_muted", 0),
      (try_end),
      (player_set_is_muted, ":target_player_id", ":is_muted", 1),
    (else_try),
      (lt, ":admin_action", admin_action_remove_horses),
      (player_get_agent_id, ":agent_id", ":target_player_id"),
      (agent_is_active, ":agent_id"),
      (try_begin),
        (eq, ":admin_action", admin_action_kill_player),
        (player_slot_eq, ":admin_player_id", slot_player_admin_no_kill_fade, 0),
        (agent_deliver_damage_to_agent, ":agent_id", ":agent_id", 200),
      (else_try),
        (eq, ":admin_action", admin_action_fade_player_out),
        (player_slot_eq, ":admin_player_id", slot_player_admin_no_kill_fade, 0),
        (agent_fade_out, ":agent_id"),
        (try_for_range, ":player_equip_slot", slot_player_equip_item_0, slot_player_equip_end),
          (player_set_slot, ":target_player_id", ":player_equip_slot", 0),
        (try_end),
        (agent_get_slot, ":freeze_instance_id", ":agent_id", slot_agent_freeze_instance_id),
        (try_begin),
          (prop_instance_is_valid, ":freeze_instance_id"),
          (call_script, "script_remove_scene_prop", ":freeze_instance_id"),
        (try_end),
        (player_set_slot, ":target_player_id", slot_player_spawn_state, player_spawn_state_dead),
      (else_try),
        (eq, ":admin_action", admin_action_freeze_player),
        (player_slot_eq, ":admin_player_id", slot_player_admin_no_freeze, 0),
        (agent_get_slot, ":freeze_instance_id", ":agent_id", slot_agent_freeze_instance_id),
        (try_begin),
          (gt, ":freeze_instance_id", 0),
          (call_script, "script_remove_scene_prop", ":freeze_instance_id"),
          (agent_set_slot, ":agent_id", slot_agent_freeze_instance_id, 0),
        (else_try),
          (agent_get_horse, ":horse", ":agent_id"),
          (try_begin),
            (gt, ":horse", -1),
            (assign, ":freeze_scene_prop_id", "spr_code_freeze_horse_agent"),
          (else_try),
            (assign, ":freeze_scene_prop_id", "spr_code_freeze_agent"),
          (try_end),
          (agent_get_position, pos1, ":agent_id"),
          (call_script, "script_reuse_or_spawn_scene_prop", ":freeze_scene_prop_id"),
          (prop_instance_set_position, reg0, pos1),
          (agent_set_slot, ":agent_id", slot_agent_freeze_instance_id, reg0),
        (try_end),
      (else_try),
        (eq, ":admin_action", admin_action_teleport_to_player),
        (player_slot_eq, ":admin_player_id", slot_player_admin_no_teleport_self, 0),
        (player_get_agent_id, ":admin_agent_id", ":admin_player_id"),
        (try_begin),
          (agent_is_active, ":admin_agent_id"),
          (agent_get_position, pos1, ":agent_id"),
          (position_move_y, pos1, 100),
          (position_rotate_z, pos1, 180),
          (agent_set_position, ":admin_agent_id", pos1),
        (try_end),
      (else_try),
        (player_slot_eq, ":admin_player_id", slot_player_admin_no_admin_items, 0),
        (try_begin),
          (eq, ":admin_action", admin_action_get_armor),
          (troop_set_slot, "trp_temp_array", slot_player_equip_head, "itm_black_helmet"),
          (troop_set_slot, "trp_temp_array", slot_player_equip_body, "itm_black_armor"),
          (troop_set_slot, "trp_temp_array", slot_player_equip_foot, "itm_black_greaves"),
          (troop_set_slot, "trp_temp_array", slot_player_equip_gloves, "itm_gauntlets"),
        (else_try),
          (eq, ":admin_action", admin_action_get_invisible),
          (troop_set_slot, "trp_temp_array", slot_player_equip_head, "itm_invisible_head"),
          (troop_set_slot, "trp_temp_array", slot_player_equip_body, "itm_invisible_body"),
          (troop_set_slot, "trp_temp_array", slot_player_equip_foot, "itm_invisible_foot"),
          (troop_set_slot, "trp_temp_array", slot_player_equip_gloves, "itm_invisible_hand"),
        (else_try),
          (troop_set_slot, "trp_temp_array", slot_player_equip_body, 0),
        (try_end),
        (neg|troop_slot_eq, "trp_temp_array", slot_player_equip_body, 0),
        (agent_get_item_slot, ":equipped_item_id", ":agent_id", ek_body),
        (try_begin),
          (troop_slot_eq, "trp_temp_array", slot_player_equip_body, ":equipped_item_id"),
          (try_for_range, ":slot", slot_player_equip_head, slot_player_equip_gloves + 1),
            (player_get_slot, ":item_id", ":target_player_id", ":slot"),
            (try_begin),
              (neq, ":item_id", -1),
              (val_abs, ":item_id"),
              (ge, ":item_id", all_items_begin),
            (else_try),
              (store_sub, ":item_id", ":slot", slot_player_equip_head),
              (val_add, ":item_id", "itm_no_head"),
            (try_end),
            (troop_set_slot, "trp_temp_array", ":slot", ":item_id"),
          (try_end),
        (else_try),
          (eq, ":admin_action", admin_action_get_invisible),
          (agent_equip_item, ":agent_id", "itm_invisible_sword"),
        (try_end),
        (try_for_range, ":slot", slot_player_equip_head, slot_player_equip_gloves + 1),
          (troop_get_slot, ":item_id", "trp_temp_array", ":slot"),
          (call_script, "script_change_armor", ":agent_id", ":item_id"),
        (try_end),
      (else_try),
        (eq, ":admin_action", admin_action_refill_health),
        (player_slot_eq, ":admin_player_id", slot_player_admin_no_heal_self, 0),
        (agent_set_hit_points, ":agent_id", 100, 1),
        (call_script, "script_cf_clean_blood", ":agent_id"),
      (else_try),
        (eq, ":admin_action", admin_action_become_godlike),
        (player_slot_eq, ":admin_player_id", slot_player_admin_no_godlike_troop, 0),
        (player_get_troop_id, ":troop_id", ":admin_player_id"),
        (try_begin),
          (eq, ":troop_id", "trp_godlike_hero"),
          (player_get_slot, ":new_troop_id", ":admin_player_id", slot_player_non_lord_troop_id),
        (else_try),
          (player_set_slot, ":admin_player_id", slot_player_non_lord_troop_id, ":troop_id"),
          (assign, ":new_troop_id", "trp_godlike_hero"),
        (try_end),
        (player_set_troop_id, ":admin_player_id", ":new_troop_id"),
        (agent_set_hit_points, ":agent_id", 100, 1),
        (call_script, "script_player_add_equipped_items", ":admin_player_id", ":new_troop_id"),
        (call_script, "script_player_add_spawn_items", ":admin_player_id", 1),
        (call_script, "script_player_respawn_in_place", ":admin_player_id"),
      (else_try),
        (eq, ":admin_action", admin_action_get_horse),
        (player_slot_eq, ":admin_player_id", slot_player_admin_no_admin_items, 0),
        (agent_get_position, pos1, ":agent_id"),
        (position_move_x, pos1, 50),
        (position_set_z_to_ground_level, pos1),
        (set_spawn_position, pos1),
        (spawn_horse, "itm_admin_horse"),
      (else_try),
        (assign, ":admin_action", -1),
      (try_end),
    (else_try),
      (eq, ":admin_action", admin_action_remove_horses),
      (player_slot_eq, ":admin_player_id", slot_player_admin_no_admin_items, 0),
      (try_for_agents, ":horse_agent_id"),
        (agent_get_item_id, ":horse_item_id", ":horse_agent_id"),
        (eq, ":horse_item_id", "itm_admin_horse"),
        (agent_get_rider, ":rider_agent_id", ":horse_agent_id"),
        (try_begin),
          (le, ":rider_agent_id", -1),
          (agent_fade_out, ":horse_agent_id"),
        (else_try),
          (agent_get_player_id, ":rider_player_id", ":rider_agent_id"),
          (player_is_active, ":rider_player_id", ":rider_agent_id"),
          (player_is_admin, ":rider_player_id"),
        (else_try),
          (agent_deliver_damage_to_agent, ":agent_id", ":horse_agent_id", 1000),
          (agent_fade_out, ":horse_agent_id"),
        (try_end),
      (try_end),
    (else_try),
      (eq, ":admin_action", admin_action_remove_stray_horses),
      (player_slot_eq, ":admin_player_id", slot_player_admin_no_animals, 0),
      (try_for_agents, ":horse_agent_id"),
        (agent_get_item_id, ":horse_item_id", ":horse_agent_id"),
        (gt, ":horse_item_id", -1),
        (agent_get_rider, ":rider_agent_id", ":horse_agent_id"),
        (le, ":rider_agent_id", -1),
        (neg|agent_slot_ge, ":horse_agent_id", slot_agent_horse_last_rider, 1),
        (agent_fade_out, ":horse_agent_id"),
      (try_end),
    (else_try),
      (eq, ":admin_action", admin_action_teleport_to_ships),
      (player_slot_eq, ":admin_player_id", slot_player_admin_no_ships, 0),
      (player_get_agent_id, ":agent_id", ":admin_player_id"),
      (agent_is_active, ":agent_id"),
      (troop_get_slot, ":loop_end", "trp_ship_array", slot_ship_array_count),
      (gt, ":loop_end", 0),
      (val_add, ":loop_end", slot_ship_array_begin),
      (player_get_slot, ":target_ship_slot", ":admin_player_id", slot_player_teleport_to_ship_no),
      (try_for_range, ":unused", slot_ship_array_begin, ":loop_end"),
        (val_add, ":target_ship_slot", 1),
        (try_begin),
          (neg|is_between, ":target_ship_slot", slot_ship_array_begin, ":loop_end"),
          (assign, ":target_ship_slot", slot_ship_array_begin),
        (try_end),
        (troop_get_slot, ":instance_id", "trp_ship_array", ":target_ship_slot"),
        (scene_prop_slot_eq, ":instance_id", slot_scene_prop_state, scene_prop_state_active),
        (assign, ":loop_end", -1),
      (try_end),
      (try_begin),
        (eq, ":loop_end", -1),
        (prop_instance_get_position, pos1, ":instance_id"),
        (position_move_z, pos1, 500, 1),
        (agent_set_position, ":agent_id", pos1),
        (player_set_slot, ":admin_player_id", slot_player_teleport_to_ship_no, ":target_ship_slot"),
      (try_end),
    (else_try),
      (eq, ":admin_action", admin_action_reset_ships),
      (player_slot_eq, ":admin_player_id", slot_player_admin_no_ships, 0),
      (troop_get_slot, ":ship_array_count", "trp_ship_array", slot_ship_array_count),
      (gt, ":ship_array_count", 0),
      (player_get_agent_id, ":agent_id", ":admin_player_id"),
      (store_add, ":loop_end", slot_ship_array_begin, ":ship_array_count"),
      (try_for_range, ":ship_slot", slot_ship_array_begin, ":loop_end"),
        (troop_get_slot, ":hull_instance_id", "trp_ship_array", ":ship_slot"),
        (assign, ":reset", 0),
        (try_begin),
          (scene_prop_slot_eq, ":hull_instance_id", slot_scene_prop_state, scene_prop_state_destroyed),
          (assign, ":reset", 1),
        (else_try),
          (agent_is_active, ":agent_id"),
          (scene_prop_has_agent_on_it, ":hull_instance_id", ":agent_id"),
          (assign, ":reset", 2),
        (try_end),
        (gt, ":reset", 0),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_state, scene_prop_state_active),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_position, 0),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_target_position, 0),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_rotation, 0),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_target_rotation, 0),
        (scene_prop_get_slot, ":hit_points", ":hull_instance_id", slot_scene_prop_full_hit_points),
        (scene_prop_set_hit_points, ":hull_instance_id", ":hit_points"),
        (scene_prop_set_slot, ":hull_instance_id", slot_scene_prop_next_resource_hp, ":hit_points"),
        (prop_instance_get_starting_position, pos1, ":hull_instance_id"),
        (prop_instance_stop_animating, ":hull_instance_id"),
        (prop_instance_set_position, ":hull_instance_id", pos1),
        (scene_prop_get_slot, ":sail_instance_id", ":hull_instance_id", slot_scene_prop_linked_sail),
        (try_begin),
          (gt, ":sail_instance_id", -1),
          (prop_instance_stop_animating, ":sail_instance_id"),
          (init_position, pos2),
          (position_set_z, pos2, z_position_to_hide_object),
          (prop_instance_set_position, ":sail_instance_id", pos2),
        (try_end),
        (scene_prop_get_slot, ":sail_off_instance_id", ":hull_instance_id", slot_scene_prop_linked_sail_off),
        (try_begin),
          (gt, ":sail_off_instance_id", -1),
          (prop_instance_stop_animating, ":sail_off_instance_id"),
          (prop_instance_set_position, ":sail_off_instance_id", pos1),
        (try_end),
        (scene_prop_get_slot, ":ramp_instance_id", ":hull_instance_id", slot_scene_prop_linked_ramp),
        (try_begin),
          (gt, ":ramp_instance_id", -1),
          (prop_instance_stop_animating, ":ramp_instance_id"),
          (prop_instance_get_variation_id, ":ramp_start_position", ":hull_instance_id"),
          (try_begin),
            (gt, ":ramp_start_position", 1),
            (assign, ":ramp_start_position", -1),
          (try_end),
          (call_script, "script_ship_get_ramp_relative_position", ":ramp_start_position", 1),
          (position_transform_position_to_parent, pos2, pos1, pos30),
          (prop_instance_set_position, ":ramp_instance_id", pos2),
        (try_end),
        (try_begin),
          (eq, ":reset", 2),
          (entry_point_get_position, pos2, 0),
          (agent_set_position, ":agent_id", pos2),
        (try_end),
      (try_end),
    (else_try),
      (assign, ":admin_action", -1),
    (try_end),
    (gt, ":admin_action", -1),
    (store_add, ":log_string_id", admin_action_log_strings_begin, ":admin_action"),
    (str_store_string, s3, ":log_string_id"),
    (player_get_unique_id, reg0, ":admin_player_id"),
    (str_store_player_username, s0, ":admin_player_id"),
    (try_begin),
      (neq, ":target_player_id", ":admin_player_id"),
      (player_get_unique_id, reg1, ":target_player_id"),
      (str_store_player_username, s1, ":target_player_id"),
      (assign, ":log_string_id", "str_log_admin_target_player"),
    (else_try),
      (assign, ":log_string_id", "str_log_admin_target_self"),
    (try_end),
    (server_add_message_to_log, ":log_string_id"),
    ]),

  ("cf_faction_admin_action",
   [(store_script_param, ":action", 1),
    (store_script_param, ":sender_player_id", 2),
    (store_script_param, ":value_1", 3),

    (player_get_slot, ":faction_id", ":sender_player_id", slot_player_faction_id),
    (player_get_unique_id, ":unique_id", ":sender_player_id"),
    (faction_slot_eq, ":faction_id", slot_faction_lord_player_uid, ":unique_id"),
    (assign, ":fail", 0),
    (try_begin),
      (eq, ":action", faction_admin_action_change_banner),
      (is_between, ":value_1", banner_meshes_begin, banner_meshes_end),
      (assign, ":loop_end", factions_end),
      (try_for_range, ":other_faction_id", factions_begin, ":loop_end"),
        (faction_slot_eq, ":other_faction_id", slot_faction_banner_mesh, ":value_1"),
        (faction_slot_eq, ":other_faction_id", slot_faction_is_active, 1),
        (assign, ":loop_end", -1),
        (multiplayer_send_3_int_to_player, ":sender_player_id", server_event_preset_message, "str_banner_used_by_s1", preset_message_faction|preset_message_fail_sound, ":other_faction_id"),
      (try_end),
      (neq, ":loop_end", -1),
      (call_script, "script_cf_check_enough_gold", ":sender_player_id", faction_cost_change_banner),
      (call_script, "script_player_adjust_gold", ":sender_player_id", faction_cost_change_banner, -1),
      (faction_set_slot, ":faction_id", slot_faction_banner_mesh, ":value_1"),
      (get_max_players, ":max_players"),
      (try_for_range, ":player_id", 1, ":max_players"),
        (player_is_active, ":player_id"),
        (multiplayer_send_3_int_to_player, ":player_id", server_event_faction_set_slot, ":faction_id", slot_faction_banner_mesh, ":value_1"),
      (try_end),
      (try_for_range, ":castle_no", slot_mission_data_castle_owner_faction_begin, slot_mission_data_castle_owner_faction_end),
        (troop_get_slot, ":castle_faction_id", "trp_mission_data", ":castle_no"),
        (eq, ":castle_faction_id", ":faction_id"),
        (store_add, ":castle_is_active_slot", ":castle_no", slot_mission_data_castle_is_active_begin),
        (troop_slot_eq, "trp_mission_data", ":castle_is_active_slot", 1),
        (call_script, "script_redraw_castle_banners", ":castle_no"), #need a delay to make sure the faction banner is updated on clients first?
      (try_end),
    (else_try),
      (eq, ":action", faction_admin_action_kick_player),
      (player_is_active, ":value_1"),
      (player_slot_eq, ":value_1", slot_player_faction_id, ":faction_id"),
      (neq, ":value_1", ":sender_player_id"),
      (faction_slot_eq, ":faction_id", slot_faction_poll_end_time, 0),
      (assign, ":continue", 1),
      (try_begin),
        (player_slot_eq, ":value_1", slot_player_last_faction_kicked_from, ":faction_id"),
      (else_try),
        (call_script, "script_cf_check_enough_gold", ":sender_player_id", faction_cost_kick_player),
        (call_script, "script_player_adjust_gold", ":sender_player_id", faction_cost_kick_player, -1),
      (else_try),
        (assign, ":continue", 0),
      (try_end),
      (eq, ":continue", 1),
      (player_set_troop_id, ":value_1", "trp_peasant"),
      (call_script, "script_change_faction", ":value_1", "fac_commoners", change_faction_type_no_respawn),
      (player_set_slot, ":value_1", slot_player_last_faction_kicked_from, ":faction_id"),
    (else_try),
      (assign, ":key_slot", -1),
      (try_begin),
        (eq, ":action", faction_admin_action_toggle_player_door_key),
        (assign, ":key_slot", slot_player_has_faction_door_key),
      (else_try),
        (eq, ":action", faction_admin_action_toggle_player_money_key),
        (assign, ":key_slot", slot_player_has_faction_money_key),
      (else_try),
        (eq, ":action", faction_admin_action_toggle_player_item_key),
        (assign, ":key_slot", slot_player_has_faction_item_key),
      (try_end),
      (gt, ":key_slot", -1),
      (player_is_active, ":value_1"),
      (player_slot_eq, ":value_1", slot_player_faction_id, ":faction_id"),
      (try_begin),
        (player_slot_eq, ":value_1", ":key_slot", 0),
        (assign, ":has_key", 1),
      (else_try),
        (assign, ":has_key", 0),
      (try_end),
      (player_set_slot, ":value_1", ":key_slot", ":has_key"),
      (multiplayer_send_3_int_to_player, ":sender_player_id", server_event_player_set_slot, ":value_1", ":key_slot", ":has_key"),
    (else_try),
      (assign, ":new_relation", -1),
      (try_begin),
        (eq, ":action", faction_admin_action_set_relation_hostile),
        (assign, ":new_relation", 0),
      (else_try),
        (eq, ":action", faction_admin_action_set_relation_peaceful),
        (assign, ":new_relation", 1),
      (try_end),
      (gt, ":new_relation", -1),
      (is_between, ":value_1", castle_factions_begin, factions_end),
      (faction_slot_eq, ":value_1", slot_faction_is_active, 1),
      (store_add, ":relation_slot", slot_faction_relations_begin, ":value_1"),
      (faction_set_slot, ":faction_id", ":relation_slot", ":new_relation"),
      (get_max_players, ":max_players"),
      (try_for_range, ":player_id", 1, ":max_players"),
        (player_is_active, ":player_id"),
        (multiplayer_send_3_int_to_player, ":player_id", server_event_faction_set_slot, ":faction_id", ":relation_slot", ":new_relation"),
      (try_end),
    (else_try),
      (assign, ":fail", 1),
    (try_end),
    (eq, ":fail", 0),
    ]),

]
