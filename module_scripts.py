# -*- coding: cp1254 -*-
from header_common import *
from header_operations import *
from module_constants import *
from module_constants import *
from header_parties import *
from header_skills import *
from header_mission_templates import *
from header_items import *
from header_triggers import *
from header_terrain_types import *
from header_music import *


####################################################################################################################
# scripts is a list of script records.
# Each script record contns the following two fields:
# 1) Script id: The prefix "script_" will be inserted when referencing scripts.
# 2) Operation block: This must be a valid operation block. See header_operations.py for reference.
####################################################################################################################

scripts = [
  ("game_start", []),
  ("game_get_use_string", []),

  ("game_quick_start",
   [
    (store_random_in_range, "$g_profile_troop_body_item", "itm_linen_tunic", "itm_tribal_warrior_outfit"),
    (store_random_in_range, "$g_profile_troop_foot_item", "itm_hunter_boots", "itm_leather_boots"),
    (call_script, "script_initialize_troop_equipment_slots"),
    ]),

  ("game_set_multiplayer_mission_end", []),
  ("game_enable_cheat_menu", []),
  ("game_get_console_command", []),
  ("game_event_party_encounter", []),
  ("game_event_simulate_battle", []),
  ("game_event_battle_end", []),
  ("game_get_item_buy_price_factor", []),
  ("game_get_item_sell_price_factor", []),
  ("game_event_buy_item", []),
  ("game_event_sell_item", []),
  ("game_get_troop_wage", []),
  ("game_get_total_wage", []),
  ("game_get_join_cost", []),
  ("game_get_upgrade_xp", []),
  ("game_get_upgrade_cost", []),
  ("game_get_prisoner_price", []),
  ("game_check_prisoner_can_be_sold", []),
  ("game_get_morale_of_troops_from_faction", []),
  ("game_event_detect_party", []),
  ("game_event_undetect_party", []),
  ("game_get_statistics_line", []),
  ("game_get_date_text", []),
  ("game_get_money_text", []),
  ("game_get_party_companion_limit", []),
  ("game_reset_player_party_name", []),
  ("game_get_troop_note", []),
  ("game_get_center_note", []),
  ("game_get_faction_note", []),
  ("game_get_quest_note", []),
  ("game_get_info_page_note", []),

  ("game_get_scene_name",
   [(store_script_param, ":scene_no", 1),
    (try_begin),
      (is_between, ":scene_no", scenes_begin, scenes_end),
      (store_sub, ":string_id", ":scene_no", scenes_begin),
      (val_add, ":string_id", scene_names_begin),
      (str_store_string, s0, ":string_id"),
    (try_end),
    ]),

  ("game_get_mission_template_name",
   [(store_script_param, ":mission_template_no", 1),
    (try_begin),
      (is_between, ":mission_template_no", game_type_mission_templates_begin, game_type_mission_templates_end),
      (store_add, ":string_id", ":mission_template_no", game_type_names_begin),
      (str_store_string, s0, ":string_id"),
    (try_end),
    ]),

  ("game_receive_url_response", []),
  ("game_get_cheat_mode", []),

  ("game_receive_network_message",
   [(store_script_param, ":sender_player_id", 1),
    (store_script_param, ":event_type", 2),

    (try_begin),
      (neg|multiplayer_is_server),
      (try_begin),
        (eq, ":event_type", server_event_preset_message),
        (store_script_param, ":string_id", 3),
        (store_script_param, ":flags", 4),
        (store_script_param, ":value_1", 5),
        (store_script_param, ":value_2", 6),
        (call_script, "script_preset_message", ":string_id", ":flags", ":value_1", ":value_2"),
      (else_try),
        (eq, ":event_type", server_event_agent_play_sound),
        (store_script_param, ":agent_id", 3),
        (store_script_param, ":sound_id", 4),
        (try_begin),
          (is_between, ":sound_id", 0, "snd_sounds_end"),
          (try_begin),
            (lt, ":agent_id", 0),
            (play_sound, ":sound_id"),
          (else_try),
            (agent_is_active, ":agent_id"),
            (agent_play_sound, ":agent_id", ":sound_id"),
          (try_end),
        (try_end),
      (try_end),
    (else_try),
      (multiplayer_is_server),
    (try_end),
    ]),

  ("game_get_multiplayer_server_option_for_mission_template", []),
  ("game_multiplayer_server_option_for_mission_template_to_string", []),
  ("game_multiplayer_event_duel_offered", []),

  ("game_get_multiplayer_game_type_enum",
   [(assign, reg0, game_type_mission_templates_begin),
    (store_sub, reg1, game_type_mission_templates_begin, game_type_mission_templates_end),
    ]),

  ("game_multiplayer_get_game_type_mission_template",
   [(store_script_param, ":game_type", 1),
    (try_begin),
      (is_between, ":game_type", game_type_mission_templates_begin, game_type_mission_templates_end),
      (assign, reg0, ":game_type"),
    (else_try),
      (assign, reg0, -1),
    (try_end),
    ]),

  ("game_get_party_prisoner_limit", []),
  ("game_get_item_extra_text", []),
  ("game_on_disembark", []),
  ("game_context_menu_get_buttons", []),
  ("game_event_context_menu_button_clicked", []),
  ("game_get_skill_modifier_for_troop", []),
  ("game_check_party_sees_party", []),
  ("game_get_party_speed_multiplier", []),

  ("add_troop_to_cur_tableau_for_profile",
   [(store_script_param, ":troop_no",1),
    (set_fixed_point_multiplier, 100),

    (cur_tableau_clear_override_items),
    (cur_tableau_set_camera_parameters, 1, 4, 6, 10, 10000),

    (init_position, pos5),
    (assign, ":cam_height", 105),
    (assign, ":camera_distance", 380),
    (assign, ":camera_yaw", -15),
    (assign, ":camera_pitch", -18),
    (assign, ":animation", "anim_stand_man"),

    (position_set_z, pos5, ":cam_height"),
    (position_rotate_x, pos5, -90),
    (position_rotate_z, pos5, 180),
    (position_rotate_y, pos5, ":camera_yaw"),
    (position_rotate_x, pos5, ":camera_pitch"),
    (position_move_z, pos5, ":camera_distance", 0),
    (position_move_x, pos5, 5, 0),

    (profile_get_banner_id, ":profile_banner"),
    (try_begin),
      (ge, ":profile_banner", 0),
      (init_position, pos2),
      (val_add, ":profile_banner", banner_meshes_begin),
      (position_set_x, pos2, -175),
      (position_set_y, pos2, -300),
      (position_set_z, pos2, 180),
      (position_rotate_x, pos2, 90),
      (position_rotate_y, pos2, -15),
      (cur_tableau_add_mesh, ":profile_banner", pos2, 0, 0),
    (try_end),

    (troop_clear_inventory, ":troop_no"),
    (troop_add_item, ":troop_no", "$g_profile_troop_body_item"),
    (troop_add_item, ":troop_no", "$g_profile_troop_foot_item"),
    (troop_equip_items, ":troop_no"),

    (init_position, pos2),
    (try_begin),
      (troop_is_hero, ":troop_no"),
      (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
    (else_try),
      (store_mul, ":random_seed", ":troop_no", 126233),
      (val_mod, ":random_seed", 1000),
      (val_add, ":random_seed", 1),
      (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
    (try_end),
    (cur_tableau_set_camera_position, pos5),

    (copy_position, pos8, pos5),
    (position_rotate_x, pos8, -90),
    (position_rotate_z, pos8, 30),
    (position_rotate_x, pos8, -60),
    (cur_tableau_add_sun_light, pos8, 175,150,125),
    ]),

  ("preset_message",
   [(store_script_param, "$g_preset_message_string_id", 1),
    (store_script_param, ":flags", 2),
    (store_script_param, "$g_preset_message_value_1", 3),
    (store_script_param, "$g_preset_message_value_2", 4),

    (assign, ":color", ":flags"),
    (val_and, ":color", preset_message_color_mask),
    (try_begin),
      (eq, ":color", preset_message_white),
      (assign, "$g_preset_message_color", 0xFFFFFFFF),
    (else_try),
      (eq, ":color", preset_message_red),
      (assign, "$g_preset_message_color", 0xFFFF4422),
    (else_try),
      (eq, ":color", preset_message_green),
      (assign, "$g_preset_message_color", 0xFF33DD11),
    (else_try),
      (eq, ":color", preset_message_blue),
      (assign, "$g_preset_message_color", 0xFFFF4422),
    (else_try),
      (eq, ":color", preset_message_yellow),
      (assign, "$g_preset_message_color", 0xFFFFEE11),
    (try_end),

    (assign, "$g_preset_message_type", ":flags"),
    (val_and, "$g_preset_message_type", preset_message_type_mask),
    (try_begin),
      (eq, "$g_preset_message_type", preset_message_read_object),
      (start_presentation, "prsnt_read_object"),
    (else_try),
      (assign, "$g_preset_message_params", ":flags"),
      (val_and, "$g_preset_message_params", preset_message_params_mask),

      # keep the same as in prsnt_preset_message_* - unfortunately scripts and presentations are not run in order
      (try_begin),
        (eq, "$g_preset_message_params", preset_message_item),
        (is_between, "$g_preset_message_value_1", 1, all_items_end),
        (str_store_item_name, s1, "$g_preset_message_value_1"),
      (else_try),
        (eq, "$g_preset_message_params", preset_message_agent),
        (agent_is_active, "$g_preset_message_value_1"),
        (str_store_agent_name, s1, "$g_preset_message_value_1"),
      (else_try),
        (eq, "$g_preset_message_params", preset_message_player),
        (player_is_active, "$g_preset_message_value_1"),
        (str_store_player_username, s1, "$g_preset_message_value_1"),
      (else_try),
        (eq, "$g_preset_message_params", preset_message_faction),
        (is_between, "$g_preset_message_value_1", factions_begin, factions_end),
        (str_store_faction_name, s1, "$g_preset_message_value_1"),
        (faction_get_color, "$g_preset_message_color", "$g_preset_message_value_1"),
      (else_try),
        (assign, reg1, "$g_preset_message_value_1"),
        (assign, reg2, "$g_preset_message_value_2"),
      (try_end),
      # end keep same

      (assign, ":log", ":flags"),
      (val_and, ":log", preset_message_log),
      (try_begin),
        (eq, ":log", preset_message_log),
        (display_message, "$g_preset_message_string_id", "$g_preset_message_color"),
      (try_end),

      (assign, ":fail_sound", ":flags"),
      (val_and, ":fail_sound", preset_message_fail_sound),
      (try_begin),
        (eq, ":fail_sound", preset_message_fail_sound),
        (play_sound, "snd_failure"),
      (try_end),

      (try_begin),
        (eq, "$g_preset_message_display_enabled", 0),
      (else_try),
        (eq, "$g_preset_message_type", preset_message_small),
        (start_presentation, "prsnt_preset_message_small"),
      (else_try),
        (eq, "$g_preset_message_type", preset_message_big),
        (start_presentation, "prsnt_preset_message_big"),
      (try_end),
    (try_end),
    ]),

  ("cf_add_item_to_troop_equipment_slots",
   [(store_script_param, ":troop_id", 1),
    (store_script_param, ":item_id", 2),

    (item_get_type, ":item_type", ":item_id"),
    (try_begin),
      (eq, ":item_type", itp_type_one_handed_wpn),
      (assign, ":equipment_slot_begin", slot_troop_equipment_one_hand_begin),
    (else_try),
      (is_between, ":item_type", itp_type_two_handed_wpn, itp_type_polearm + 1),
      (assign, ":equipment_slot_begin", slot_troop_equipment_two_hand_begin),
    (else_try),
      (is_between, ":item_type", itp_type_bow, itp_type_thrown + 1),
      (assign, ":equipment_slot_begin", slot_troop_equipment_ranged_begin),
    (else_try),
      (is_between, ":item_type", itp_type_arrows, itp_type_bolts + 1),
      (assign, ":equipment_slot_begin", slot_troop_equipment_ammo_begin),
    (else_try),
      (eq, ":item_type", itp_type_shield),
      (assign, ":equipment_slot_begin", slot_troop_equipment_shield_begin),
    (else_try),
      (eq, ":item_type", itp_type_head_armor),
      (assign, ":equipment_slot_begin", slot_troop_equipment_head_begin),
    (else_try),
      (eq, ":item_type", itp_type_body_armor),
      (assign, ":equipment_slot_begin", slot_troop_equipment_body_begin),
    (else_try),
      (eq, ":item_type", itp_type_foot_armor),
      (assign, ":equipment_slot_begin", slot_troop_equipment_foot_begin),
    (else_try),
      (eq, ":item_type", itp_type_hand_armor),
      (assign, ":equipment_slot_begin", slot_troop_equipment_hand_begin),
    (else_try),
      (eq, ":item_type", itp_type_horse),
      (assign, ":equipment_slot_begin", slot_troop_equipment_horse_begin),
    (else_try),
      (assign, ":equipment_slot_begin", -1),
    (try_end),
    (neq, ":equipment_slot_begin", -1),

    (troop_get_slot, ":equipment_slot_count", ":troop_id", ":equipment_slot_begin"),
    (lt, ":equipment_slot_count", troop_slot_count_per_equipment_type - 1),
    (val_add, ":equipment_slot_count", 1),
    (troop_set_slot, ":troop_id", ":equipment_slot_begin", ":equipment_slot_count"),
    (val_add, ":equipment_slot_begin", ":equipment_slot_count"),
    (troop_set_slot, ":troop_id", ":equipment_slot_begin", ":item_id"),
    ]),

  ("initialize_troop_equipment_slots",
   [
    (try_begin),
      (multiplayer_is_server),
      (try_for_range, ":troop_id", playable_troops_begin, playable_troops_end),
        (troop_get_inventory_capacity, ":capacity", ":troop_id"),
        (try_for_range, ":inv_slot", 0, ":capacity"),
          (troop_get_inventory_slot, ":item_id", ":troop_id", ":inv_slot"),
          (gt, ":item_id", 0),
          (call_script, "script_cf_add_item_to_troop_equipment_slots", ":troop_id", ":item_id"),
        (try_end),
      (try_end),
    (try_end),
    ]),

  ("cf_troop_get_random_equipment",
   [(store_script_param, ":troop_id", 1),
    (store_script_param, ":slot_begin", 2),

    (troop_get_slot, ":item_count", ":troop_id", ":slot_begin"),
    (gt, ":item_count", 0),
    (val_add, ":slot_begin", 1),
    (store_add, ":slot_end", ":slot_begin", ":item_count"),
    (store_random_in_range, ":random_slot", ":slot_begin", ":slot_end"),
    (troop_get_slot, reg0, ":troop_id", ":random_slot"),
    ]),

  ("player_add_troop_spawn_items",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":troop_id", 2),

    (try_begin),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_one_hand_begin),
      (player_add_spawn_item, ":player_id", ek_item_0, reg0),
    (else_try),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_two_hand_begin),
      (player_add_spawn_item, ":player_id", ek_item_0, reg0),
    (try_end),
    (try_begin),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_shield_begin),
      (player_add_spawn_item, ":player_id", ek_item_1, reg0),
    (try_end),
    (try_begin),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_ranged_begin),
      (item_get_type, ":ranged_item_type", reg0),
      (player_add_spawn_item, ":player_id", ek_item_2, reg0),
      (try_begin),
        (neq, ":ranged_item_type", itp_type_thrown),
        (val_sub, ":ranged_item_type", itp_type_bow - itp_type_arrows),
        (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_ammo_begin),
        (item_get_type, ":ammo_item_type", reg0),
        (try_begin),
          (eq, ":ammo_item_type", ":ranged_item_type"),
          (player_add_spawn_item, ":player_id", ek_item_3, reg0),
        (else_try),
          (troop_get_slot, ":ammo_slot_end", ":troop_id", slot_troop_equipment_ammo_begin),
          (val_add, ":ammo_slot_end", slot_troop_equipment_ammo_begin + 1),
          (try_for_range, ":ammo_slot", slot_troop_equipment_ammo_begin + 1, ":ammo_slot_end"),
            (troop_get_slot, ":ammo_item", ":troop_id", ":ammo_slot"),
            (item_get_type, ":ammo_item_type", ":ammo_item"),
            (eq, ":ammo_item_type", ":ranged_item_type"),
            (player_add_spawn_item, ":player_id", ek_item_3, reg0),
            (assign, ":ammo_slot_end", 0),
          (try_end),
        (try_end),
      (try_end),
    (else_try),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_two_hand_begin),
      (player_add_spawn_item, ":player_id", ek_item_2, reg0),
    (try_end),
    (try_begin),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_head_begin),
      (player_add_spawn_item, ":player_id", ek_head, reg0),
    (try_end),
    (try_begin),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_body_begin),
      (player_add_spawn_item, ":player_id", ek_body, reg0),
    (try_end),
    (try_begin),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_foot_begin),
      (player_add_spawn_item, ":player_id", ek_foot, reg0),
    (try_end),
    (try_begin),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_hand_begin),
      (player_add_spawn_item, ":player_id", ek_gloves, reg0),
    (try_end),
    (try_begin),
      (call_script, "script_cf_troop_get_random_equipment", ":troop_id", slot_troop_equipment_horse_begin),
      (player_add_spawn_item, ":player_id", ek_horse, reg0),
    (try_end),
    ]),

  ("player_add_spawn_items",
   [(store_script_param, ":player_id", 1),
    (store_script_param, ":troop_id", 2),

    (call_script, "script_player_add_troop_spawn_items", ":player_id", ":troop_id"),
    (player_get_agent_id, ":agent_id", ":player_id"),
    (try_begin),
      (agent_is_alive, ":agent_id"),
      (try_for_range, ":equip_slot", ek_head, ek_gloves + 1),
        (player_get_slot, ":item_id", ":player_id", ":equip_slot"),
        (gt, ":item_id", 0),
        (store_item_value, ":item_value", ":item_id"),
        (player_get_item_id, ":troop_item_id", ":player_id", ":equip_slot"),
        (store_item_value, ":troop_item_value", ":troop_item_id"),
        (ge, ":item_value", ":troop_item_value"),
        (player_add_spawn_item, ":player_id", ":equip_slot", ":item_id"),
      (try_end),
      (assign, ":equip_slot", ek_item_0),
      (assign, ":loop_condition", wielded_items_begin),
      (try_for_range_backwards, ":item_id", ":loop_condition", wielded_items_end), #more valuable at the end?
        (agent_has_item_equipped, ":agent_id", ":item_id"),
        (player_add_spawn_item, ":player_id", ":equip_slot", ":item_id"),
        (val_add, ":equip_slot", 1),
        (gt, ":equip_slot", ek_item_3),
        (assign, ":loop_condition", wielded_items_end),
      (try_end),
      (try_begin),
        (agent_get_horse, ":horse_item_id", ":agent_id"),
        (gt, ":horse_item_id", 0),
        (player_add_spawn_item, ":player_id", ek_horse, ":horse_item_id"),
      (try_end),
    (try_end),
    ]),

  ("player_check_spawn_agent",
   [(store_script_param, ":player_id", 1),

    (try_begin),
      (player_is_active, ":player_id"),
      (neg|player_is_busy_with_menus, ":player_id"),
      (player_get_agent_id, ":agent_id", ":player_id"),
      (this_or_next|lt, ":agent_id", 0),
      (neg|agent_is_alive, ":agent_id"),
      (player_get_troop_id, ":troop_id", ":player_id"),
      (call_script, "script_player_add_troop_spawn_items", ":player_id", ":troop_id"),
      (player_spawn_new_agent, ":player_id", 0),
    (try_end),
    ]),

  ("array_copy_range",
   [(store_script_param, ":from_array_troop_id", 1),
    (store_script_param, ":from_array_index", 2),
    (store_script_param, ":to_array_troop_id", 3),
    (store_script_param, ":to_array_index", 4),
    (store_script_param, ":count", 5),

    (try_for_range, ":unused", 0, ":count"),
      (troop_get_slot, ":value", ":from_array_troop_id", ":from_array_index"),
      (troop_set_slot, ":to_array_troop_id", ":to_array_index", ":value"),
      (val_add, ":from_array_index", 1),
      (val_add, ":to_array_index", 1),
    (try_end),
    ]),

  ("copy_player_values_to_inactive",
   [(store_script_param, ":active_index", 1),

    (troop_get_slot, ":inactive_array_size", "trp_inactive_players_array", slot_player_array_size),
    (troop_get_slot, ":active_unique_id", "trp_active_players_array", ":active_index"),
    (assign, ":loop_end", ":inactive_array_size"),
    (assign, ":inactive_index", slot_player_array_begin),
    (try_for_range, ":unused", 0, ":loop_end"),
      (try_begin),
        (this_or_next|troop_slot_eq, "trp_inactive_players_array", ":inactive_index", 0),
        (troop_slot_eq, "trp_inactive_players_array", ":inactive_index", ":active_unique_id"),
        (assign, ":loop_end", -1),
      (else_try),
        (val_add, ":inactive_index", player_array_entry_size),
      (try_end),
    (try_end),
    (try_begin),
      (neq, ":loop_end", -1),
      (val_add, ":inactive_array_size", 1),
      (troop_set_slot, "trp_inactive_players_array", slot_player_array_size, ":inactive_array_size"),
    (try_end),
    (call_script, "script_array_copy_range", "trp_active_players_array", ":active_index", "trp_inactive_players_array", ":inactive_index", player_array_entry_size),
    ]),

  ("player_check_stored_values",
   [(store_script_param, ":player_id", 1),

    (store_mul, ":player_index", ":player_id", player_array_entry_size),
    (troop_get_slot, ":stored_unique_id", "trp_active_players_array", ":player_index"),
    (try_begin),
      (player_is_active, ":player_id"),
      (player_get_unique_id, ":player_unique_id", ":player_id"),
      (try_begin),
        (neq, ":player_unique_id", ":stored_unique_id"),
        (try_begin),
          (neq, ":stored_unique_id", 0),
          (call_script, "script_copy_player_values_to_inactive", ":player_index"),
        (try_end),
        (troop_set_slot, "trp_active_players_array", ":player_index", ":player_unique_id"),
      (try_end),
      (player_get_troop_id, ":troop_id", ":player_id"),
      (store_add, ":temp_index", ":player_index", player_array_troop_id),
      (troop_set_slot, "trp_active_players_array", ":temp_index", ":troop_id"),
      (player_get_gold, ":gold_value", ":player_id"),
      (store_add, ":temp_index", ":player_index", player_array_gold_value),
      (troop_set_slot, "trp_active_players_array", ":temp_index", ":gold_value"),
    (else_try),
      (neq, ":stored_unique_id", 0),
      (call_script, "script_copy_player_values_to_inactive", ":player_index"),
      (troop_set_slot, "trp_active_players_array", ":player_index", 0),
    (try_end),
    ]),

  ("setup_player_joined",
   [(store_script_param, ":player_id", 1),

    (assign, ":found", 0),
    (player_get_unique_id, ":player_unique_id", ":player_id"),
    (store_mul, ":active_index", ":player_id", player_array_entry_size),
    (troop_get_slot, ":inactive_array_size", "trp_inactive_players_array", slot_player_array_size),
    (try_begin),
      (gt, ":inactive_array_size", 0),
      (store_sub, ":inactive_last_entry_number", ":inactive_array_size", 1),
      (store_mul, ":inactive_index", ":inactive_last_entry_number", player_array_entry_size),
      (val_add, ":inactive_index", slot_player_array_begin),
      (assign, ":loop_condition", ":inactive_array_size"),
      (try_for_range, ":unused", 0, ":loop_condition"),
        (troop_get_slot, ":inactive_unique_id", "trp_inactive_players_array", ":inactive_index"),
        (try_begin),
          (neq, ":inactive_unique_id", ":player_unique_id"),
          (val_sub, ":inactive_index", player_array_entry_size),
        (else_try),
          (call_script, "script_array_copy_range", "trp_inactive_players_array", ":inactive_index", "trp_active_players_array", ":active_index", player_array_entry_size),
          (troop_set_slot, "trp_inactive_players_array", ":inactive_index", 0),
          (assign, ":loop_condition", 0),
          (assign, ":found", 1),
        (try_end),
      (try_end),
      (try_begin),
        (eq, ":found", 0),
        (get_max_players, ":loop_condition"),
        (try_for_range, ":unchecked_player_id", 1, ":loop_condition"),
          (neg|player_is_active, ":unchecked_player_id"),
          (store_mul, ":unchecked_player_index", ":unchecked_player_id", player_array_entry_size),
          (troop_get_slot, ":unchecked_unique_id", "trp_active_players_array", ":unchecked_player_index"),
          (eq, ":unchecked_unique_id", ":player_unique_id"),
          (call_script, "script_array_copy_range", "trp_active_players_array", ":unchecked_player_index", "trp_active_players_array", ":active_index", player_array_entry_size),
          (troop_set_slot, "trp_active_players_array", ":unchecked_player_index", 0),
          (assign, ":loop_condition", 0),
          (assign, ":found", 1),
        (try_end),
      (try_end),
    (try_end),
    (try_begin),
      (eq, ":found", 1),
      (store_add, ":temp_index", ":active_index", player_array_troop_id),
      (troop_get_slot, ":troop_id", "trp_active_players_array", ":temp_index"),
      (player_set_troop_id, ":player_id", ":troop_id"),
      (store_add, ":temp_index", ":active_index", player_array_gold_value),
      (troop_get_slot, ":gold_value", "trp_active_players_array", ":temp_index"),
      (store_random_in_range, ":keep_percentage", 50, 80),
      (val_mul, ":gold_value", ":keep_percentage"),
      (val_div, ":gold_value", 100),
      (player_set_gold, ":player_id", ":gold_value", max_correctly_displayed_gold),
    (else_try),
      (player_set_troop_id, ":player_id", playable_troops_begin),
      (store_random_in_range, ":starting_gold", 1, 50),
      (player_set_gold, ":player_id", ":starting_gold", max_correctly_displayed_gold),
    (try_end),
    ]),

  ("agent_play_sound",
   [(store_script_param, ":agent_id", 1),
    (store_script_param, ":sound_id", 2),

    (try_begin),
      (gt, ":agent_id", -1),
      (agent_is_active, ":agent_id"),
      (agent_get_position, pos60, ":agent_id"),
      (try_for_agents, ":agent_2_id"),
        (agent_is_active, ":agent_2_id"),
        (agent_get_player_id, ":player_2_id", ":agent_2_id"),
        (player_is_active, ":player_2_id"),
        (agent_get_position, pos61, ":agent_2_id"),
        (get_distance_between_positions, ":distance", pos60, pos61),
        (le, ":distance", max_distance_to_play_sound),
        (multiplayer_send_2_int_to_player, ":player_2_id", server_event_agent_play_sound, ":agent_id", ":sound_id"),
      (try_end),
    (try_end),
    ]),

]
